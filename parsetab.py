
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BOOLEAN BREAK CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END EQUAL EXPONENT EXPONENT_ASSIGN FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH HEX_INTEGER IF IN INSTANCE_VAR INTEGER LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NOT NOT_EQUAL OCT_INTEGER OR PERCENTW PLUS PLUS_ASSIGN PUT RANGEEX RANGEIN REDO RETURN RIGHTPAR RIGHT_COR SELF SPACE STRING SYMBOL TAB TO_F TO_I UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n     estructurasDatos : array\n                         | var_arreglo\n                         | acceder_arreglo\n    \n     estructurasControl : ifStatement\n     value : var\n             | num\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n           | CONSTANT\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     var_arreglo : var\n                    | var ASSIGN array\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones COLON codigo\n                     | IF condiciones COLON codigo else_statement\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND AND\n                   | OR OR\n     condicion : num operComp num\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE COLON codigo\n    '
    
_lr_action_items = {'PUT':([0,51,86,],[6,6,6,]),'GETS':([0,51,86,],[7,7,7,]),'IF':([0,51,86,],[18,18,18,]),'LEFT_COR':([0,9,12,13,14,15,16,19,21,22,23,24,25,37,39,44,49,50,51,64,67,76,78,86,87,91,],[17,36,-29,-30,-31,-32,-41,43,-18,-19,-20,-21,-22,17,-34,17,-42,-33,17,-36,-38,-35,-37,17,-39,-40,]),'PERCENTW':([0,37,51,86,],[19,19,19,19,]),'ARRAY':([0,37,51,86,],[20,20,20,20,]),'LOCAL_VAR':([0,6,17,43,46,51,77,86,88,],[21,21,21,21,21,21,21,21,21,]),'INSTANCE_VAR':([0,6,17,43,46,51,77,86,88,],[22,22,22,22,22,22,22,22,22,]),'CLASS_VAR':([0,6,17,43,46,51,77,86,88,],[23,23,23,23,23,23,23,23,23,]),'GLOBAL_VAR':([0,6,17,43,46,51,77,86,88,],[24,24,24,24,24,24,24,24,24,]),'CONSTANT':([0,6,17,43,46,51,77,86,88,],[25,25,25,25,25,25,25,25,25,]),'$end':([1,2,3,4,5,8,9,10,11,12,13,14,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,47,49,50,64,67,68,70,71,76,78,80,81,82,87,89,91,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-29,-30,-31,-32,-41,-18,-19,-20,-21,-22,-28,-16,-9,-10,-11,-12,-13,-23,-24,-34,-27,-42,-33,-36,-38,-17,-43,-44,-35,-37,-25,-26,-45,-39,-58,-40,]),'ELSE':([2,3,4,5,8,9,10,11,12,13,14,15,16,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,47,49,50,64,67,68,70,71,76,78,80,81,82,87,89,91,],[-1,-2,-3,-4,-5,-6,-7,-8,-29,-30,-31,-32,-41,-18,-19,-20,-21,-22,-28,-16,-9,-10,-11,-12,-13,-23,-24,-34,-27,-42,-33,-36,-38,-17,-43,83,-35,-37,-25,-26,-45,-39,-58,-40,]),'STRING':([6,17,43,46,77,88,],[30,30,30,30,30,30,]),'NIL':([6,17,43,46,77,88,],[31,31,31,31,31,31,]),'SYMBOL':([6,17,43,46,77,88,],[32,32,32,32,32,32,]),'FLOAT':([6,17,18,43,46,52,55,56,57,58,59,60,61,62,73,74,77,88,],[33,33,33,33,33,33,33,-51,-52,-53,-54,-55,-56,-57,-48,-49,33,33,]),'INTEGER':([6,17,18,36,43,46,52,55,56,57,58,59,60,61,62,73,74,77,79,88,],[34,34,34,48,34,34,34,34,-51,-52,-53,-54,-55,-56,-57,-48,-49,34,85,34,]),'DOT':([7,20,47,],[35,45,69,]),'ASSIGN':([16,21,22,23,24,25,],[37,-18,-19,-20,-21,-22,]),'RIGHT_COR':([17,21,22,23,24,25,27,28,29,30,31,32,33,34,38,43,48,63,65,68,84,],[39,-18,-19,-20,-21,-22,-16,-9,-10,-11,-12,-13,-23,-24,50,64,70,76,-15,-17,-14,]),'LEFTPAR':([20,67,],[44,79,]),'COMMA':([21,22,23,24,25,27,28,29,30,31,32,33,34,85,],[-18,-19,-20,-21,-22,46,-9,-10,-11,-12,-13,-23,-24,88,]),'SPACE':([21,22,23,24,25,28,29,30,31,32,33,34,65,],[-18,-19,-20,-21,-22,-9,-10,-11,-12,-13,-23,-24,77,]),'RIGHTPAR':([21,22,23,24,25,27,28,29,30,31,32,33,34,39,50,66,68,85,90,],[-18,-19,-20,-21,-22,-16,-9,-10,-11,-12,-13,-23,-24,-34,-33,78,-17,87,91,]),'GREATER':([33,34,42,],[-23,-24,56,]),'LESS':([33,34,42,],[-23,-24,57,]),'GREATER_EQUAL':([33,34,42,],[-23,-24,58,]),'LESS_EQUAL':([33,34,42,],[-23,-24,59,]),'EQUAL':([33,34,42,],[-23,-24,60,]),'NOT_EQUAL':([33,34,42,],[-23,-24,61,]),'COMPARE':([33,34,42,],[-23,-24,62,]),'COLON':([33,34,40,41,72,75,83,],[-23,-24,51,-46,-47,-50,86,]),'AND':([33,34,40,41,53,72,75,],[-23,-24,53,-46,73,53,-50,]),'OR':([33,34,40,41,54,72,75,],[-23,-24,54,-46,74,54,-50,]),'CHOMP':([35,],[47,]),'NEW':([45,],[67,]),'TO_F':([69,],[80,]),'TO_I':([69,],[81,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,51,86,],[1,71,89,]),'puts':([0,51,86,],[2,2,2,]),'gets':([0,51,86,],[3,3,3,]),'estructurasDatos':([0,51,86,],[4,4,4,]),'estructurasControl':([0,51,86,],[5,5,5,]),'array':([0,37,51,86,],[8,49,8,8,]),'var_arreglo':([0,51,86,],[9,9,9,]),'acceder_arreglo':([0,51,86,],[10,10,10,]),'ifStatement':([0,51,86,],[11,11,11,]),'array_explicito':([0,37,44,51,86,],[12,12,66,12,12,]),'array_implicito':([0,37,51,86,],[13,13,13,13,]),'array_creation':([0,37,51,86,],[14,14,14,14,]),'newArray':([0,37,51,86,],[15,15,15,15,]),'var':([0,6,17,43,46,51,77,86,88,],[16,28,28,28,28,16,28,16,28,]),'values':([6,17,46,88,],[26,38,68,90,]),'value':([6,17,43,46,77,88,],[27,27,65,27,65,27,]),'num':([6,17,18,43,46,52,55,77,88,],[29,29,42,29,29,42,75,29,29,]),'condiciones':([18,52,],[40,72,]),'condicion':([18,52,],[41,41,]),'conectores':([40,72,],[52,52,]),'operComp':([42,],[55,]),'values_space':([43,77,],[63,84,]),'else_statement':([71,],[82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','sintax_analyzer.py',6),
  ('codigo -> gets','codigo',1,'p_codigo','sintax_analyzer.py',7),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','sintax_analyzer.py',8),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','sintax_analyzer.py',9),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',13),
  ('estructurasDatos -> var_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',14),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',15),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',20),
  ('value -> var','value',1,'p_value','sintax_analyzer.py',25),
  ('value -> num','value',1,'p_value','sintax_analyzer.py',26),
  ('value -> STRING','value',1,'p_value','sintax_analyzer.py',27),
  ('value -> NIL','value',1,'p_value','sintax_analyzer.py',28),
  ('value -> SYMBOL','value',1,'p_value','sintax_analyzer.py',29),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','sintax_analyzer.py',33),
  ('values_space -> value','values_space',1,'p_values_space','sintax_analyzer.py',34),
  ('values -> value','values',1,'p_values','sintax_analyzer.py',38),
  ('values -> value COMMA values','values',3,'p_values','sintax_analyzer.py',39),
  ('var -> LOCAL_VAR','var',1,'p_var','sintax_analyzer.py',43),
  ('var -> INSTANCE_VAR','var',1,'p_var','sintax_analyzer.py',44),
  ('var -> CLASS_VAR','var',1,'p_var','sintax_analyzer.py',45),
  ('var -> GLOBAL_VAR','var',1,'p_var','sintax_analyzer.py',46),
  ('var -> CONSTANT','var',1,'p_var','sintax_analyzer.py',47),
  ('num -> FLOAT','num',1,'p_num','sintax_analyzer.py',51),
  ('num -> INTEGER','num',1,'p_num','sintax_analyzer.py',52),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','sintax_analyzer.py',56),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','sintax_analyzer.py',57),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','sintax_analyzer.py',58),
  ('puts -> PUT values','puts',2,'p_puts','sintax_analyzer.py',62),
  ('array -> array_explicito','array',1,'p_array','sintax_analyzer.py',67),
  ('array -> array_implicito','array',1,'p_array','sintax_analyzer.py',68),
  ('array -> array_creation','array',1,'p_array','sintax_analyzer.py',69),
  ('array -> newArray','array',1,'p_array','sintax_analyzer.py',70),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','sintax_analyzer.py',74),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','sintax_analyzer.py',75),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','sintax_analyzer.py',79),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','sintax_analyzer.py',80),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','sintax_analyzer.py',84),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','sintax_analyzer.py',88),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','sintax_analyzer.py',89),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','sintax_analyzer.py',90),
  ('var_arreglo -> var','var_arreglo',1,'p_var_arreglo','sintax_analyzer.py',94),
  ('var_arreglo -> var ASSIGN array','var_arreglo',3,'p_var_arreglo','sintax_analyzer.py',95),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','sintax_analyzer.py',99),
  ('ifStatement -> IF condiciones COLON codigo','ifStatement',4,'p_ifStatement','sintax_analyzer.py',104),
  ('ifStatement -> IF condiciones COLON codigo else_statement','ifStatement',5,'p_ifStatement','sintax_analyzer.py',105),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','sintax_analyzer.py',109),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','sintax_analyzer.py',110),
  ('conectores -> AND AND','conectores',2,'p_conectores','sintax_analyzer.py',114),
  ('conectores -> OR OR','conectores',2,'p_conectores','sintax_analyzer.py',115),
  ('condicion -> num operComp num','condicion',3,'p_condicion','sintax_analyzer.py',119),
  ('operComp -> GREATER','operComp',1,'p_operComp','sintax_analyzer.py',123),
  ('operComp -> LESS','operComp',1,'p_operComp','sintax_analyzer.py',124),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',125),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',126),
  ('operComp -> EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',127),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',128),
  ('operComp -> COMPARE','operComp',1,'p_operComp','sintax_analyzer.py',129),
  ('else_statement -> ELSE COLON codigo','else_statement',3,'p_else_statement','sintax_analyzer.py',133),
]
