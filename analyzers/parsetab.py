
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_RESERVED ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BOOLEAN BREAK CALL CARET CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END END_LOWER EQUAL EXPONENT EXPONENT_ASSIGN FALSE FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH_ROCKET HEX_INTEGER IF IN INSTANCE_VAR INTEGER LBRACE LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NMAP NOT NOT_EQUAL OCT_INTEGER OR OR_RESERVED PERCENTW PIPE PLUS PLUS_ASSIGN PROC PUT QUOTATION RANGEEX RANGEIN RBRACE REDO RETURN RIGHTPAR RIGHT_COR SELF SET SPACE STRING SYMBOL TAB THEN TO_F TO_I TO_S TRUE UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n               | method_call\n               | block_assignment\n               | proc_assignment\n               | proc_call\n               | declaraciones\n               | expression\n               | to_string\n               | comparador\n     estructurasDatos : array\n                         | acceder_arreglo\n                         | hash_operations\n                         | hash_var\n                         | set_expression\n                         | set_operations\n     estructurasControl : ifStatement\n                           | while_statement\n                           | unless_expression\n     value : num\n             | var\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n\n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     var_arreglo : LOCAL_VAR ASSIGN array\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones NEWLINE codigo END_LOWER\n                     | IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND\n                   | OR\n                   | AND_RESERVED\n                   | OR_RESERVED\n                   | EQUAL\n     condicion : num operComp num\n                  | var operComp num\n                  | num operComp var\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE NEWLINE codigo\n     to_string : LOCAL_VAR DOT TO_S\n     concatenar_string : STRING PLUS STRING\n                          | STRING PLUS LOCAL_VAR\n                          | LOCAL_VAR PLUS STRING\n                          | LOCAL_VAR PLUS LOCAL_VAR\n     declaracion_concatenar_string : LOCAL_VAR ASSIGN concatenar_string\n     hash_var : LOCAL_VAR ASSIGN LBRACE hash_values RBRACE\n                 | LOCAL_VAR ASSIGN LBRACE RBRACE\n     hash_values : STRING HASH_ROCKET value\n                    | STRING HASH_ROCKET value COMMA hash_values\n     hash_access : var LBRACE value RBRACE\n     hash_operations : hash_access ASSIGN value\n     variable_declaration : LOCAL_VAR ASSIGN value\n     store_conditional_result : LOCAL_VAR ASSIGN condiciones\n     declare_data_structures : var_arreglo\n                                | hash_var\n     while_statement : WHILE condiciones COLON codigo\n     condition_with_connectors : condiciones conectores condiciones\n     method_call : var LEFTPAR values RIGHTPAR\n                    | var LEFTPAR RIGHTPAR\n     print_statement : PUT LEFTPAR values RIGHTPAR\n     boolean_expression : expression GREATER expression\n                           | expression LESS expression\n                           | expression GREATER_EQUAL expression\n                           | expression LESS_EQUAL expression\n                           | expression EQUAL expression\n                           | expression NOT_EQUAL expression\n                           | boolean_value  boolean_value : TRUE\n                      | FALSE  expression : INTEGER\n                   | FLOAT\n                   | variable\n                   | STRING  variable : LOCAL_VAR\n                 | INSTANCE_VAR\n                 | CLASS_VAR\n                 | GLOBAL_VAR\n                 | CONSTANT  declaraciones : variable_declaration\n                      | store_conditional_result\n                      | declare_data_structures\n                      | var_arreglo\n                      | hash_var\n                      | LOCAL_VAR ASSIGN arithmetic_production\n                      | declaracion_concatenar_string\n     expresion : puts\n                 | gets\n                 | print_statement\n     comparador : value EQUAL value\n                   | value COMPARE value\n    set_expression : SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR\n                      | SET LEFT_COR values RIGHT_CORset_operations : set_expression\n                      | set_operations set_binary_operators set_expressiondeclare_data_structures : LOCAL_VAR ASSIGN set_expressionset_binary_operators : PLUS\n                            | MINUS\n                            | AMPERSAND\n                            | PIPE\n                            | CARETunless_expression : UNLESS boolean_expression THEN expresion END\n                         | UNLESS boolean_expression THEN expresion ELSE expresion ENDarithmetic_production : num\n                             | LOCAL_VAR\n                             | num arithmetic_operators arithmetic_production\n                             | LOCAL_VAR arithmetic_operators arithmetic_productionarithmetic_operators : PLUS\n                            | MINUS\n                            | MULTIPLY\n                            | DIVIDE\n                            | MODULO\n                            | EXPONENTblock_expression : LBRACE expresion RBRACE\n                         | DO expresion END\n                         | LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE\n                         | DO PIPE LOCAL_VAR PIPE expresion ENDblock_assignment : method_call block_expressionproc_expression : PROC DOT NEW block_expressionproc_assignment : LOCAL_VAR ASSIGN proc_expressionproc_call : LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR DOT LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR LEFT_COR values RIGHT_CORexpresion : condition_with_connectors'
    
_lr_action_items = {'PUT':([0,57,58,149,165,166,225,228,248,268,],[14,115,115,14,14,115,115,115,115,14,]),'GETS':([0,57,58,149,165,166,225,228,248,268,],[15,15,15,15,15,15,15,15,15,15,]),'LOCAL_VAR':([0,14,27,44,45,46,57,58,76,77,78,80,84,85,86,88,106,110,115,118,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,188,189,190,191,192,193,194,199,200,201,202,222,225,228,237,244,248,262,268,],[26,65,65,65,65,102,65,65,65,65,125,65,65,65,65,65,65,179,65,183,65,65,26,65,-59,-60,-61,-62,-63,65,-67,-68,-69,-70,-71,-72,-73,26,65,102,102,102,102,102,102,65,65,231,234,-143,-144,-145,-146,-147,231,-142,241,65,65,65,65,65,65,65,65,26,]),'INTEGER':([0,14,27,44,45,46,57,58,76,77,78,80,83,84,85,86,88,106,115,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,180,181,188,189,190,191,192,193,194,199,200,202,222,224,225,228,237,244,248,262,268,],[33,64,64,64,64,97,64,64,64,64,64,64,143,64,64,64,64,64,64,64,64,33,64,-59,-60,-61,-62,-63,64,-67,-68,-69,-70,-71,-72,-73,64,33,64,97,97,97,97,97,97,64,64,64,-142,-143,-144,-145,-146,-147,64,-142,64,64,250,64,64,64,64,64,64,33,]),'FLOAT':([0,14,27,44,45,46,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,180,181,188,189,190,191,192,193,194,199,200,202,222,225,228,237,244,248,262,268,],[34,63,63,63,63,98,63,63,63,63,63,63,63,63,63,63,63,63,63,63,34,63,-59,-60,-61,-62,-63,63,-67,-68,-69,-70,-71,-72,-73,63,34,63,98,98,98,98,98,98,63,63,63,-142,-143,-144,-145,-146,-147,63,-142,63,63,63,63,63,63,63,63,34,]),'STRING':([0,14,27,46,76,77,78,80,84,85,86,88,106,115,119,128,139,149,165,167,168,169,170,171,172,180,189,201,202,222,237,244,262,265,268,],[36,62,62,99,62,62,137,62,62,62,62,62,62,62,62,197,62,36,36,99,99,99,99,99,99,62,235,240,62,62,62,62,62,197,36,]),'SET':([0,70,71,72,73,74,75,78,149,165,268,],[43,43,-131,-132,-133,-134,-135,43,43,43,43,]),'IF':([0,149,165,268,],[44,44,44,44,]),'WHILE':([0,149,165,268,],[45,45,45,45,]),'UNLESS':([0,149,165,268,],[46,46,46,46,]),'INSTANCE_VAR':([0,14,27,44,45,46,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,202,222,225,228,237,244,248,262,268,],[47,66,66,66,66,103,66,66,66,66,66,66,66,66,66,66,66,66,66,66,47,66,-59,-60,-61,-62,-63,66,-67,-68,-69,-70,-71,-72,-73,47,66,103,103,103,103,103,103,66,66,66,66,66,66,66,66,66,66,47,]),'CLASS_VAR':([0,14,27,44,45,46,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,202,222,225,228,237,244,248,262,268,],[48,67,67,67,67,104,67,67,67,67,67,67,67,67,67,67,67,67,67,67,48,67,-59,-60,-61,-62,-63,67,-67,-68,-69,-70,-71,-72,-73,48,67,104,104,104,104,104,104,67,67,67,67,67,67,67,67,67,67,48,]),'GLOBAL_VAR':([0,14,27,44,45,46,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,202,222,225,228,237,244,248,262,268,],[49,68,68,68,68,105,68,68,68,68,68,68,68,68,68,68,68,68,68,68,49,68,-59,-60,-61,-62,-63,68,-67,-68,-69,-70,-71,-72,-73,49,68,105,105,105,105,105,105,68,68,68,68,68,68,68,68,68,68,49,]),'CONSTANT':([0,46,149,165,167,168,169,170,171,172,268,],[50,50,50,50,50,50,50,50,50,50,50,]),'NIL':([0,14,27,76,77,78,80,84,85,86,88,106,115,119,139,149,165,180,202,222,237,244,262,268,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'SYMBOL':([0,14,27,76,77,78,80,84,85,86,88,106,115,119,139,149,165,180,202,222,237,244,262,268,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'LEFT_COR':([0,26,31,38,39,40,41,43,54,78,82,107,132,142,149,165,174,177,206,221,223,261,268,274,],[27,80,83,-41,-42,-43,-44,88,106,27,-47,27,-45,-46,27,27,-49,-51,244,-48,-50,-52,27,-53,]),'PERCENTW':([0,78,149,165,268,],[54,54,54,54,54,]),'ARRAY':([0,78,149,165,268,],[55,55,55,55,55,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,38,39,40,41,47,48,49,50,51,52,53,56,59,60,61,62,63,64,65,66,67,68,82,90,120,121,123,125,126,127,129,130,131,132,133,135,136,137,140,142,144,145,146,174,177,178,182,184,186,196,204,205,207,209,210,211,212,213,221,223,229,230,231,232,233,234,235,236,239,240,241,243,246,247,255,256,261,263,264,267,269,272,274,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-109,-114,-115,-116,-89,-120,-105,-106,-107,-108,-41,-42,-43,-44,-110,-111,-112,-113,-22,-25,-26,-152,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-47,-57,-39,-129,-94,-31,-154,-119,-87,-88,-130,-45,-80,-22,-23,-24,-75,-46,-124,-125,-86,-49,-51,-148,-149,-30,-93,-82,-157,-54,-127,-58,-64,-66,-65,-91,-48,-50,-37,-38,-139,-141,-138,-79,-78,-81,-140,-76,-77,-156,-55,-136,-153,-155,-52,-150,-151,-56,-137,-126,-53,]),'END_LOWER':([2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,38,39,40,41,47,48,49,50,51,52,53,56,59,60,61,62,63,64,65,66,67,68,82,90,120,121,123,125,126,127,129,130,131,132,133,135,136,137,140,142,144,145,146,174,177,178,182,184,186,196,204,205,207,208,209,210,211,212,213,221,223,229,230,231,232,233,234,235,236,239,240,241,243,246,247,255,256,258,261,263,264,267,269,272,273,274,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-109,-114,-115,-116,-89,-120,-105,-106,-107,-108,-41,-42,-43,-44,-110,-111,-112,-113,-22,-25,-26,-152,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-47,-57,-39,-129,-94,-31,-154,-119,-87,-88,-130,-45,-80,-22,-23,-24,-75,-46,-124,-125,-86,-49,-51,-148,-149,-30,-93,-82,-157,-54,-127,246,-58,-64,-66,-65,-91,-48,-50,-37,-38,-139,-141,-138,-79,-78,-81,-140,-76,-77,-156,-55,-136,-153,-155,267,-52,-150,-151,-56,-137,-126,-74,-53,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,38,39,40,41,47,48,49,50,51,52,53,56,59,60,61,62,63,64,65,66,67,68,82,89,90,120,121,123,125,126,127,129,130,131,132,133,135,136,137,140,142,144,145,146,174,177,178,182,184,186,196,204,205,207,208,209,210,211,212,213,221,223,229,230,231,232,233,234,235,236,239,240,241,243,246,247,255,256,259,261,263,264,267,269,272,274,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-109,-114,-115,-116,-89,-120,-105,-106,-107,-108,-41,-42,-43,-44,-110,-111,-112,-113,-22,-25,-26,-152,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-47,149,-57,-39,-129,-94,-31,-154,-119,-87,-88,-130,-45,-80,-22,-23,-24,-75,-46,-124,-125,-86,-49,-51,-148,-149,-30,-93,-82,-157,-54,-127,245,-58,-64,-66,-65,-91,-48,-50,-37,-38,-139,-141,-138,-79,-78,-81,-140,-76,-77,-156,-55,-136,-153,-155,268,-52,-150,-151,-56,-137,-126,-53,]),'LBRACE':([6,25,26,47,48,49,78,123,186,238,],[57,77,-31,-32,-33,-34,128,-94,-93,57,]),'DO':([6,123,186,238,],[58,-94,-93,58,]),'DOT':([15,26,43,55,120,134,],[69,79,87,108,185,198,]),'PLUS':([20,21,63,64,121,125,135,137,207,231,233,272,],[-128,71,-35,-36,-129,189,200,201,-127,200,200,-126,]),'MINUS':([20,21,63,64,121,125,135,207,231,233,272,],[-128,72,-35,-36,-129,190,190,-127,190,190,-126,]),'AMPERSAND':([20,21,121,207,272,],[-128,73,-129,-127,-126,]),'PIPE':([20,21,57,58,121,179,183,207,272,],[-128,74,110,118,-129,225,228,-127,-126,]),'CARET':([20,21,121,207,272,],[-128,75,-129,-127,-126,]),'LEFTPAR':([25,26,47,48,49,55,79,115,138,147,177,],[76,-31,-32,-33,-34,107,139,180,202,206,224,]),'EQUAL':([25,26,33,34,35,36,37,47,48,49,50,51,52,53,63,64,65,66,67,68,89,90,91,92,93,95,97,98,99,102,103,104,105,116,125,130,135,136,209,210,211,212,227,],[-23,-31,-36,-35,-107,-24,84,-32,-33,-34,-113,-22,-25,-26,-35,-36,-31,-32,-33,-34,155,-57,161,161,155,171,-105,-106,-108,-109,-110,-111,-112,155,-31,155,161,161,155,-64,-66,-65,155,]),'COMPARE':([25,26,33,34,36,37,47,48,49,51,52,53,63,64,65,66,67,68,91,92,125,135,136,],[-23,-31,-36,-35,-24,85,-32,-33,-34,-22,-25,-26,-35,-36,-31,-32,-33,-34,163,163,-31,163,163,]),'ASSIGN':([26,42,187,],[78,86,-85,]),'RIGHT_COR':([27,51,52,53,60,61,62,63,64,65,66,67,68,81,106,141,143,148,173,175,184,249,257,],[82,-22,-25,-26,-29,-23,-24,-35,-36,-31,-32,-33,-34,142,174,204,205,207,221,-28,-30,-27,266,]),'GREATER':([35,50,63,64,65,66,67,68,91,92,95,97,98,99,102,103,104,105,125,135,136,],[-107,-113,-35,-36,-31,-32,-33,-34,157,157,167,-105,-106,-108,-109,-110,-111,-112,-31,157,157,]),'LESS':([35,50,63,64,65,66,67,68,91,92,95,97,98,99,102,103,104,105,125,135,136,],[-107,-113,-35,-36,-31,-32,-33,-34,158,158,168,-105,-106,-108,-109,-110,-111,-112,-31,158,158,]),'GREATER_EQUAL':([35,50,63,64,65,66,67,68,91,92,95,97,98,99,102,103,104,105,125,135,136,],[-107,-113,-35,-36,-31,-32,-33,-34,159,159,169,-105,-106,-108,-109,-110,-111,-112,-31,159,159,]),'LESS_EQUAL':([35,50,63,64,65,66,67,68,91,92,95,97,98,99,102,103,104,105,125,135,136,],[-107,-113,-35,-36,-31,-32,-33,-34,160,160,170,-105,-106,-108,-109,-110,-111,-112,-31,160,160,]),'NOT_EQUAL':([35,50,63,64,65,66,67,68,91,92,95,97,98,99,102,103,104,105,125,135,136,],[-107,-113,-35,-36,-31,-32,-33,-34,162,162,172,-105,-106,-108,-109,-110,-111,-112,-31,162,162,]),'THEN':([35,50,94,96,97,98,99,100,101,102,103,104,105,215,216,217,218,219,220,],[-107,-113,166,-102,-105,-106,-108,-103,-104,-109,-110,-111,-112,-96,-97,-98,-99,-100,-101,]),'TRUE':([46,],[100,]),'FALSE':([46,],[101,]),'COMMA':([51,52,53,60,61,62,63,64,65,66,67,68,250,254,],[-22,-25,-26,119,-23,-24,-35,-36,-31,-32,-33,-34,262,265,]),'RIGHTPAR':([51,52,53,60,61,62,63,64,65,66,67,68,76,82,122,142,176,184,203,226,242,250,266,270,],[-22,-25,-26,-29,-23,-24,-35,-36,-31,-32,-33,-34,123,-47,186,-46,223,-30,243,252,256,261,272,274,]),'RBRACE':([51,52,53,59,60,61,62,63,64,65,66,67,68,90,109,111,112,113,114,120,124,128,184,195,209,210,211,212,227,229,230,251,252,254,271,],[-22,-25,-26,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-57,178,-121,-122,-123,-158,-39,187,196,-30,236,-58,-64,-66,-65,-92,-37,-38,263,-95,-83,-84,]),'SPACE':([51,52,53,61,62,63,64,65,66,67,68,175,],[-22,-25,-26,-23,-24,-35,-36,-31,-32,-33,-34,222,]),'END':([51,52,53,59,60,61,62,63,64,65,66,67,68,90,111,112,113,114,117,120,184,209,210,211,212,214,227,229,230,252,253,260,],[-22,-25,-26,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-57,-121,-122,-123,-158,182,-39,-30,-58,-64,-66,-65,247,-92,-37,-38,-95,264,269,]),'ELSE':([51,52,53,59,60,61,62,63,64,65,66,67,68,90,111,112,113,114,120,184,209,210,211,212,214,227,229,230,245,252,],[-22,-25,-26,-40,-29,-23,-24,-35,-36,-31,-32,-33,-34,-57,-121,-122,-123,-158,-39,-30,-58,-64,-66,-65,248,-92,-37,-38,259,-95,]),'MULTIPLY':([63,64,125,135,231,233,],[-35,-36,191,191,191,191,]),'DIVIDE':([63,64,125,135,231,233,],[-35,-36,192,192,192,192,]),'MODULO':([63,64,125,135,231,233,],[-35,-36,193,193,193,193,]),'EXPONENT':([63,64,125,135,231,233,],[-35,-36,194,194,194,194,]),'AND':([63,64,65,66,67,68,89,90,93,116,130,209,210,211,212,227,],[-35,-36,-31,-32,-33,-34,151,-57,151,151,151,151,-64,-66,-65,151,]),'OR':([63,64,65,66,67,68,89,90,93,116,130,209,210,211,212,227,],[-35,-36,-31,-32,-33,-34,152,-57,152,152,152,152,-64,-66,-65,152,]),'AND_RESERVED':([63,64,65,66,67,68,89,90,93,116,130,209,210,211,212,227,],[-35,-36,-31,-32,-33,-34,153,-57,153,153,153,153,-64,-66,-65,153,]),'OR_RESERVED':([63,64,65,66,67,68,89,90,93,116,130,209,210,211,212,227,],[-35,-36,-31,-32,-33,-34,154,-57,154,154,154,154,-64,-66,-65,154,]),'COLON':([63,64,65,66,67,68,90,93,209,210,211,212,],[-35,-36,-31,-32,-33,-34,-57,165,-58,-64,-66,-65,]),'CHOMP':([69,],[120,]),'PROC':([78,],[134,]),'CALL':([79,],[138,]),'TO_S':([79,],[140,]),'NEW':([87,108,198,],[147,177,238,]),'TO_F':([185,],[229,]),'TO_I':([185,],[230,]),'HASH_ROCKET':([197,],[237,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,149,165,268,],[1,208,213,273,]),'puts':([0,57,58,149,165,166,225,228,248,268,],[2,111,111,2,2,111,111,111,111,2,]),'gets':([0,57,58,149,165,166,225,228,248,268,],[3,112,112,3,3,112,112,112,112,3,]),'estructurasDatos':([0,149,165,268,],[4,4,4,4,]),'estructurasControl':([0,149,165,268,],[5,5,5,5,]),'method_call':([0,149,165,268,],[6,6,6,6,]),'block_assignment':([0,149,165,268,],[7,7,7,7,]),'proc_assignment':([0,149,165,268,],[8,8,8,8,]),'proc_call':([0,149,165,268,],[9,9,9,9,]),'declaraciones':([0,149,165,268,],[10,10,10,10,]),'expression':([0,46,149,165,167,168,169,170,171,172,268,],[11,95,11,11,215,216,217,218,219,220,11,]),'to_string':([0,149,165,268,],[12,12,12,12,]),'comparador':([0,149,165,268,],[13,13,13,13,]),'array':([0,78,149,165,268,],[16,132,16,16,16,]),'acceder_arreglo':([0,149,165,268,],[17,17,17,17,]),'hash_operations':([0,149,165,268,],[18,18,18,18,]),'hash_var':([0,149,165,268,],[19,19,19,19,]),'set_expression':([0,70,78,149,165,268,],[20,121,131,20,20,20,]),'set_operations':([0,149,165,268,],[21,21,21,21,]),'ifStatement':([0,149,165,268,],[22,22,22,22,]),'while_statement':([0,149,165,268,],[23,23,23,23,]),'unless_expression':([0,149,165,268,],[24,24,24,24,]),'var':([0,14,27,44,45,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,156,165,166,180,181,202,222,225,228,237,244,248,262,268,],[25,61,61,92,92,92,92,61,61,136,61,61,61,61,61,61,61,61,61,25,92,211,25,92,61,92,61,61,92,92,61,61,92,61,25,]),'variable_declaration':([0,149,165,268,],[28,28,28,28,]),'store_conditional_result':([0,149,165,268,],[29,29,29,29,]),'declare_data_structures':([0,149,165,268,],[30,30,30,30,]),'var_arreglo':([0,149,165,268,],[31,31,31,31,]),'declaracion_concatenar_string':([0,149,165,268,],[32,32,32,32,]),'variable':([0,46,149,165,167,168,169,170,171,172,268,],[35,35,35,35,35,35,35,35,35,35,35,]),'value':([0,14,27,76,77,78,80,84,85,86,88,106,115,119,139,149,165,180,202,222,237,244,262,268,],[37,60,60,60,124,129,60,144,145,146,60,175,60,60,60,37,37,60,60,175,254,60,60,37,]),'array_explicito':([0,78,107,149,165,268,],[38,38,176,38,38,38,]),'array_implicito':([0,78,149,165,268,],[39,39,39,39,39,]),'array_creation':([0,78,149,165,268,],[40,40,40,40,40,]),'newArray':([0,78,149,165,268,],[41,41,41,41,41,]),'hash_access':([0,149,165,268,],[42,42,42,42,]),'num':([0,14,27,44,45,57,58,76,77,78,80,84,85,86,88,106,115,119,139,149,150,156,164,165,166,180,181,188,199,202,222,225,228,237,244,248,262,268,],[51,51,51,91,91,91,91,51,51,135,51,51,51,51,51,51,51,51,51,51,91,210,212,51,91,51,91,233,233,51,51,91,91,51,51,91,51,51,]),'block_expression':([6,238,],[56,255,]),'values':([14,27,76,80,88,115,119,139,180,202,244,262,],[59,81,122,141,148,59,184,203,226,242,257,270,]),'set_binary_operators':([21,],[70,]),'condiciones':([44,45,57,58,78,150,166,181,225,228,248,],[89,93,116,116,130,209,116,227,116,116,116,]),'condicion':([44,45,57,58,78,150,166,181,225,228,248,],[90,90,90,90,90,90,90,90,90,90,90,]),'boolean_expression':([46,],[94,]),'boolean_value':([46,],[96,]),'expresion':([57,58,166,225,228,248,],[109,117,214,251,253,260,]),'print_statement':([57,58,166,225,228,248,],[113,113,113,113,113,113,]),'condition_with_connectors':([57,58,166,225,228,248,],[114,114,114,114,114,114,]),'proc_expression':([78,],[126,]),'arithmetic_production':([78,188,199,],[127,232,239,]),'concatenar_string':([78,],[133,]),'conectores':([89,93,116,130,209,227,],[150,150,181,150,150,150,]),'operComp':([91,92,135,136,],[156,164,156,164,]),'values_space':([106,222,],[173,249,]),'arithmetic_operators':([125,135,231,233,],[188,199,188,199,]),'hash_values':([128,265,],[195,271,]),'else_statement':([245,],[258,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','syntax_analyzer.py',14),
  ('codigo -> gets','codigo',1,'p_codigo','syntax_analyzer.py',15),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','syntax_analyzer.py',16),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','syntax_analyzer.py',17),
  ('codigo -> method_call','codigo',1,'p_codigo','syntax_analyzer.py',18),
  ('codigo -> block_assignment','codigo',1,'p_codigo','syntax_analyzer.py',19),
  ('codigo -> proc_assignment','codigo',1,'p_codigo','syntax_analyzer.py',20),
  ('codigo -> proc_call','codigo',1,'p_codigo','syntax_analyzer.py',21),
  ('codigo -> declaraciones','codigo',1,'p_codigo','syntax_analyzer.py',22),
  ('codigo -> expression','codigo',1,'p_codigo','syntax_analyzer.py',23),
  ('codigo -> to_string','codigo',1,'p_codigo','syntax_analyzer.py',24),
  ('codigo -> comparador','codigo',1,'p_codigo','syntax_analyzer.py',25),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',28),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',29),
  ('estructurasDatos -> hash_operations','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',30),
  ('estructurasDatos -> hash_var','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',31),
  ('estructurasDatos -> set_expression','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',32),
  ('estructurasDatos -> set_operations','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',33),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',37),
  ('estructurasControl -> while_statement','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',38),
  ('estructurasControl -> unless_expression','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',39),
  ('value -> num','value',1,'p_value','syntax_analyzer.py',44),
  ('value -> var','value',1,'p_value','syntax_analyzer.py',45),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',46),
  ('value -> NIL','value',1,'p_value','syntax_analyzer.py',47),
  ('value -> SYMBOL','value',1,'p_value','syntax_analyzer.py',48),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','syntax_analyzer.py',53),
  ('values_space -> value','values_space',1,'p_values_space','syntax_analyzer.py',54),
  ('values -> value','values',1,'p_values','syntax_analyzer.py',58),
  ('values -> value COMMA values','values',3,'p_values','syntax_analyzer.py',59),
  ('var -> LOCAL_VAR','var',1,'p_var','syntax_analyzer.py',63),
  ('var -> INSTANCE_VAR','var',1,'p_var','syntax_analyzer.py',64),
  ('var -> CLASS_VAR','var',1,'p_var','syntax_analyzer.py',65),
  ('var -> GLOBAL_VAR','var',1,'p_var','syntax_analyzer.py',66),
  ('num -> FLOAT','num',1,'p_num','syntax_analyzer.py',71),
  ('num -> INTEGER','num',1,'p_num','syntax_analyzer.py',72),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','syntax_analyzer.py',77),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','syntax_analyzer.py',78),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','syntax_analyzer.py',79),
  ('puts -> PUT values','puts',2,'p_puts','syntax_analyzer.py',83),
  ('array -> array_explicito','array',1,'p_array','syntax_analyzer.py',89),
  ('array -> array_implicito','array',1,'p_array','syntax_analyzer.py',90),
  ('array -> array_creation','array',1,'p_array','syntax_analyzer.py',91),
  ('array -> newArray','array',1,'p_array','syntax_analyzer.py',92),
  ('var_arreglo -> LOCAL_VAR ASSIGN array','var_arreglo',3,'p_var_arreglo','syntax_analyzer.py',97),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','syntax_analyzer.py',102),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','syntax_analyzer.py',103),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','syntax_analyzer.py',108),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','syntax_analyzer.py',109),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','syntax_analyzer.py',113),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','syntax_analyzer.py',117),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','syntax_analyzer.py',118),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','syntax_analyzer.py',119),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','syntax_analyzer.py',123),
  ('ifStatement -> IF condiciones NEWLINE codigo END_LOWER','ifStatement',5,'p_ifStatement','syntax_analyzer.py',128),
  ('ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER','ifStatement',7,'p_ifStatement','syntax_analyzer.py',129),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','syntax_analyzer.py',133),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','syntax_analyzer.py',134),
  ('conectores -> AND','conectores',1,'p_conectores','syntax_analyzer.py',139),
  ('conectores -> OR','conectores',1,'p_conectores','syntax_analyzer.py',140),
  ('conectores -> AND_RESERVED','conectores',1,'p_conectores','syntax_analyzer.py',141),
  ('conectores -> OR_RESERVED','conectores',1,'p_conectores','syntax_analyzer.py',142),
  ('conectores -> EQUAL','conectores',1,'p_conectores','syntax_analyzer.py',143),
  ('condicion -> num operComp num','condicion',3,'p_condicion','syntax_analyzer.py',148),
  ('condicion -> var operComp num','condicion',3,'p_condicion','syntax_analyzer.py',149),
  ('condicion -> num operComp var','condicion',3,'p_condicion','syntax_analyzer.py',150),
  ('operComp -> GREATER','operComp',1,'p_operComp','syntax_analyzer.py',155),
  ('operComp -> LESS','operComp',1,'p_operComp','syntax_analyzer.py',156),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',157),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',158),
  ('operComp -> EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',159),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',160),
  ('operComp -> COMPARE','operComp',1,'p_operComp','syntax_analyzer.py',161),
  ('else_statement -> ELSE NEWLINE codigo','else_statement',3,'p_else_statement','syntax_analyzer.py',165),
  ('to_string -> LOCAL_VAR DOT TO_S','to_string',3,'p_to_string','syntax_analyzer.py',169),
  ('concatenar_string -> STRING PLUS STRING','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',182),
  ('concatenar_string -> STRING PLUS LOCAL_VAR','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',183),
  ('concatenar_string -> LOCAL_VAR PLUS STRING','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',184),
  ('concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',185),
  ('declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string','declaracion_concatenar_string',3,'p_declaracion_concatenar_string','syntax_analyzer.py',199),
  ('hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE','hash_var',5,'p_hash_var','syntax_analyzer.py',218),
  ('hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE','hash_var',4,'p_hash_var','syntax_analyzer.py',219),
  ('hash_values -> STRING HASH_ROCKET value','hash_values',3,'p_hash_values','syntax_analyzer.py',222),
  ('hash_values -> STRING HASH_ROCKET value COMMA hash_values','hash_values',5,'p_hash_values','syntax_analyzer.py',223),
  ('hash_access -> var LBRACE value RBRACE','hash_access',4,'p_hash_access','syntax_analyzer.py',231),
  ('hash_operations -> hash_access ASSIGN value','hash_operations',3,'p_hash_operations','syntax_analyzer.py',235),
  ('variable_declaration -> LOCAL_VAR ASSIGN value','variable_declaration',3,'p_variable_declaration','syntax_analyzer.py',240),
  ('store_conditional_result -> LOCAL_VAR ASSIGN condiciones','store_conditional_result',3,'p_store_conditional_result','syntax_analyzer.py',248),
  ('declare_data_structures -> var_arreglo','declare_data_structures',1,'p_declare_data_structures','syntax_analyzer.py',253),
  ('declare_data_structures -> hash_var','declare_data_structures',1,'p_declare_data_structures','syntax_analyzer.py',254),
  ('while_statement -> WHILE condiciones COLON codigo','while_statement',4,'p_while_statement','syntax_analyzer.py',259),
  ('condition_with_connectors -> condiciones conectores condiciones','condition_with_connectors',3,'p_condition_with_connectors','syntax_analyzer.py',264),
  ('method_call -> var LEFTPAR values RIGHTPAR','method_call',4,'p_method_call','syntax_analyzer.py',269),
  ('method_call -> var LEFTPAR RIGHTPAR','method_call',3,'p_method_call','syntax_analyzer.py',270),
  ('print_statement -> PUT LEFTPAR values RIGHTPAR','print_statement',4,'p_print_statement','syntax_analyzer.py',274),
  ('boolean_expression -> expression GREATER expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',279),
  ('boolean_expression -> expression LESS expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',280),
  ('boolean_expression -> expression GREATER_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',281),
  ('boolean_expression -> expression LESS_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',282),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',283),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',284),
  ('boolean_expression -> boolean_value','boolean_expression',1,'p_boolean_expression','syntax_analyzer.py',285),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','syntax_analyzer.py',289),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','syntax_analyzer.py',290),
  ('expression -> INTEGER','expression',1,'p_expression','syntax_analyzer.py',294),
  ('expression -> FLOAT','expression',1,'p_expression','syntax_analyzer.py',295),
  ('expression -> variable','expression',1,'p_expression','syntax_analyzer.py',296),
  ('expression -> STRING','expression',1,'p_expression','syntax_analyzer.py',297),
  ('variable -> LOCAL_VAR','variable',1,'p_variable','syntax_analyzer.py',300),
  ('variable -> INSTANCE_VAR','variable',1,'p_variable','syntax_analyzer.py',301),
  ('variable -> CLASS_VAR','variable',1,'p_variable','syntax_analyzer.py',302),
  ('variable -> GLOBAL_VAR','variable',1,'p_variable','syntax_analyzer.py',303),
  ('variable -> CONSTANT','variable',1,'p_variable','syntax_analyzer.py',304),
  ('declaraciones -> variable_declaration','declaraciones',1,'p_declaraciones','syntax_analyzer.py',308),
  ('declaraciones -> store_conditional_result','declaraciones',1,'p_declaraciones','syntax_analyzer.py',309),
  ('declaraciones -> declare_data_structures','declaraciones',1,'p_declaraciones','syntax_analyzer.py',310),
  ('declaraciones -> var_arreglo','declaraciones',1,'p_declaraciones','syntax_analyzer.py',311),
  ('declaraciones -> hash_var','declaraciones',1,'p_declaraciones','syntax_analyzer.py',312),
  ('declaraciones -> LOCAL_VAR ASSIGN arithmetic_production','declaraciones',3,'p_declaraciones','syntax_analyzer.py',313),
  ('declaraciones -> declaracion_concatenar_string','declaraciones',1,'p_declaraciones','syntax_analyzer.py',314),
  ('expresion -> puts','expresion',1,'p_expresion','syntax_analyzer.py',319),
  ('expresion -> gets','expresion',1,'p_expresion','syntax_analyzer.py',320),
  ('expresion -> print_statement','expresion',1,'p_expresion','syntax_analyzer.py',321),
  ('comparador -> value EQUAL value','comparador',3,'p_comparador','syntax_analyzer.py',328),
  ('comparador -> value COMPARE value','comparador',3,'p_comparador','syntax_analyzer.py',329),
  ('set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR','set_expression',8,'p_set_expression','syntax_analyzer.py',355),
  ('set_expression -> SET LEFT_COR values RIGHT_COR','set_expression',4,'p_set_expression','syntax_analyzer.py',356),
  ('set_operations -> set_expression','set_operations',1,'p_set_operations','syntax_analyzer.py',359),
  ('set_operations -> set_operations set_binary_operators set_expression','set_operations',3,'p_set_operations','syntax_analyzer.py',360),
  ('declare_data_structures -> LOCAL_VAR ASSIGN set_expression','declare_data_structures',3,'p_set_declaration','syntax_analyzer.py',363),
  ('set_binary_operators -> PLUS','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',367),
  ('set_binary_operators -> MINUS','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',368),
  ('set_binary_operators -> AMPERSAND','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',369),
  ('set_binary_operators -> PIPE','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',370),
  ('set_binary_operators -> CARET','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',371),
  ('unless_expression -> UNLESS boolean_expression THEN expresion END','unless_expression',5,'p_unless_expression','syntax_analyzer.py',374),
  ('unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END','unless_expression',7,'p_unless_expression','syntax_analyzer.py',375),
  ('arithmetic_production -> num','arithmetic_production',1,'p_arithmetic_production','syntax_analyzer.py',378),
  ('arithmetic_production -> LOCAL_VAR','arithmetic_production',1,'p_arithmetic_production','syntax_analyzer.py',379),
  ('arithmetic_production -> num arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','syntax_analyzer.py',380),
  ('arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','syntax_analyzer.py',381),
  ('arithmetic_operators -> PLUS','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',407),
  ('arithmetic_operators -> MINUS','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',408),
  ('arithmetic_operators -> MULTIPLY','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',409),
  ('arithmetic_operators -> DIVIDE','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',410),
  ('arithmetic_operators -> MODULO','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',411),
  ('arithmetic_operators -> EXPONENT','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',412),
  ('block_expression -> LBRACE expresion RBRACE','block_expression',3,'p_block_expression','syntax_analyzer.py',415),
  ('block_expression -> DO expresion END','block_expression',3,'p_block_expression','syntax_analyzer.py',416),
  ('block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE','block_expression',6,'p_block_expression','syntax_analyzer.py',417),
  ('block_expression -> DO PIPE LOCAL_VAR PIPE expresion END','block_expression',6,'p_block_expression','syntax_analyzer.py',418),
  ('block_assignment -> method_call block_expression','block_assignment',2,'p_block_assignment','syntax_analyzer.py',421),
  ('proc_expression -> PROC DOT NEW block_expression','proc_expression',4,'p_proc_expression','syntax_analyzer.py',424),
  ('proc_assignment -> LOCAL_VAR ASSIGN proc_expression','proc_assignment',3,'p_proc_assignment','syntax_analyzer.py',427),
  ('proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR','proc_call',6,'p_proc_call','syntax_analyzer.py',431),
  ('proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR','proc_call',5,'p_proc_call','syntax_analyzer.py',432),
  ('proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR','proc_call',4,'p_proc_call','syntax_analyzer.py',433),
  ('expresion -> condition_with_connectors','expresion',1,'p_condition_expr','syntax_analyzer.py',436),
]
