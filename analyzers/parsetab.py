
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BIT_AND BIT_OR BOOLEAN BREAK CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END EQUAL EXPONENT EXPONENT_ASSIGN FALSE FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH HEX_INTEGER IF IN INSTANCE_VAR INTEGER LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NOT NOT_EQUAL OCT_INTEGER OR PERCENTW PLUS PLUS_ASSIGN PUT RANGEEX RANGEIN REDO RETURN RIGHTPAR RIGHT_COR SELF SPACE STRING SYMBOL TAB TO_F TO_I TRUE UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n     estructurasDatos : array\n                         | var_arreglo\n                         | acceder_arreglo\n                         | hash_declaration\n                         | hash_access\n                         | hash_operations\n    \n     estructurasControl : ifStatement\n                           | while_statement\n     value : var\n             | num\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n           | CONSTANT\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     var_arreglo : var\n                    | var ASSIGN array\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones COLON codigo\n                     | IF condiciones COLON codigo else_statement\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND\n                   | OR\n     condicion : num operComp num\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE COLON codigo\n     hash_declaration : HASH LEFT_COR values RIGHT_COR\n                         | HASH LEFT_COR RIGHT_COR\n     hash_access : var LEFT_COR value RIGHT_COR\n     hash_operations : hash_access ASSIGN value\n     variable_declaration : var ASSIGN value\n     store_conditional_result : var ASSIGN ifStatement\n     declare_data_structures : variable_declaration\n                                | array\n                                | hash_declaration\n     while_statement : WHILE condiciones COLON codigo\n     condition_with_connectors : condiciones conectores condiciones\n     method_call : var LEFTPAR values RIGHTPAR\n                    | var LEFTPAR RIGHTPAR\n     print_statement : PUT LEFTPAR values RIGHTPAR\n     boolean_expression : expression GREATER expression\n                           | expression LESS expression\n                           | expression GREATER_EQUAL expression\n                           | expression LESS_EQUAL expression\n                           | expression EQUAL expression\n                           | expression NOT_EQUAL expression\n                           | boolean_value  boolean_value : TRUE\n                      | FALSE  expression : INTEGER\n                   | FLOAT\n                   | variable\n                   | STRING  variable : LOCAL_VAR\n                 | INSTANCE_VAR\n                 | CLASS_VAR\n                 | GLOBAL_VAR\n                 | CONSTANT  declaraciones : variable_declaration\n                      | store_conditional_result\n                      | declare_data_structures\n     expresion : puts\n                 | gets\n                 | print_statement\n    '
    
_lr_action_items = {'PUT':([0,65,77,102,],[6,6,6,6,]),'GETS':([0,65,77,102,],[7,7,7,7,]),'HASH':([0,65,77,102,],[22,22,22,22,]),'IF':([0,65,77,102,],[23,23,23,23,]),'WHILE':([0,65,77,102,],[24,24,24,24,]),'LEFT_COR':([0,9,16,17,18,19,20,22,25,27,28,29,30,31,44,47,54,60,62,65,77,79,82,92,94,102,103,107,],[21,42,-33,-34,-35,-36,45,48,53,-22,-23,-24,-25,-26,21,-38,21,-46,-37,21,21,-40,-42,-39,-41,21,-43,-44,]),'PERCENTW':([0,44,65,77,102,],[25,25,25,25,25,]),'ARRAY':([0,44,65,77,102,],[26,26,26,26,26,]),'LOCAL_VAR':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[27,27,27,27,27,27,27,27,27,27,27,27,27,]),'INSTANCE_VAR':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[28,28,28,28,28,28,28,28,28,28,28,28,28,]),'CLASS_VAR':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[29,29,29,29,29,29,29,29,29,29,29,29,29,]),'GLOBAL_VAR':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[30,30,30,30,30,30,30,30,30,30,30,30,30,]),'CONSTANT':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[31,31,31,31,31,31,31,31,31,31,31,31,31,]),'$end':([1,2,3,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,27,28,29,30,31,32,33,34,35,36,37,38,39,40,47,57,59,60,62,64,79,82,83,85,86,87,88,91,92,94,96,97,98,103,105,107,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-33,-34,-35,-36,-45,-22,-23,-24,-25,-26,-32,-20,-13,-14,-15,-16,-17,-27,-28,-38,-31,-66,-46,-37,-64,-40,-42,-21,-47,-65,-63,-48,-72,-39,-41,-29,-30,-49,-43,-62,-44,]),'ELSE':([2,3,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,27,28,29,30,31,32,33,34,35,36,37,38,39,40,47,57,59,60,62,64,79,82,83,85,86,87,88,91,92,94,96,97,98,103,105,107,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-33,-34,-35,-36,-45,-22,-23,-24,-25,-26,-32,-20,-13,-14,-15,-16,-17,-27,-28,-38,-31,-66,-46,-37,-64,-40,-42,-21,-47,-65,-63,99,-72,-39,-41,-29,-30,-49,-43,-62,-44,]),'STRING':([6,21,43,45,48,53,56,93,104,],[36,36,36,36,36,36,36,36,36,]),'NIL':([6,21,43,45,48,53,56,93,104,],[37,37,37,37,37,37,37,37,37,]),'SYMBOL':([6,21,43,45,48,53,56,93,104,],[38,38,38,38,38,38,38,38,38,]),'FLOAT':([6,21,23,24,43,45,48,53,56,66,67,68,69,70,71,72,73,74,75,76,93,104,],[39,39,39,39,39,39,39,39,39,39,-52,-53,39,-55,-56,-57,-58,-59,-60,-61,39,39,]),'INTEGER':([6,21,23,24,42,43,45,48,53,56,66,67,68,69,70,71,72,73,74,75,76,93,95,104,],[40,40,40,40,58,40,40,40,40,40,40,-52,-53,40,-55,-56,-57,-58,-59,-60,-61,40,101,40,]),'DOT':([7,26,57,],[41,55,84,]),'ASSIGN':([12,20,27,28,29,30,31,86,],[43,44,-22,-23,-24,-25,-26,-65,]),'RIGHT_COR':([21,27,28,29,30,31,33,34,35,36,37,38,39,40,46,48,53,58,61,63,78,80,83,100,],[47,-22,-23,-24,-25,-26,-20,-13,-14,-15,-16,-17,-27,-28,62,64,79,85,86,87,92,-19,-21,-18,]),'LEFTPAR':([26,82,],[54,95,]),'COMMA':([27,28,29,30,31,33,34,35,36,37,38,39,40,101,],[-22,-23,-24,-25,-26,56,-13,-14,-15,-16,-17,-27,-28,104,]),'SPACE':([27,28,29,30,31,34,35,36,37,38,39,40,80,],[-22,-23,-24,-25,-26,-13,-14,-15,-16,-17,-27,-28,93,]),'RIGHTPAR':([27,28,29,30,31,33,34,35,36,37,38,39,40,47,62,81,83,101,106,],[-22,-23,-24,-25,-26,-20,-13,-14,-15,-16,-17,-27,-28,-38,-37,94,-21,103,107,]),'GREATER':([39,40,51,],[-27,-28,70,]),'LESS':([39,40,51,],[-27,-28,71,]),'GREATER_EQUAL':([39,40,51,],[-27,-28,72,]),'LESS_EQUAL':([39,40,51,],[-27,-28,73,]),'EQUAL':([39,40,51,],[-27,-28,74,]),'NOT_EQUAL':([39,40,51,],[-27,-28,75,]),'COMPARE':([39,40,51,],[-27,-28,76,]),'COLON':([39,40,49,50,52,89,90,99,],[-27,-28,65,-50,77,-51,-54,102,]),'AND':([39,40,49,50,52,89,90,],[-27,-28,67,-50,67,67,-54,]),'OR':([39,40,49,50,52,89,90,],[-27,-28,68,-50,68,68,-54,]),'CHOMP':([41,],[57,]),'NEW':([55,],[82,]),'TO_F':([84,],[96,]),'TO_I':([84,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,65,77,102,],[1,88,91,105,]),'puts':([0,65,77,102,],[2,2,2,2,]),'gets':([0,65,77,102,],[3,3,3,3,]),'estructurasDatos':([0,65,77,102,],[4,4,4,4,]),'estructurasControl':([0,65,77,102,],[5,5,5,5,]),'array':([0,44,65,77,102,],[8,60,8,8,8,]),'var_arreglo':([0,65,77,102,],[9,9,9,9,]),'acceder_arreglo':([0,65,77,102,],[10,10,10,10,]),'hash_declaration':([0,65,77,102,],[11,11,11,11,]),'hash_access':([0,65,77,102,],[12,12,12,12,]),'hash_operations':([0,65,77,102,],[13,13,13,13,]),'ifStatement':([0,65,77,102,],[14,14,14,14,]),'while_statement':([0,65,77,102,],[15,15,15,15,]),'array_explicito':([0,44,54,65,77,102,],[16,16,81,16,16,16,]),'array_implicito':([0,44,65,77,102,],[17,17,17,17,17,]),'array_creation':([0,44,65,77,102,],[18,18,18,18,18,]),'newArray':([0,44,65,77,102,],[19,19,19,19,19,]),'var':([0,6,21,43,45,48,53,56,65,77,93,102,104,],[20,34,34,34,34,34,34,34,20,20,34,20,34,]),'values':([6,21,48,56,104,],[32,46,63,83,106,]),'value':([6,21,43,45,48,53,56,93,104,],[33,33,59,61,33,80,33,80,33,]),'num':([6,21,23,24,43,45,48,53,56,66,69,93,104,],[35,35,51,51,35,35,35,35,35,51,90,35,35,]),'condiciones':([23,24,66,],[49,52,89,]),'condicion':([23,24,66,],[50,50,50,]),'conectores':([49,52,89,],[66,66,66,]),'operComp':([51,],[69,]),'values_space':([53,93,],[78,100,]),'else_statement':([88,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','sintax_analyzer.py',9),
  ('codigo -> gets','codigo',1,'p_codigo','sintax_analyzer.py',10),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','sintax_analyzer.py',11),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','sintax_analyzer.py',12),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',16),
  ('estructurasDatos -> var_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',17),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',18),
  ('estructurasDatos -> hash_declaration','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',19),
  ('estructurasDatos -> hash_access','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',20),
  ('estructurasDatos -> hash_operations','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',21),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',26),
  ('estructurasControl -> while_statement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',27),
  ('value -> var','value',1,'p_value','sintax_analyzer.py',32),
  ('value -> num','value',1,'p_value','sintax_analyzer.py',33),
  ('value -> STRING','value',1,'p_value','sintax_analyzer.py',34),
  ('value -> NIL','value',1,'p_value','sintax_analyzer.py',35),
  ('value -> SYMBOL','value',1,'p_value','sintax_analyzer.py',36),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','sintax_analyzer.py',40),
  ('values_space -> value','values_space',1,'p_values_space','sintax_analyzer.py',41),
  ('values -> value','values',1,'p_values','sintax_analyzer.py',45),
  ('values -> value COMMA values','values',3,'p_values','sintax_analyzer.py',46),
  ('var -> LOCAL_VAR','var',1,'p_var','sintax_analyzer.py',50),
  ('var -> INSTANCE_VAR','var',1,'p_var','sintax_analyzer.py',51),
  ('var -> CLASS_VAR','var',1,'p_var','sintax_analyzer.py',52),
  ('var -> GLOBAL_VAR','var',1,'p_var','sintax_analyzer.py',53),
  ('var -> CONSTANT','var',1,'p_var','sintax_analyzer.py',54),
  ('num -> FLOAT','num',1,'p_num','sintax_analyzer.py',58),
  ('num -> INTEGER','num',1,'p_num','sintax_analyzer.py',59),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','sintax_analyzer.py',63),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','sintax_analyzer.py',64),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','sintax_analyzer.py',65),
  ('puts -> PUT values','puts',2,'p_puts','sintax_analyzer.py',69),
  ('array -> array_explicito','array',1,'p_array','sintax_analyzer.py',78),
  ('array -> array_implicito','array',1,'p_array','sintax_analyzer.py',79),
  ('array -> array_creation','array',1,'p_array','sintax_analyzer.py',80),
  ('array -> newArray','array',1,'p_array','sintax_analyzer.py',81),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','sintax_analyzer.py',85),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','sintax_analyzer.py',86),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','sintax_analyzer.py',90),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','sintax_analyzer.py',91),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','sintax_analyzer.py',95),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','sintax_analyzer.py',99),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','sintax_analyzer.py',100),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','sintax_analyzer.py',101),
  ('var_arreglo -> var','var_arreglo',1,'p_var_arreglo','sintax_analyzer.py',105),
  ('var_arreglo -> var ASSIGN array','var_arreglo',3,'p_var_arreglo','sintax_analyzer.py',106),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','sintax_analyzer.py',110),
  ('ifStatement -> IF condiciones COLON codigo','ifStatement',4,'p_ifStatement','sintax_analyzer.py',115),
  ('ifStatement -> IF condiciones COLON codigo else_statement','ifStatement',5,'p_ifStatement','sintax_analyzer.py',116),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','sintax_analyzer.py',120),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','sintax_analyzer.py',121),
  ('conectores -> AND','conectores',1,'p_conectores','sintax_analyzer.py',125),
  ('conectores -> OR','conectores',1,'p_conectores','sintax_analyzer.py',126),
  ('condicion -> num operComp num','condicion',3,'p_condicion','sintax_analyzer.py',130),
  ('operComp -> GREATER','operComp',1,'p_operComp','sintax_analyzer.py',134),
  ('operComp -> LESS','operComp',1,'p_operComp','sintax_analyzer.py',135),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',136),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',137),
  ('operComp -> EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',138),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',139),
  ('operComp -> COMPARE','operComp',1,'p_operComp','sintax_analyzer.py',140),
  ('else_statement -> ELSE COLON codigo','else_statement',3,'p_else_statement','sintax_analyzer.py',144),
  ('hash_declaration -> HASH LEFT_COR values RIGHT_COR','hash_declaration',4,'p_hash_declaration','sintax_analyzer.py',150),
  ('hash_declaration -> HASH LEFT_COR RIGHT_COR','hash_declaration',3,'p_hash_declaration','sintax_analyzer.py',151),
  ('hash_access -> var LEFT_COR value RIGHT_COR','hash_access',4,'p_hash_access','sintax_analyzer.py',155),
  ('hash_operations -> hash_access ASSIGN value','hash_operations',3,'p_hash_operations','sintax_analyzer.py',159),
  ('variable_declaration -> var ASSIGN value','variable_declaration',3,'p_variable_declaration','sintax_analyzer.py',164),
  ('store_conditional_result -> var ASSIGN ifStatement','store_conditional_result',3,'p_store_conditional_result','sintax_analyzer.py',168),
  ('declare_data_structures -> variable_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',172),
  ('declare_data_structures -> array','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',173),
  ('declare_data_structures -> hash_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',174),
  ('while_statement -> WHILE condiciones COLON codigo','while_statement',4,'p_while_statement','sintax_analyzer.py',179),
  ('condition_with_connectors -> condiciones conectores condiciones','condition_with_connectors',3,'p_condition_with_connectors','sintax_analyzer.py',184),
  ('method_call -> var LEFTPAR values RIGHTPAR','method_call',4,'p_method_call','sintax_analyzer.py',189),
  ('method_call -> var LEFTPAR RIGHTPAR','method_call',3,'p_method_call','sintax_analyzer.py',190),
  ('print_statement -> PUT LEFTPAR values RIGHTPAR','print_statement',4,'p_print_statement','sintax_analyzer.py',194),
  ('boolean_expression -> expression GREATER expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',199),
  ('boolean_expression -> expression LESS expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',200),
  ('boolean_expression -> expression GREATER_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',201),
  ('boolean_expression -> expression LESS_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',202),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',203),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',204),
  ('boolean_expression -> boolean_value','boolean_expression',1,'p_boolean_expression','sintax_analyzer.py',205),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',209),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',210),
  ('expression -> INTEGER','expression',1,'p_expression','sintax_analyzer.py',214),
  ('expression -> FLOAT','expression',1,'p_expression','sintax_analyzer.py',215),
  ('expression -> variable','expression',1,'p_expression','sintax_analyzer.py',216),
  ('expression -> STRING','expression',1,'p_expression','sintax_analyzer.py',217),
  ('variable -> LOCAL_VAR','variable',1,'p_variable','sintax_analyzer.py',220),
  ('variable -> INSTANCE_VAR','variable',1,'p_variable','sintax_analyzer.py',221),
  ('variable -> CLASS_VAR','variable',1,'p_variable','sintax_analyzer.py',222),
  ('variable -> GLOBAL_VAR','variable',1,'p_variable','sintax_analyzer.py',223),
  ('variable -> CONSTANT','variable',1,'p_variable','sintax_analyzer.py',224),
  ('declaraciones -> variable_declaration','declaraciones',1,'p_declaraciones','sintax_analyzer.py',228),
  ('declaraciones -> store_conditional_result','declaraciones',1,'p_declaraciones','sintax_analyzer.py',229),
  ('declaraciones -> declare_data_structures','declaraciones',1,'p_declaraciones','sintax_analyzer.py',230),
  ('expresion -> puts','expresion',1,'p_expresion','sintax_analyzer.py',235),
  ('expresion -> gets','expresion',1,'p_expresion','sintax_analyzer.py',236),
  ('expresion -> print_statement','expresion',1,'p_expresion','sintax_analyzer.py',237),
]
