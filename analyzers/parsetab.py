
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BOOLEAN BREAK CALL CARET CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END EQUAL EXPONENT EXPONENT_ASSIGN FALSE FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH HEX_INTEGER IF IN INSTANCE_VAR INTEGER LBRACE LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NOT NOT_EQUAL OCT_INTEGER OR PERCENTW PIPE PLUS PLUS_ASSIGN PROC PUT RANGEEX RANGEIN RBRACE REDO RETURN RIGHTPAR RIGHT_COR SELF SET SPACE STRING SYMBOL TAB THEN TO_F TO_I TRUE UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n               | method_call\n               | block_assignment\n               | proc_assignment\n               | proc_call\n               | declaraciones\n     estructurasDatos : array\n                         | var_arreglo\n                         | acceder_arreglo\n                         | hash_declaration\n                         | hash_access\n                         | hash_operations\n                         | set_expression\n                         | set_operations\n     estructurasControl : ifStatement\n                           | while_statement\n                           | unless_expression\n     value : var\n             | num\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n           | CONSTANT\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     var_arreglo : var\n                    | var ASSIGN array\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones COLON codigo\n                     | IF condiciones COLON codigo else_statement\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND\n                   | OR\n     condicion : num operComp num\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE COLON codigo\n     hash_declaration : HASH LEFT_COR values RIGHT_COR\n                         | HASH LEFT_COR RIGHT_COR\n     hash_access : var LEFT_COR value RIGHT_COR\n     hash_operations : hash_access ASSIGN value\n     variable_declaration : var ASSIGN value\n     store_conditional_result : var ASSIGN ifStatement\n     declare_data_structures : variable_declaration\n                                | array\n                                | hash_declaration\n     while_statement : WHILE condiciones COLON codigo\n     condition_with_connectors : condiciones conectores condiciones\n     method_call : var LEFTPAR values RIGHTPAR\n                    | var LEFTPAR RIGHTPAR\n     print_statement : PUT LEFTPAR values RIGHTPAR\n     boolean_expression : expression GREATER expression\n                           | expression LESS expression\n                           | expression GREATER_EQUAL expression\n                           | expression LESS_EQUAL expression\n                           | expression EQUAL expression\n                           | expression NOT_EQUAL expression\n                           | boolean_value  boolean_value : TRUE\n                      | FALSE  expression : INTEGER\n                   | FLOAT\n                   | variable\n                   | STRING  variable : LOCAL_VAR\n                 | INSTANCE_VAR\n                 | CLASS_VAR\n                 | GLOBAL_VAR\n                 | CONSTANT  declaraciones : variable_declaration\n                      | store_conditional_result\n                      | declare_data_structures\n     expresion : puts\n                 | gets\n                 | print_statement\n    set_expression : SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR\n                      | SET LEFT_COR values RIGHT_CORset_operations : set_expression\n                      | set_operations set_binary_operators set_expressiondeclare_data_structures : LOCAL_VAR ASSIGN set_expressionset_binary_operators : PLUS\n                            | MINUS\n                            | AMPERSAND\n                            | PIPE\n                            | CARETunless_expression : UNLESS boolean_expression THEN expresion END\n                         | UNLESS boolean_expression THEN expresion ELSE expresion ENDexpresion : arithmetic_productionarithmetic_production : num\n                             | arithmetic_production arithmetic_operators numarithmetic_operators : PLUS\n                            | MINUS\n                            | MULTIPLY\n                            | DIVIDE\n                            | MODULO\n                            | EXPONENTblock_expression : LBRACE expresion RBRACE\n                         | DO expresion END\n                         | LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE\n                         | DO PIPE LOCAL_VAR PIPE expresion ENDblock_assignment : method_call block_expressionproc_expression : PROC DOT NEW block_expressionproc_assignment : LOCAL_VAR ASSIGN proc_expressionproc_call : LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR DOT LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR LEFT_COR values RIGHT_CORexpresion : condition_with_connectors'
    
_lr_action_items = {'PUT':([0,46,47,133,145,146,198,202,212,221,],[11,106,106,11,11,106,106,106,106,11,]),'GETS':([0,46,47,133,145,146,198,202,212,221,],[12,12,12,12,12,12,12,12,12,12,]),'LOCAL_VAR':([0,11,26,38,60,67,68,69,72,75,77,96,100,106,110,111,126,133,145,147,148,149,150,151,152,167,177,195,208,221,224,],[25,55,55,91,55,55,55,55,55,55,55,55,159,55,170,55,55,25,25,91,91,91,91,91,91,55,55,55,55,25,55,]),'HASH':([0,133,145,221,],[34,34,34,34,]),'SET':([0,61,62,63,64,65,66,70,133,145,221,],[35,35,-114,-115,-116,-117,-118,35,35,35,35,]),'IF':([0,68,133,145,221,],[36,36,36,36,36,]),'WHILE':([0,133,145,221,],[37,37,37,37,]),'UNLESS':([0,133,145,221,],[38,38,38,38,]),'INSTANCE_VAR':([0,11,26,38,60,67,68,69,72,75,77,96,106,111,126,133,145,147,148,149,150,151,152,167,177,195,208,221,224,],[39,39,39,92,39,39,39,39,39,39,39,39,39,39,39,39,39,92,92,92,92,92,92,39,39,39,39,39,39,]),'CLASS_VAR':([0,11,26,38,60,67,68,69,72,75,77,96,106,111,126,133,145,147,148,149,150,151,152,167,177,195,208,221,224,],[40,40,40,93,40,40,40,40,40,40,40,40,40,40,40,40,40,93,93,93,93,93,93,40,40,40,40,40,40,]),'GLOBAL_VAR':([0,11,26,38,60,67,68,69,72,75,77,96,106,111,126,133,145,147,148,149,150,151,152,167,177,195,208,221,224,],[41,41,41,94,41,41,41,41,41,41,41,41,41,41,41,41,41,94,94,94,94,94,94,41,41,41,41,41,41,]),'CONSTANT':([0,11,26,38,60,67,68,69,72,75,77,96,106,111,126,133,145,147,148,149,150,151,152,167,177,195,208,221,224,],[42,42,42,95,42,42,42,42,42,42,42,42,42,42,42,42,42,95,95,95,95,95,95,42,42,42,42,42,42,]),'LEFT_COR':([0,14,24,25,30,31,32,33,34,35,39,40,41,42,43,68,74,97,118,128,133,145,154,157,181,194,196,221,223,232,],[26,59,69,72,-41,-42,-43,-44,75,77,-31,-32,-33,-34,96,26,-46,26,-54,-45,26,26,-48,-50,208,-47,-49,26,-51,-52,]),'PERCENTW':([0,68,133,145,221,],[43,43,43,43,43,]),'ARRAY':([0,68,133,145,221,],[44,44,44,44,44,]),'$end':([1,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,39,40,41,42,45,48,49,50,51,52,53,54,55,56,57,74,112,114,115,117,118,119,120,122,123,128,130,154,157,158,169,171,173,174,175,179,180,182,183,186,194,196,203,204,207,209,211,218,219,223,225,226,228,229,231,232,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-53,-30,-77,-104,-105,-41,-42,-43,-44,-31,-32,-33,-34,-134,-40,-28,-21,-22,-23,-24,-25,-30,-35,-36,-46,-39,-74,-112,-83,-54,-75,-76,-136,-113,-45,-72,-48,-50,-130,-131,-29,-55,-82,-73,-139,-71,-110,-56,-80,-47,-49,-37,-38,-138,-57,-119,-135,-137,-51,-132,-133,-70,-120,-109,-52,]),'ELSE':([2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,39,40,41,42,45,48,49,50,51,52,53,54,55,56,57,74,79,101,102,103,104,105,107,112,114,115,117,118,119,120,122,123,128,130,154,157,158,169,171,173,174,175,179,180,182,183,184,185,186,187,194,196,199,201,203,204,207,209,211,216,218,219,223,225,226,228,229,231,232,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-53,-30,-77,-104,-105,-41,-42,-43,-44,-31,-32,-33,-34,-134,-40,-28,-21,-22,-23,-24,-25,-30,-35,-36,-46,-58,-106,-107,-108,-121,-140,-122,-39,-74,-112,-83,-54,-75,-76,-136,-113,-45,-72,-48,-50,-130,-131,-29,-55,-82,-73,-139,-71,-110,210,-59,-62,-80,212,-47,-49,-123,-81,-37,-38,-138,-57,-119,-84,-135,-137,-51,-132,-133,-70,-120,-109,-52,]),'LBRACE':([6,117,174,205,],[46,-83,-82,46,]),'DO':([6,117,174,205,],[47,-83,-82,47,]),'STRING':([11,26,38,60,67,68,69,72,75,77,96,106,111,126,147,148,149,150,151,152,167,177,195,208,224,],[52,52,88,52,52,52,52,52,52,52,52,52,52,52,88,88,88,88,88,88,52,52,52,52,52,]),'NIL':([11,26,60,67,68,69,72,75,77,96,106,111,126,167,177,195,208,224,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'SYMBOL':([11,26,60,67,68,69,72,75,77,96,106,111,126,167,177,195,208,224,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FLOAT':([11,26,36,37,38,46,47,60,67,68,69,72,75,77,96,106,111,126,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,151,152,160,161,162,163,164,165,166,167,168,177,195,198,202,208,212,224,],[56,56,56,56,86,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-60,-61,56,-63,-64,-65,-66,-67,-68,-69,56,86,86,86,86,86,86,56,-124,-125,-126,-127,-128,-129,56,56,56,56,56,56,56,56,56,]),'INTEGER':([11,26,36,37,38,46,47,59,60,67,68,69,72,75,77,96,106,111,126,134,135,136,137,138,139,140,141,142,143,144,146,147,148,149,150,151,152,160,161,162,163,164,165,166,167,168,177,195,197,198,202,208,212,224,],[57,57,57,57,85,57,57,113,57,57,57,57,57,57,57,57,57,57,57,57,-60,-61,57,-63,-64,-65,-66,-67,-68,-69,57,85,85,85,85,85,85,57,-124,-125,-126,-127,-128,-129,57,57,57,57,214,57,57,57,57,57,]),'DOT':([12,25,35,44,112,124,],[58,71,76,98,172,176,]),'ASSIGN':([17,24,25,39,40,41,42,175,],[60,68,70,-31,-32,-33,-34,-73,]),'PLUS':([19,20,56,57,104,107,115,182,199,231,],[-111,62,-35,-36,161,-122,-112,-110,-123,-109,]),'MINUS':([19,20,56,57,104,107,115,182,199,231,],[-111,63,-35,-36,162,-122,-112,-110,-123,-109,]),'AMPERSAND':([19,20,115,182,231,],[-111,64,-112,-110,-109,]),'PIPE':([19,20,46,47,115,159,170,182,231,],[-111,65,100,110,-112,198,202,-110,-109,]),'CARET':([19,20,115,182,231,],[-111,66,-112,-110,-109,]),'LEFTPAR':([24,25,39,40,41,42,44,71,106,125,131,157,],[67,-30,-31,-32,-33,-34,97,126,167,177,181,197,]),'RIGHT_COR':([26,39,40,41,42,49,50,51,52,53,54,55,56,57,73,75,96,113,121,127,129,132,153,155,171,213,220,],[74,-31,-32,-33,-34,-28,-21,-22,-23,-24,-25,-30,-35,-36,128,130,154,173,175,179,180,182,194,-27,-29,-26,227,]),'TRUE':([38,],[89,]),'FALSE':([38,],[90,]),'COMMA':([39,40,41,42,49,50,51,52,53,54,55,56,57,214,],[-31,-32,-33,-34,111,-21,-22,-23,-24,-25,-30,-35,-36,224,]),'RIGHTPAR':([39,40,41,42,49,50,51,52,53,54,55,56,57,67,74,116,128,156,171,178,200,206,214,227,230,],[-31,-32,-33,-34,-28,-21,-22,-23,-24,-25,-30,-35,-36,117,-46,174,-45,196,-29,207,216,219,223,231,232,]),'SPACE':([39,40,41,42,50,51,52,53,54,55,56,57,155,],[-31,-32,-33,-34,-21,-22,-23,-24,-25,-30,-35,-36,195,]),'RBRACE':([39,40,41,42,48,49,50,51,52,53,54,55,56,57,79,99,101,102,103,104,105,107,112,171,184,185,199,201,203,204,215,216,],[-31,-32,-33,-34,-40,-28,-21,-22,-23,-24,-25,-30,-35,-36,-58,158,-106,-107,-108,-121,-140,-122,-39,-29,-59,-62,-123,-81,-37,-38,225,-84,]),'END':([39,40,41,42,48,49,50,51,52,53,54,55,56,57,79,101,102,103,104,105,107,109,112,171,184,185,187,199,201,203,204,216,217,222,],[-31,-32,-33,-34,-40,-28,-21,-22,-23,-24,-25,-30,-35,-36,-58,-106,-107,-108,-121,-140,-122,169,-39,-29,-59,-62,211,-123,-81,-37,-38,-84,226,229,]),'GREATER':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,138,147,-94,-95,-96,-97,-98,-99,-100,-101,-102,138,]),'LESS':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,139,148,-94,-95,-96,-97,-98,-99,-100,-101,-102,139,]),'GREATER_EQUAL':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,140,149,-94,-95,-96,-97,-98,-99,-100,-101,-102,140,]),'LESS_EQUAL':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,141,150,-94,-95,-96,-97,-98,-99,-100,-101,-102,141,]),'EQUAL':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,142,151,-94,-95,-96,-97,-98,-99,-100,-101,-102,142,]),'NOT_EQUAL':([56,57,80,83,85,86,87,88,91,92,93,94,95,107,],[-35,-36,143,152,-94,-95,-96,-97,-98,-99,-100,-101,-102,143,]),'COMPARE':([56,57,80,107,],[-35,-36,144,144,]),'MULTIPLY':([56,57,104,107,199,],[-35,-36,163,-122,-123,]),'DIVIDE':([56,57,104,107,199,],[-35,-36,164,-122,-123,]),'MODULO':([56,57,104,107,199,],[-35,-36,165,-122,-123,]),'EXPONENT':([56,57,104,107,199,],[-35,-36,166,-122,-123,]),'COLON':([56,57,78,79,81,184,185,210,],[-35,-36,133,-58,145,-59,-62,221,]),'AND':([56,57,78,79,81,108,184,185,201,],[-35,-36,135,-58,135,135,135,-62,135,]),'OR':([56,57,78,79,81,108,184,185,201,],[-35,-36,136,-58,136,136,136,-62,136,]),'CHOMP':([58,],[112,]),'PROC':([70,],[124,]),'CALL':([71,],[125,]),'NEW':([76,98,176,],[131,157,205,]),'THEN':([82,84,85,86,87,88,89,90,91,92,93,94,95,188,189,190,191,192,193,],[146,-91,-94,-95,-96,-97,-92,-93,-98,-99,-100,-101,-102,-85,-86,-87,-88,-89,-90,]),'TO_F':([172,],[203,]),'TO_I':([172,],[204,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,133,145,221,],[1,183,186,228,]),'puts':([0,46,47,133,145,146,198,202,212,221,],[2,101,101,2,2,101,101,101,101,2,]),'gets':([0,46,47,133,145,146,198,202,212,221,],[3,102,102,3,3,102,102,102,102,3,]),'estructurasDatos':([0,133,145,221,],[4,4,4,4,]),'estructurasControl':([0,133,145,221,],[5,5,5,5,]),'method_call':([0,133,145,221,],[6,6,6,6,]),'block_assignment':([0,133,145,221,],[7,7,7,7,]),'proc_assignment':([0,133,145,221,],[8,8,8,8,]),'proc_call':([0,133,145,221,],[9,9,9,9,]),'declaraciones':([0,133,145,221,],[10,10,10,10,]),'array':([0,68,133,145,221,],[13,118,13,13,13,]),'var_arreglo':([0,133,145,221,],[14,14,14,14,]),'acceder_arreglo':([0,133,145,221,],[15,15,15,15,]),'hash_declaration':([0,133,145,221,],[16,16,16,16,]),'hash_access':([0,133,145,221,],[17,17,17,17,]),'hash_operations':([0,133,145,221,],[18,18,18,18,]),'set_expression':([0,61,70,133,145,221,],[19,115,123,19,19,19,]),'set_operations':([0,133,145,221,],[20,20,20,20,]),'ifStatement':([0,68,133,145,221,],[21,120,21,21,21,]),'while_statement':([0,133,145,221,],[22,22,22,22,]),'unless_expression':([0,133,145,221,],[23,23,23,23,]),'var':([0,11,26,60,67,68,69,72,75,77,96,106,111,126,133,145,167,177,195,208,221,224,],[24,50,50,50,50,50,50,50,50,50,50,50,50,50,24,24,50,50,50,50,24,50,]),'variable_declaration':([0,133,145,221,],[27,27,27,27,]),'store_conditional_result':([0,133,145,221,],[28,28,28,28,]),'declare_data_structures':([0,133,145,221,],[29,29,29,29,]),'array_explicito':([0,68,97,133,145,221,],[30,30,156,30,30,30,]),'array_implicito':([0,68,133,145,221,],[31,31,31,31,31,]),'array_creation':([0,68,133,145,221,],[32,32,32,32,32,]),'newArray':([0,68,133,145,221,],[33,33,33,33,33,]),'block_expression':([6,205,],[45,218,]),'values':([11,26,67,72,75,77,106,111,126,167,177,208,224,],[48,73,116,127,129,132,48,171,178,200,206,220,230,]),'value':([11,26,60,67,68,69,72,75,77,96,106,111,126,167,177,195,208,224,],[49,49,114,49,119,121,49,49,49,155,49,49,49,49,49,155,49,49,]),'num':([11,26,36,37,46,47,60,67,68,69,72,75,77,96,106,111,126,134,137,146,160,167,168,177,195,198,202,208,212,224,],[51,51,80,80,107,107,51,51,51,51,51,51,51,51,51,51,51,80,185,107,199,51,80,51,51,107,107,51,107,51,]),'set_binary_operators':([20,],[61,]),'condiciones':([36,37,46,47,134,146,168,198,202,212,],[78,81,108,108,184,108,201,108,108,108,]),'condicion':([36,37,46,47,134,146,168,198,202,212,],[79,79,79,79,79,79,79,79,79,79,]),'boolean_expression':([38,],[82,]),'expression':([38,147,148,149,150,151,152,],[83,188,189,190,191,192,193,]),'boolean_value':([38,],[84,]),'variable':([38,147,148,149,150,151,152,],[87,87,87,87,87,87,87,]),'expresion':([46,47,146,198,202,212,],[99,109,187,215,217,222,]),'print_statement':([46,47,146,198,202,212,],[103,103,103,103,103,103,]),'arithmetic_production':([46,47,146,198,202,212,],[104,104,104,104,104,104,]),'condition_with_connectors':([46,47,146,198,202,212,],[105,105,105,105,105,105,]),'proc_expression':([70,],[122,]),'conectores':([78,81,108,184,201,],[134,134,168,134,134,]),'operComp':([80,107,],[137,137,]),'values_space':([96,195,],[153,213,]),'arithmetic_operators':([104,],[160,]),'else_statement':([183,],[209,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','sintax_analyzer.py',9),
  ('codigo -> gets','codigo',1,'p_codigo','sintax_analyzer.py',10),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','sintax_analyzer.py',11),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','sintax_analyzer.py',12),
  ('codigo -> method_call','codigo',1,'p_codigo','sintax_analyzer.py',13),
  ('codigo -> block_assignment','codigo',1,'p_codigo','sintax_analyzer.py',14),
  ('codigo -> proc_assignment','codigo',1,'p_codigo','sintax_analyzer.py',15),
  ('codigo -> proc_call','codigo',1,'p_codigo','sintax_analyzer.py',16),
  ('codigo -> declaraciones','codigo',1,'p_codigo','sintax_analyzer.py',17),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',21),
  ('estructurasDatos -> var_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',22),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',23),
  ('estructurasDatos -> hash_declaration','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',24),
  ('estructurasDatos -> hash_access','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',25),
  ('estructurasDatos -> hash_operations','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',26),
  ('estructurasDatos -> set_expression','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',27),
  ('estructurasDatos -> set_operations','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',28),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',32),
  ('estructurasControl -> while_statement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',33),
  ('estructurasControl -> unless_expression','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',34),
  ('value -> var','value',1,'p_value','sintax_analyzer.py',39),
  ('value -> num','value',1,'p_value','sintax_analyzer.py',40),
  ('value -> STRING','value',1,'p_value','sintax_analyzer.py',41),
  ('value -> NIL','value',1,'p_value','sintax_analyzer.py',42),
  ('value -> SYMBOL','value',1,'p_value','sintax_analyzer.py',43),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','sintax_analyzer.py',47),
  ('values_space -> value','values_space',1,'p_values_space','sintax_analyzer.py',48),
  ('values -> value','values',1,'p_values','sintax_analyzer.py',52),
  ('values -> value COMMA values','values',3,'p_values','sintax_analyzer.py',53),
  ('var -> LOCAL_VAR','var',1,'p_var','sintax_analyzer.py',57),
  ('var -> INSTANCE_VAR','var',1,'p_var','sintax_analyzer.py',58),
  ('var -> CLASS_VAR','var',1,'p_var','sintax_analyzer.py',59),
  ('var -> GLOBAL_VAR','var',1,'p_var','sintax_analyzer.py',60),
  ('var -> CONSTANT','var',1,'p_var','sintax_analyzer.py',61),
  ('num -> FLOAT','num',1,'p_num','sintax_analyzer.py',65),
  ('num -> INTEGER','num',1,'p_num','sintax_analyzer.py',66),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','sintax_analyzer.py',70),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','sintax_analyzer.py',71),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','sintax_analyzer.py',72),
  ('puts -> PUT values','puts',2,'p_puts','sintax_analyzer.py',76),
  ('array -> array_explicito','array',1,'p_array','sintax_analyzer.py',85),
  ('array -> array_implicito','array',1,'p_array','sintax_analyzer.py',86),
  ('array -> array_creation','array',1,'p_array','sintax_analyzer.py',87),
  ('array -> newArray','array',1,'p_array','sintax_analyzer.py',88),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','sintax_analyzer.py',92),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','sintax_analyzer.py',93),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','sintax_analyzer.py',97),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','sintax_analyzer.py',98),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','sintax_analyzer.py',102),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','sintax_analyzer.py',106),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','sintax_analyzer.py',107),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','sintax_analyzer.py',108),
  ('var_arreglo -> var','var_arreglo',1,'p_var_arreglo','sintax_analyzer.py',112),
  ('var_arreglo -> var ASSIGN array','var_arreglo',3,'p_var_arreglo','sintax_analyzer.py',113),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','sintax_analyzer.py',117),
  ('ifStatement -> IF condiciones COLON codigo','ifStatement',4,'p_ifStatement','sintax_analyzer.py',122),
  ('ifStatement -> IF condiciones COLON codigo else_statement','ifStatement',5,'p_ifStatement','sintax_analyzer.py',123),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','sintax_analyzer.py',127),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','sintax_analyzer.py',128),
  ('conectores -> AND','conectores',1,'p_conectores','sintax_analyzer.py',132),
  ('conectores -> OR','conectores',1,'p_conectores','sintax_analyzer.py',133),
  ('condicion -> num operComp num','condicion',3,'p_condicion','sintax_analyzer.py',137),
  ('operComp -> GREATER','operComp',1,'p_operComp','sintax_analyzer.py',141),
  ('operComp -> LESS','operComp',1,'p_operComp','sintax_analyzer.py',142),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',143),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',144),
  ('operComp -> EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',145),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',146),
  ('operComp -> COMPARE','operComp',1,'p_operComp','sintax_analyzer.py',147),
  ('else_statement -> ELSE COLON codigo','else_statement',3,'p_else_statement','sintax_analyzer.py',151),
  ('hash_declaration -> HASH LEFT_COR values RIGHT_COR','hash_declaration',4,'p_hash_declaration','sintax_analyzer.py',157),
  ('hash_declaration -> HASH LEFT_COR RIGHT_COR','hash_declaration',3,'p_hash_declaration','sintax_analyzer.py',158),
  ('hash_access -> var LEFT_COR value RIGHT_COR','hash_access',4,'p_hash_access','sintax_analyzer.py',162),
  ('hash_operations -> hash_access ASSIGN value','hash_operations',3,'p_hash_operations','sintax_analyzer.py',166),
  ('variable_declaration -> var ASSIGN value','variable_declaration',3,'p_variable_declaration','sintax_analyzer.py',171),
  ('store_conditional_result -> var ASSIGN ifStatement','store_conditional_result',3,'p_store_conditional_result','sintax_analyzer.py',175),
  ('declare_data_structures -> variable_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',179),
  ('declare_data_structures -> array','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',180),
  ('declare_data_structures -> hash_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',181),
  ('while_statement -> WHILE condiciones COLON codigo','while_statement',4,'p_while_statement','sintax_analyzer.py',186),
  ('condition_with_connectors -> condiciones conectores condiciones','condition_with_connectors',3,'p_condition_with_connectors','sintax_analyzer.py',191),
  ('method_call -> var LEFTPAR values RIGHTPAR','method_call',4,'p_method_call','sintax_analyzer.py',196),
  ('method_call -> var LEFTPAR RIGHTPAR','method_call',3,'p_method_call','sintax_analyzer.py',197),
  ('print_statement -> PUT LEFTPAR values RIGHTPAR','print_statement',4,'p_print_statement','sintax_analyzer.py',201),
  ('boolean_expression -> expression GREATER expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',206),
  ('boolean_expression -> expression LESS expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',207),
  ('boolean_expression -> expression GREATER_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',208),
  ('boolean_expression -> expression LESS_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',209),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',210),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',211),
  ('boolean_expression -> boolean_value','boolean_expression',1,'p_boolean_expression','sintax_analyzer.py',212),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',216),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',217),
  ('expression -> INTEGER','expression',1,'p_expression','sintax_analyzer.py',221),
  ('expression -> FLOAT','expression',1,'p_expression','sintax_analyzer.py',222),
  ('expression -> variable','expression',1,'p_expression','sintax_analyzer.py',223),
  ('expression -> STRING','expression',1,'p_expression','sintax_analyzer.py',224),
  ('variable -> LOCAL_VAR','variable',1,'p_variable','sintax_analyzer.py',227),
  ('variable -> INSTANCE_VAR','variable',1,'p_variable','sintax_analyzer.py',228),
  ('variable -> CLASS_VAR','variable',1,'p_variable','sintax_analyzer.py',229),
  ('variable -> GLOBAL_VAR','variable',1,'p_variable','sintax_analyzer.py',230),
  ('variable -> CONSTANT','variable',1,'p_variable','sintax_analyzer.py',231),
  ('declaraciones -> variable_declaration','declaraciones',1,'p_declaraciones','sintax_analyzer.py',235),
  ('declaraciones -> store_conditional_result','declaraciones',1,'p_declaraciones','sintax_analyzer.py',236),
  ('declaraciones -> declare_data_structures','declaraciones',1,'p_declaraciones','sintax_analyzer.py',237),
  ('expresion -> puts','expresion',1,'p_expresion','sintax_analyzer.py',242),
  ('expresion -> gets','expresion',1,'p_expresion','sintax_analyzer.py',243),
  ('expresion -> print_statement','expresion',1,'p_expresion','sintax_analyzer.py',244),
  ('set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR','set_expression',8,'p_set_expression','sintax_analyzer.py',249),
  ('set_expression -> SET LEFT_COR values RIGHT_COR','set_expression',4,'p_set_expression','sintax_analyzer.py',250),
  ('set_operations -> set_expression','set_operations',1,'p_set_operations','sintax_analyzer.py',253),
  ('set_operations -> set_operations set_binary_operators set_expression','set_operations',3,'p_set_operations','sintax_analyzer.py',254),
  ('declare_data_structures -> LOCAL_VAR ASSIGN set_expression','declare_data_structures',3,'p_set_declaration','sintax_analyzer.py',257),
  ('set_binary_operators -> PLUS','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',260),
  ('set_binary_operators -> MINUS','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',261),
  ('set_binary_operators -> AMPERSAND','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',262),
  ('set_binary_operators -> PIPE','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',263),
  ('set_binary_operators -> CARET','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',264),
  ('unless_expression -> UNLESS boolean_expression THEN expresion END','unless_expression',5,'p_unless_expression','sintax_analyzer.py',267),
  ('unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END','unless_expression',7,'p_unless_expression','sintax_analyzer.py',268),
  ('expresion -> arithmetic_production','expresion',1,'p_arithmetic_expression','sintax_analyzer.py',271),
  ('arithmetic_production -> num','arithmetic_production',1,'p_arithmetic_production','sintax_analyzer.py',274),
  ('arithmetic_production -> arithmetic_production arithmetic_operators num','arithmetic_production',3,'p_arithmetic_production','sintax_analyzer.py',275),
  ('arithmetic_operators -> PLUS','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',278),
  ('arithmetic_operators -> MINUS','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',279),
  ('arithmetic_operators -> MULTIPLY','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',280),
  ('arithmetic_operators -> DIVIDE','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',281),
  ('arithmetic_operators -> MODULO','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',282),
  ('arithmetic_operators -> EXPONENT','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',283),
  ('block_expression -> LBRACE expresion RBRACE','block_expression',3,'p_block_expression','sintax_analyzer.py',286),
  ('block_expression -> DO expresion END','block_expression',3,'p_block_expression','sintax_analyzer.py',287),
  ('block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE','block_expression',6,'p_block_expression','sintax_analyzer.py',288),
  ('block_expression -> DO PIPE LOCAL_VAR PIPE expresion END','block_expression',6,'p_block_expression','sintax_analyzer.py',289),
  ('block_assignment -> method_call block_expression','block_assignment',2,'p_block_assignment','sintax_analyzer.py',292),
  ('proc_expression -> PROC DOT NEW block_expression','proc_expression',4,'p_proc_expression','sintax_analyzer.py',295),
  ('proc_assignment -> LOCAL_VAR ASSIGN proc_expression','proc_assignment',3,'p_proc_assignment','sintax_analyzer.py',298),
  ('proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR','proc_call',6,'p_proc_call','sintax_analyzer.py',301),
  ('proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR','proc_call',5,'p_proc_call','sintax_analyzer.py',302),
  ('proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR','proc_call',4,'p_proc_call','sintax_analyzer.py',303),
  ('expresion -> condition_with_connectors','expresion',1,'p_condition_expr','sintax_analyzer.py',306),
]
