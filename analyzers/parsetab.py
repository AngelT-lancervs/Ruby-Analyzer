
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_RESERVED ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BOOLEAN BREAK CALL CARET CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END END_LOWER EQUAL EXPONENT EXPONENT_ASSIGN FALSE FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH HEX_INTEGER IF IN INSTANCE_VAR INTEGER LBRACE LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NOT NOT_EQUAL OCT_INTEGER OR OR_RESERVED PERCENTW PIPE PLUS PLUS_ASSIGN PROC PUT RANGEEX RANGEIN RBRACE REDO RETURN RIGHTPAR RIGHT_COR SELF SET SPACE STRING SYMBOL TAB THEN TO_F TO_I TO_S TRUE UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n               | method_call\n               | block_assignment\n               | proc_assignment\n               | proc_call\n               | declaraciones\n               | expression\n               | to_string\n     estructurasDatos : array\n                         | acceder_arreglo\n                         | hash_declaration\n                         | hash_access\n                         | hash_operations\n                         | set_expression\n                         | set_operations\n     estructurasControl : ifStatement\n                           | while_statement\n                           | unless_expression\n     value : num\n             | var\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     var_arreglo : LOCAL_VAR ASSIGN array\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones NEWLINE codigo END_LOWER\n                     | IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND\n                   | OR\n                   | AND_RESERVED\n                   | OR_RESERVED\n     condicion : num operComp num\n                  | var operComp num\n                  | num operComp var\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE NEWLINE codigo\n     to_string : LOCAL_VAR DOT TO_S\n     concatenar_string : STRING PLUS STRING\n                          | STRING PLUS LOCAL_VAR\n                          | LOCAL_VAR PLUS STRING\n                          | LOCAL_VAR PLUS LOCAL_VAR\n     declaracion_concatenar_string : LOCAL_VAR ASSIGN concatenar_string\n     hash_declaration : HASH LEFT_COR values RIGHT_COR\n                         | HASH LEFT_COR RIGHT_COR\n     hash_access : var LEFT_COR value RIGHT_COR\n     hash_operations : hash_access ASSIGN value\n     variable_declaration : LOCAL_VAR ASSIGN value\n     store_conditional_result : LOCAL_VAR ASSIGN condiciones\n     declare_data_structures : var_arreglo\n                                | hash_declaration\n     while_statement : WHILE condiciones COLON codigo\n     condition_with_connectors : condiciones conectores condiciones\n     method_call : var LEFTPAR values RIGHTPAR\n                    | var LEFTPAR RIGHTPAR\n     print_statement : PUT LEFTPAR values RIGHTPAR\n     boolean_expression : expression GREATER expression\n                           | expression LESS expression\n                           | expression GREATER_EQUAL expression\n                           | expression LESS_EQUAL expression\n                           | expression EQUAL expression\n                           | expression NOT_EQUAL expression\n                           | boolean_value  boolean_value : TRUE\n                      | FALSE  expression : INTEGER\n                   | FLOAT\n                   | variable\n                   | STRING  variable : LOCAL_VAR\n                 | INSTANCE_VAR\n                 | CLASS_VAR\n                 | GLOBAL_VAR\n                 | CONSTANT  declaraciones : variable_declaration\n                      | store_conditional_result\n                      | declare_data_structures\n                      | var_arreglo\n                      | LOCAL_VAR ASSIGN arithmetic_production\n                      | declaracion_concatenar_string\n     expresion : puts\n                 | gets\n                 | print_statement\n    set_expression : SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR\n                      | SET LEFT_COR values RIGHT_CORset_operations : set_expression\n                      | set_operations set_binary_operators set_expressiondeclare_data_structures : LOCAL_VAR ASSIGN set_expressionset_binary_operators : PLUS\n                            | MINUS\n                            | AMPERSAND\n                            | PIPE\n                            | CARETunless_expression : UNLESS boolean_expression THEN expresion END\n                         | UNLESS boolean_expression THEN expresion ELSE expresion ENDarithmetic_production : num\n                             | LOCAL_VAR\n                             | num arithmetic_operators arithmetic_production\n                             | LOCAL_VAR arithmetic_operators arithmetic_productionarithmetic_operators : PLUS\n                            | MINUS\n                            | MULTIPLY\n                            | DIVIDE\n                            | MODULO\n                            | EXPONENTblock_expression : LBRACE expresion RBRACE\n                         | DO expresion END\n                         | LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE\n                         | DO PIPE LOCAL_VAR PIPE expresion ENDblock_assignment : method_call block_expressionproc_expression : PROC DOT NEW block_expressionproc_assignment : LOCAL_VAR ASSIGN proc_expressionproc_call : LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR DOT LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR LEFT_COR values RIGHT_CORexpresion : condition_with_connectors'
    
_lr_action_items = {'PUT':([0,53,54,143,158,159,216,219,237,255,],[13,110,110,13,13,110,110,110,110,13,]),'GETS':([0,53,54,143,158,159,216,219,237,255,],[14,14,14,14,14,14,14,14,14,14,]),'LOCAL_VAR':([0,13,27,43,44,45,53,54,69,76,77,78,80,84,86,101,105,110,113,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,173,174,181,182,183,184,185,186,187,189,190,191,192,213,216,219,233,237,250,255,],[26,64,64,64,64,97,64,64,64,64,64,121,64,64,64,64,172,64,176,64,64,26,64,-59,-60,-61,-62,64,-66,-67,-68,-69,-70,-71,-72,26,64,97,97,97,97,97,97,64,64,222,225,-137,-138,-139,-140,-141,222,-136,230,64,64,64,64,64,64,64,26,]),'INTEGER':([0,13,27,43,44,45,53,54,69,76,77,78,80,83,84,86,101,110,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,173,174,181,182,183,184,185,186,187,189,190,192,213,215,216,219,233,237,250,255,],[33,63,63,63,63,33,63,63,63,63,63,63,63,138,63,63,63,63,63,63,33,63,-59,-60,-61,-62,63,-66,-67,-68,-69,-70,-71,-72,63,33,63,33,33,33,33,33,33,63,63,63,-136,-137,-138,-139,-140,-141,63,-136,63,63,239,63,63,63,63,63,33,]),'FLOAT':([0,13,27,43,44,45,53,54,69,76,77,78,80,84,86,101,110,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,173,174,181,182,183,184,185,186,187,189,190,192,213,216,219,233,237,250,255,],[34,62,62,62,62,34,62,62,62,62,62,62,62,62,62,62,62,62,62,34,62,-59,-60,-61,-62,62,-66,-67,-68,-69,-70,-71,-72,62,34,62,34,34,34,34,34,34,62,62,62,-136,-137,-138,-139,-140,-141,62,-136,62,62,62,62,62,62,62,34,]),'STRING':([0,13,27,45,69,76,77,78,80,84,86,101,110,114,134,143,158,160,161,162,163,164,165,173,182,191,192,213,233,250,255,],[36,59,59,36,59,59,59,132,59,59,59,59,59,59,59,36,36,36,36,36,36,36,36,59,226,229,59,59,59,59,36,]),'HASH':([0,143,158,255,],[41,41,41,41,]),'SET':([0,70,71,72,73,74,75,78,143,158,255,],[42,42,-125,-126,-127,-128,-129,42,42,42,42,]),'IF':([0,143,158,255,],[43,43,43,43,]),'WHILE':([0,143,158,255,],[44,44,44,44,]),'UNLESS':([0,143,158,255,],[45,45,45,45,]),'INSTANCE_VAR':([0,13,27,43,44,45,53,54,69,76,77,78,80,84,86,101,110,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,173,174,192,213,216,219,233,237,250,255,],[46,65,65,65,65,98,65,65,65,65,65,65,65,65,65,65,65,65,65,46,65,-59,-60,-61,-62,65,-66,-67,-68,-69,-70,-71,-72,46,65,98,98,98,98,98,98,65,65,65,65,65,65,65,65,65,46,]),'CLASS_VAR':([0,13,27,43,44,45,53,54,69,76,77,78,80,84,86,101,110,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,173,174,192,213,216,219,233,237,250,255,],[47,66,66,66,66,99,66,66,66,66,66,66,66,66,66,66,66,66,66,47,66,-59,-60,-61,-62,66,-66,-67,-68,-69,-70,-71,-72,47,66,99,99,99,99,99,99,66,66,66,66,66,66,66,66,66,47,]),'GLOBAL_VAR':([0,13,27,43,44,45,53,54,69,76,77,78,80,84,86,101,110,114,134,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,160,161,162,163,164,165,173,174,192,213,216,219,233,237,250,255,],[48,67,67,67,67,100,67,67,67,67,67,67,67,67,67,67,67,67,67,48,67,-59,-60,-61,-62,67,-66,-67,-68,-69,-70,-71,-72,48,67,100,100,100,100,100,100,67,67,67,67,67,67,67,67,67,48,]),'CONSTANT':([0,45,143,158,160,161,162,163,164,165,255,],[49,49,49,49,49,49,49,49,49,49,49,]),'LEFT_COR':([0,25,26,31,37,38,39,40,41,42,46,47,48,50,78,82,102,127,137,143,158,167,170,197,212,214,249,255,260,],[27,77,80,83,-41,-42,-43,-44,84,86,-32,-33,-34,101,27,-47,27,-45,-46,27,27,-49,-51,233,-48,-50,-52,27,-53,]),'PERCENTW':([0,78,143,158,255,],[50,50,50,50,50,]),'ARRAY':([0,78,143,158,255,],[51,51,51,51,51,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,46,47,48,49,52,55,56,57,58,59,60,61,62,63,64,65,66,67,82,88,115,116,117,119,121,122,123,124,125,126,127,128,130,131,132,135,137,140,167,170,171,175,177,179,180,194,195,196,198,200,201,202,203,204,212,214,220,221,222,223,224,225,226,228,229,230,232,235,236,243,244,249,251,252,254,256,258,260,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-111,-112,-113,-86,-116,-102,-103,-104,-105,-41,-42,-43,-44,-107,-108,-109,-110,-146,-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-47,-57,-39,-83,-123,-91,-31,-148,-115,-84,-85,-124,-45,-79,-22,-23,-24,-74,-46,-81,-49,-51,-142,-143,-30,-90,-82,-151,-54,-80,-121,-58,-63,-65,-64,-88,-48,-50,-37,-38,-133,-135,-132,-78,-77,-134,-75,-76,-150,-55,-130,-147,-149,-52,-144,-145,-56,-131,-120,-53,]),'END_LOWER':([2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,46,47,48,49,52,55,56,57,58,59,60,61,62,63,64,65,66,67,82,88,115,116,117,119,121,122,123,124,125,126,127,128,130,131,132,135,137,140,167,170,171,175,177,179,180,194,195,196,198,199,200,201,202,203,204,212,214,220,221,222,223,224,225,226,228,229,230,232,235,236,243,244,246,249,251,252,254,256,258,259,260,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-111,-112,-113,-86,-116,-102,-103,-104,-105,-41,-42,-43,-44,-107,-108,-109,-110,-146,-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-47,-57,-39,-83,-123,-91,-31,-148,-115,-84,-85,-124,-45,-79,-22,-23,-24,-74,-46,-81,-49,-51,-142,-143,-30,-90,-82,-151,-54,-80,-121,235,-58,-63,-65,-64,-88,-48,-50,-37,-38,-133,-135,-132,-78,-77,-134,-75,-76,-150,-55,-130,-147,-149,254,-52,-144,-145,-56,-131,-120,-73,-53,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,23,24,26,28,29,30,31,32,33,34,35,36,37,38,39,40,46,47,48,49,52,55,56,57,58,59,60,61,62,63,64,65,66,67,82,87,88,115,116,117,119,121,122,123,124,125,126,127,128,130,131,132,135,137,140,167,170,171,175,177,179,180,194,195,196,198,199,200,201,202,203,204,212,214,220,221,222,223,224,225,226,228,229,230,232,235,236,243,244,247,249,251,252,254,256,258,260,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-106,-111,-112,-113,-86,-116,-102,-103,-104,-105,-41,-42,-43,-44,-107,-108,-109,-110,-146,-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-47,143,-57,-39,-83,-123,-91,-31,-148,-115,-84,-85,-124,-45,-79,-22,-23,-24,-74,-46,-81,-49,-51,-142,-143,-30,-90,-82,-151,-54,-80,-121,234,-58,-63,-65,-64,-88,-48,-50,-37,-38,-133,-135,-132,-78,-77,-134,-75,-76,-150,-55,-130,-147,-149,255,-52,-144,-145,-56,-131,-120,-53,]),'LBRACE':([6,119,179,227,],[53,-91,-90,53,]),'DO':([6,119,179,227,],[54,-91,-90,54,]),'NIL':([13,27,69,76,77,78,80,84,86,101,110,114,134,173,192,213,233,250,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'SYMBOL':([13,27,69,76,77,78,80,84,86,101,110,114,134,173,192,213,233,250,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'DOT':([14,26,42,51,115,129,],[68,79,85,103,178,188,]),'ASSIGN':([18,26,180,],[69,78,-82,]),'PLUS':([20,21,62,63,117,121,130,132,198,222,224,258,],[-122,71,-35,-36,-123,182,190,191,-121,190,190,-120,]),'MINUS':([20,21,62,63,117,121,130,198,222,224,258,],[-122,72,-35,-36,-123,183,183,-121,183,183,-120,]),'AMPERSAND':([20,21,117,198,258,],[-122,73,-123,-121,-120,]),'PIPE':([20,21,53,54,117,172,176,198,258,],[-122,74,105,113,-123,216,219,-121,-120,]),'CARET':([20,21,117,198,258,],[-122,75,-123,-121,-120,]),'LEFTPAR':([25,26,46,47,48,51,79,110,133,141,170,],[76,-31,-32,-33,-34,102,134,173,192,197,215,]),'RIGHT_COR':([27,56,57,58,59,60,61,62,63,64,65,66,67,81,84,101,120,136,138,139,142,166,168,177,238,245,],[82,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,137,140,167,180,194,195,196,198,212,-28,-30,-27,253,]),'GREATER':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,150,150,160,-106,-107,-108,-109,-31,150,150,]),'LESS':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,151,151,161,-106,-107,-108,-109,-31,151,151,]),'GREATER_EQUAL':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,152,152,162,-106,-107,-108,-109,-31,152,152,]),'LESS_EQUAL':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,153,153,163,-106,-107,-108,-109,-31,153,153,]),'EQUAL':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,154,154,164,-106,-107,-108,-109,-31,154,154,]),'NOT_EQUAL':([33,34,35,36,49,62,63,64,65,66,67,89,90,93,97,98,99,100,121,130,131,],[-102,-103,-104,-105,-110,-35,-36,-31,-32,-33,-34,155,155,165,-106,-107,-108,-109,-31,155,155,]),'THEN':([33,34,35,36,49,92,94,95,96,97,98,99,100,206,207,208,209,210,211,],[-102,-103,-104,-105,-110,159,-99,-100,-101,-106,-107,-108,-109,-93,-94,-95,-96,-97,-98,]),'TRUE':([45,],[95,]),'FALSE':([45,],[96,]),'RBRACE':([55,56,57,58,59,60,61,62,63,64,65,66,67,88,104,106,107,108,109,115,177,200,201,202,203,218,220,221,240,241,],[-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-57,171,-117,-118,-119,-152,-39,-30,-58,-63,-65,-64,-89,-37,-38,251,-92,]),'END':([55,56,57,58,59,60,61,62,63,64,65,66,67,88,106,107,108,109,112,115,177,200,201,202,203,205,218,220,221,241,242,248,],[-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-57,-117,-118,-119,-152,175,-39,-30,-58,-63,-65,-64,236,-89,-37,-38,-92,252,256,]),'ELSE':([55,56,57,58,59,60,61,62,63,64,65,66,67,88,106,107,108,109,115,177,200,201,202,203,205,218,220,221,234,241,],[-40,-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,-57,-117,-118,-119,-152,-39,-30,-58,-63,-65,-64,237,-89,-37,-38,247,-92,]),'RIGHTPAR':([56,57,58,59,60,61,62,63,64,65,66,67,76,82,118,137,169,177,193,217,231,239,253,257,],[-29,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,119,-47,179,-46,214,-30,232,241,244,249,258,260,]),'COMMA':([56,57,58,59,60,61,62,63,64,65,66,67,239,],[114,-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,250,]),'SPACE':([57,58,59,60,61,62,63,64,65,66,67,168,],[-22,-23,-24,-25,-26,-35,-36,-31,-32,-33,-34,213,]),'COMPARE':([62,63,64,65,66,67,89,90,121,130,131,],[-35,-36,-31,-32,-33,-34,156,156,-31,156,156,]),'MULTIPLY':([62,63,121,130,222,224,],[-35,-36,184,184,184,184,]),'DIVIDE':([62,63,121,130,222,224,],[-35,-36,185,185,185,185,]),'MODULO':([62,63,121,130,222,224,],[-35,-36,186,186,186,186,]),'EXPONENT':([62,63,121,130,222,224,],[-35,-36,187,187,187,187,]),'AND':([62,63,64,65,66,67,87,88,91,111,125,200,201,202,203,218,],[-35,-36,-31,-32,-33,-34,145,-57,145,145,145,145,-63,-65,-64,145,]),'OR':([62,63,64,65,66,67,87,88,91,111,125,200,201,202,203,218,],[-35,-36,-31,-32,-33,-34,146,-57,146,146,146,146,-63,-65,-64,146,]),'AND_RESERVED':([62,63,64,65,66,67,87,88,91,111,125,200,201,202,203,218,],[-35,-36,-31,-32,-33,-34,147,-57,147,147,147,147,-63,-65,-64,147,]),'OR_RESERVED':([62,63,64,65,66,67,87,88,91,111,125,200,201,202,203,218,],[-35,-36,-31,-32,-33,-34,148,-57,148,148,148,148,-63,-65,-64,148,]),'COLON':([62,63,64,65,66,67,88,91,200,201,202,203,],[-35,-36,-31,-32,-33,-34,-57,158,-58,-63,-65,-64,]),'CHOMP':([68,],[115,]),'PROC':([78,],[129,]),'CALL':([79,],[133,]),'TO_S':([79,],[135,]),'NEW':([85,103,188,],[141,170,227,]),'TO_F':([178,],[220,]),'TO_I':([178,],[221,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,143,158,255,],[1,199,204,259,]),'puts':([0,53,54,143,158,159,216,219,237,255,],[2,106,106,2,2,106,106,106,106,2,]),'gets':([0,53,54,143,158,159,216,219,237,255,],[3,107,107,3,3,107,107,107,107,3,]),'estructurasDatos':([0,143,158,255,],[4,4,4,4,]),'estructurasControl':([0,143,158,255,],[5,5,5,5,]),'method_call':([0,143,158,255,],[6,6,6,6,]),'block_assignment':([0,143,158,255,],[7,7,7,7,]),'proc_assignment':([0,143,158,255,],[8,8,8,8,]),'proc_call':([0,143,158,255,],[9,9,9,9,]),'declaraciones':([0,143,158,255,],[10,10,10,10,]),'expression':([0,45,143,158,160,161,162,163,164,165,255,],[11,93,11,11,206,207,208,209,210,211,11,]),'to_string':([0,143,158,255,],[12,12,12,12,]),'array':([0,78,143,158,255,],[15,127,15,15,15,]),'acceder_arreglo':([0,143,158,255,],[16,16,16,16,]),'hash_declaration':([0,143,158,255,],[17,17,17,17,]),'hash_access':([0,143,158,255,],[18,18,18,18,]),'hash_operations':([0,143,158,255,],[19,19,19,19,]),'set_expression':([0,70,78,143,158,255,],[20,117,126,20,20,20,]),'set_operations':([0,143,158,255,],[21,21,21,21,]),'ifStatement':([0,143,158,255,],[22,22,22,22,]),'while_statement':([0,143,158,255,],[23,23,23,23,]),'unless_expression':([0,143,158,255,],[24,24,24,24,]),'var':([0,13,27,43,44,53,54,69,76,77,78,80,84,86,101,110,114,134,143,144,149,158,159,173,174,192,213,216,219,233,237,250,255,],[25,58,58,90,90,90,90,58,58,58,131,58,58,58,58,58,58,58,25,90,202,25,90,58,90,58,58,90,90,58,90,58,25,]),'variable_declaration':([0,143,158,255,],[28,28,28,28,]),'store_conditional_result':([0,143,158,255,],[29,29,29,29,]),'declare_data_structures':([0,143,158,255,],[30,30,30,30,]),'var_arreglo':([0,143,158,255,],[31,31,31,31,]),'declaracion_concatenar_string':([0,143,158,255,],[32,32,32,32,]),'variable':([0,45,143,158,160,161,162,163,164,165,255,],[35,35,35,35,35,35,35,35,35,35,35,]),'array_explicito':([0,78,102,143,158,255,],[37,37,169,37,37,37,]),'array_implicito':([0,78,143,158,255,],[38,38,38,38,38,]),'array_creation':([0,78,143,158,255,],[39,39,39,39,39,]),'newArray':([0,78,143,158,255,],[40,40,40,40,40,]),'block_expression':([6,227,],[52,243,]),'values':([13,27,76,80,84,86,110,114,134,173,192,233,250,],[55,81,118,136,139,142,55,177,193,217,231,245,257,]),'value':([13,27,69,76,77,78,80,84,86,101,110,114,134,173,192,213,233,250,],[56,56,116,56,120,124,56,56,56,168,56,56,56,56,56,168,56,56,]),'num':([13,27,43,44,53,54,69,76,77,78,80,84,86,101,110,114,134,144,149,157,159,173,174,181,189,192,213,216,219,233,237,250,],[57,57,89,89,89,89,57,57,57,130,57,57,57,57,57,57,57,89,201,203,89,57,89,224,224,57,57,89,89,57,89,57,]),'set_binary_operators':([21,],[70,]),'condiciones':([43,44,53,54,78,144,159,174,216,219,237,],[87,91,111,111,125,200,111,218,111,111,111,]),'condicion':([43,44,53,54,78,144,159,174,216,219,237,],[88,88,88,88,88,88,88,88,88,88,88,]),'boolean_expression':([45,],[92,]),'boolean_value':([45,],[94,]),'expresion':([53,54,159,216,219,237,],[104,112,205,240,242,248,]),'print_statement':([53,54,159,216,219,237,],[108,108,108,108,108,108,]),'condition_with_connectors':([53,54,159,216,219,237,],[109,109,109,109,109,109,]),'proc_expression':([78,],[122,]),'arithmetic_production':([78,181,189,],[123,223,228,]),'concatenar_string':([78,],[128,]),'conectores':([87,91,111,125,200,218,],[144,144,174,144,144,144,]),'operComp':([89,90,130,131,],[149,157,149,157,]),'values_space':([101,213,],[166,238,]),'arithmetic_operators':([121,130,222,224,],[181,189,181,189,]),'else_statement':([234,],[246,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','syntax_analyzer.py',14),
  ('codigo -> gets','codigo',1,'p_codigo','syntax_analyzer.py',15),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','syntax_analyzer.py',16),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','syntax_analyzer.py',17),
  ('codigo -> method_call','codigo',1,'p_codigo','syntax_analyzer.py',18),
  ('codigo -> block_assignment','codigo',1,'p_codigo','syntax_analyzer.py',19),
  ('codigo -> proc_assignment','codigo',1,'p_codigo','syntax_analyzer.py',20),
  ('codigo -> proc_call','codigo',1,'p_codigo','syntax_analyzer.py',21),
  ('codigo -> declaraciones','codigo',1,'p_codigo','syntax_analyzer.py',22),
  ('codigo -> expression','codigo',1,'p_codigo','syntax_analyzer.py',23),
  ('codigo -> to_string','codigo',1,'p_codigo','syntax_analyzer.py',24),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',27),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',28),
  ('estructurasDatos -> hash_declaration','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',29),
  ('estructurasDatos -> hash_access','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',30),
  ('estructurasDatos -> hash_operations','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',31),
  ('estructurasDatos -> set_expression','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',32),
  ('estructurasDatos -> set_operations','estructurasDatos',1,'p_estructurasDatos','syntax_analyzer.py',33),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',37),
  ('estructurasControl -> while_statement','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',38),
  ('estructurasControl -> unless_expression','estructurasControl',1,'p_estructurasControl','syntax_analyzer.py',39),
  ('value -> num','value',1,'p_value','syntax_analyzer.py',44),
  ('value -> var','value',1,'p_value','syntax_analyzer.py',45),
  ('value -> STRING','value',1,'p_value','syntax_analyzer.py',46),
  ('value -> NIL','value',1,'p_value','syntax_analyzer.py',47),
  ('value -> SYMBOL','value',1,'p_value','syntax_analyzer.py',48),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','syntax_analyzer.py',53),
  ('values_space -> value','values_space',1,'p_values_space','syntax_analyzer.py',54),
  ('values -> value','values',1,'p_values','syntax_analyzer.py',58),
  ('values -> value COMMA values','values',3,'p_values','syntax_analyzer.py',59),
  ('var -> LOCAL_VAR','var',1,'p_var','syntax_analyzer.py',63),
  ('var -> INSTANCE_VAR','var',1,'p_var','syntax_analyzer.py',64),
  ('var -> CLASS_VAR','var',1,'p_var','syntax_analyzer.py',65),
  ('var -> GLOBAL_VAR','var',1,'p_var','syntax_analyzer.py',66),
  ('num -> FLOAT','num',1,'p_num','syntax_analyzer.py',71),
  ('num -> INTEGER','num',1,'p_num','syntax_analyzer.py',72),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','syntax_analyzer.py',77),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','syntax_analyzer.py',78),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','syntax_analyzer.py',79),
  ('puts -> PUT values','puts',2,'p_puts','syntax_analyzer.py',83),
  ('array -> array_explicito','array',1,'p_array','syntax_analyzer.py',88),
  ('array -> array_implicito','array',1,'p_array','syntax_analyzer.py',89),
  ('array -> array_creation','array',1,'p_array','syntax_analyzer.py',90),
  ('array -> newArray','array',1,'p_array','syntax_analyzer.py',91),
  ('var_arreglo -> LOCAL_VAR ASSIGN array','var_arreglo',3,'p_var_arreglo','syntax_analyzer.py',96),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','syntax_analyzer.py',101),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','syntax_analyzer.py',102),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','syntax_analyzer.py',107),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','syntax_analyzer.py',108),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','syntax_analyzer.py',112),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','syntax_analyzer.py',116),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','syntax_analyzer.py',117),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','syntax_analyzer.py',118),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','syntax_analyzer.py',122),
  ('ifStatement -> IF condiciones NEWLINE codigo END_LOWER','ifStatement',5,'p_ifStatement','syntax_analyzer.py',127),
  ('ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER','ifStatement',7,'p_ifStatement','syntax_analyzer.py',128),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','syntax_analyzer.py',132),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','syntax_analyzer.py',133),
  ('conectores -> AND','conectores',1,'p_conectores','syntax_analyzer.py',137),
  ('conectores -> OR','conectores',1,'p_conectores','syntax_analyzer.py',138),
  ('conectores -> AND_RESERVED','conectores',1,'p_conectores','syntax_analyzer.py',139),
  ('conectores -> OR_RESERVED','conectores',1,'p_conectores','syntax_analyzer.py',140),
  ('condicion -> num operComp num','condicion',3,'p_condicion','syntax_analyzer.py',144),
  ('condicion -> var operComp num','condicion',3,'p_condicion','syntax_analyzer.py',145),
  ('condicion -> num operComp var','condicion',3,'p_condicion','syntax_analyzer.py',146),
  ('operComp -> GREATER','operComp',1,'p_operComp','syntax_analyzer.py',150),
  ('operComp -> LESS','operComp',1,'p_operComp','syntax_analyzer.py',151),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',152),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',153),
  ('operComp -> EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',154),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','syntax_analyzer.py',155),
  ('operComp -> COMPARE','operComp',1,'p_operComp','syntax_analyzer.py',156),
  ('else_statement -> ELSE NEWLINE codigo','else_statement',3,'p_else_statement','syntax_analyzer.py',160),
  ('to_string -> LOCAL_VAR DOT TO_S','to_string',3,'p_to_string','syntax_analyzer.py',164),
  ('concatenar_string -> STRING PLUS STRING','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',177),
  ('concatenar_string -> STRING PLUS LOCAL_VAR','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',178),
  ('concatenar_string -> LOCAL_VAR PLUS STRING','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',179),
  ('concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR','concatenar_string',3,'p_concatenar_string','syntax_analyzer.py',180),
  ('declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string','declaracion_concatenar_string',3,'p_declaracion_concatenar_string','syntax_analyzer.py',194),
  ('hash_declaration -> HASH LEFT_COR values RIGHT_COR','hash_declaration',4,'p_hash_declaration','syntax_analyzer.py',212),
  ('hash_declaration -> HASH LEFT_COR RIGHT_COR','hash_declaration',3,'p_hash_declaration','syntax_analyzer.py',213),
  ('hash_access -> var LEFT_COR value RIGHT_COR','hash_access',4,'p_hash_access','syntax_analyzer.py',217),
  ('hash_operations -> hash_access ASSIGN value','hash_operations',3,'p_hash_operations','syntax_analyzer.py',221),
  ('variable_declaration -> LOCAL_VAR ASSIGN value','variable_declaration',3,'p_variable_declaration','syntax_analyzer.py',226),
  ('store_conditional_result -> LOCAL_VAR ASSIGN condiciones','store_conditional_result',3,'p_store_conditional_result','syntax_analyzer.py',234),
  ('declare_data_structures -> var_arreglo','declare_data_structures',1,'p_declare_data_structures','syntax_analyzer.py',239),
  ('declare_data_structures -> hash_declaration','declare_data_structures',1,'p_declare_data_structures','syntax_analyzer.py',240),
  ('while_statement -> WHILE condiciones COLON codigo','while_statement',4,'p_while_statement','syntax_analyzer.py',245),
  ('condition_with_connectors -> condiciones conectores condiciones','condition_with_connectors',3,'p_condition_with_connectors','syntax_analyzer.py',250),
  ('method_call -> var LEFTPAR values RIGHTPAR','method_call',4,'p_method_call','syntax_analyzer.py',255),
  ('method_call -> var LEFTPAR RIGHTPAR','method_call',3,'p_method_call','syntax_analyzer.py',256),
  ('print_statement -> PUT LEFTPAR values RIGHTPAR','print_statement',4,'p_print_statement','syntax_analyzer.py',260),
  ('boolean_expression -> expression GREATER expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',265),
  ('boolean_expression -> expression LESS expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',266),
  ('boolean_expression -> expression GREATER_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',267),
  ('boolean_expression -> expression LESS_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',268),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',269),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','syntax_analyzer.py',270),
  ('boolean_expression -> boolean_value','boolean_expression',1,'p_boolean_expression','syntax_analyzer.py',271),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','syntax_analyzer.py',275),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','syntax_analyzer.py',276),
  ('expression -> INTEGER','expression',1,'p_expression','syntax_analyzer.py',280),
  ('expression -> FLOAT','expression',1,'p_expression','syntax_analyzer.py',281),
  ('expression -> variable','expression',1,'p_expression','syntax_analyzer.py',282),
  ('expression -> STRING','expression',1,'p_expression','syntax_analyzer.py',283),
  ('variable -> LOCAL_VAR','variable',1,'p_variable','syntax_analyzer.py',286),
  ('variable -> INSTANCE_VAR','variable',1,'p_variable','syntax_analyzer.py',287),
  ('variable -> CLASS_VAR','variable',1,'p_variable','syntax_analyzer.py',288),
  ('variable -> GLOBAL_VAR','variable',1,'p_variable','syntax_analyzer.py',289),
  ('variable -> CONSTANT','variable',1,'p_variable','syntax_analyzer.py',290),
  ('declaraciones -> variable_declaration','declaraciones',1,'p_declaraciones','syntax_analyzer.py',294),
  ('declaraciones -> store_conditional_result','declaraciones',1,'p_declaraciones','syntax_analyzer.py',295),
  ('declaraciones -> declare_data_structures','declaraciones',1,'p_declaraciones','syntax_analyzer.py',296),
  ('declaraciones -> var_arreglo','declaraciones',1,'p_declaraciones','syntax_analyzer.py',297),
  ('declaraciones -> LOCAL_VAR ASSIGN arithmetic_production','declaraciones',3,'p_declaraciones','syntax_analyzer.py',298),
  ('declaraciones -> declaracion_concatenar_string','declaraciones',1,'p_declaraciones','syntax_analyzer.py',299),
  ('expresion -> puts','expresion',1,'p_expresion','syntax_analyzer.py',304),
  ('expresion -> gets','expresion',1,'p_expresion','syntax_analyzer.py',305),
  ('expresion -> print_statement','expresion',1,'p_expresion','syntax_analyzer.py',306),
  ('set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR','set_expression',8,'p_set_expression','syntax_analyzer.py',311),
  ('set_expression -> SET LEFT_COR values RIGHT_COR','set_expression',4,'p_set_expression','syntax_analyzer.py',312),
  ('set_operations -> set_expression','set_operations',1,'p_set_operations','syntax_analyzer.py',315),
  ('set_operations -> set_operations set_binary_operators set_expression','set_operations',3,'p_set_operations','syntax_analyzer.py',316),
  ('declare_data_structures -> LOCAL_VAR ASSIGN set_expression','declare_data_structures',3,'p_set_declaration','syntax_analyzer.py',319),
  ('set_binary_operators -> PLUS','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',323),
  ('set_binary_operators -> MINUS','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',324),
  ('set_binary_operators -> AMPERSAND','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',325),
  ('set_binary_operators -> PIPE','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',326),
  ('set_binary_operators -> CARET','set_binary_operators',1,'p_set_binary_operators','syntax_analyzer.py',327),
  ('unless_expression -> UNLESS boolean_expression THEN expresion END','unless_expression',5,'p_unless_expression','syntax_analyzer.py',330),
  ('unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END','unless_expression',7,'p_unless_expression','syntax_analyzer.py',331),
  ('arithmetic_production -> num','arithmetic_production',1,'p_arithmetic_production','syntax_analyzer.py',334),
  ('arithmetic_production -> LOCAL_VAR','arithmetic_production',1,'p_arithmetic_production','syntax_analyzer.py',335),
  ('arithmetic_production -> num arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','syntax_analyzer.py',336),
  ('arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','syntax_analyzer.py',337),
  ('arithmetic_operators -> PLUS','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',363),
  ('arithmetic_operators -> MINUS','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',364),
  ('arithmetic_operators -> MULTIPLY','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',365),
  ('arithmetic_operators -> DIVIDE','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',366),
  ('arithmetic_operators -> MODULO','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',367),
  ('arithmetic_operators -> EXPONENT','arithmetic_operators',1,'p_arithmetic_operators','syntax_analyzer.py',368),
  ('block_expression -> LBRACE expresion RBRACE','block_expression',3,'p_block_expression','syntax_analyzer.py',371),
  ('block_expression -> DO expresion END','block_expression',3,'p_block_expression','syntax_analyzer.py',372),
  ('block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE','block_expression',6,'p_block_expression','syntax_analyzer.py',373),
  ('block_expression -> DO PIPE LOCAL_VAR PIPE expresion END','block_expression',6,'p_block_expression','syntax_analyzer.py',374),
  ('block_assignment -> method_call block_expression','block_assignment',2,'p_block_assignment','syntax_analyzer.py',377),
  ('proc_expression -> PROC DOT NEW block_expression','proc_expression',4,'p_proc_expression','syntax_analyzer.py',380),
  ('proc_assignment -> LOCAL_VAR ASSIGN proc_expression','proc_assignment',3,'p_proc_assignment','syntax_analyzer.py',383),
  ('proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR','proc_call',6,'p_proc_call','syntax_analyzer.py',387),
  ('proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR','proc_call',5,'p_proc_call','syntax_analyzer.py',388),
  ('proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR','proc_call',4,'p_proc_call','syntax_analyzer.py',389),
  ('expresion -> condition_with_connectors','expresion',1,'p_condition_expr','syntax_analyzer.py',392),
]
