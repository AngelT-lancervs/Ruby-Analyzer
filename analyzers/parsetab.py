
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AMPERSAND AND AND_RESERVED ARRAY ASSIGN BACKSLASH BEGIN BIN_INTEGER BOOLEAN BREAK CALL CARET CASE CASE_EQUAL CHOMP CLASS CLASS_VAR COLON COMMA COMPARE CONSTANT DEF DEFINED DIVIDE DIVIDE_ASSIGN DO DOT DOUBLE_QUOTE ELSE ELSIF END END_LOWER EQUAL EXPONENT EXPONENT_ASSIGN FALSE FLOAT FOR GETS GLOBAL_VAR GREATER GREATER_EQUAL HASH HEX_INTEGER IF IN INSTANCE_VAR INTEGER LBRACE LEFTPAR LEFT_COR LESS LESS_EQUAL LOCAL_VAR MINUS MINUS_ASSIGN MODULE MODULO MODULO_ASSIGN MULTIPLY MULTIPLY_ASSIGN NEW NEWLINE NIL NOT NOT_EQUAL OCT_INTEGER OR OR_RESERVED PERCENTW PIPE PLUS PLUS_ASSIGN PROC PUT RANGEEX RANGEIN RBRACE REDO RETURN RIGHTPAR RIGHT_COR SELF SET SPACE STRING SYMBOL TAB THEN TO_F TO_I TRUE UNLESS UNTIL WHEN WHILE codigo : puts \n               | gets\n               | estructurasDatos\n               | estructurasControl\n               | method_call\n               | block_assignment\n               | proc_assignment\n               | proc_call\n               | declaraciones\n               | arithmetic_production\n     estructurasDatos : array\n                         | var_arreglo\n                         | acceder_arreglo\n                         | hash_declaration\n                         | hash_access\n                         | hash_operations\n                         | set_expression\n                         | set_operations\n     estructurasControl : ifStatement\n                           | while_statement\n                           | unless_expression\n     value : var\n             | num\n             | STRING\n             | NIL\n             | SYMBOL\n           values_space : value SPACE values_space\n                     | value\n     values : value\n               | value COMMA values \n                var : LOCAL_VAR\n           | INSTANCE_VAR\n           | CLASS_VAR\n           | GLOBAL_VAR\n           | CONSTANT\n            num : FLOAT\n           | INTEGER\n            gets : GETS DOT CHOMP DOT TO_F\n             | GETS DOT CHOMP DOT TO_I\n             | GETS DOT CHOMP\n     puts : PUT values \n     array : array_explicito\n              | array_implicito\n              | array_creation\n              | newArray\n     array_explicito : LEFT_COR values RIGHT_COR\n                        | LEFT_COR RIGHT_COR\n     array_implicito : PERCENTW LEFT_COR values_space RIGHT_COR\n                        | PERCENTW LEFT_COR RIGHT_COR\n     array_creation : ARRAY LEFTPAR array_explicito RIGHTPAR\n     newArray : ARRAY DOT NEW \n                 | ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR\n                 | ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR\n     var_arreglo : var\n                    | var ASSIGN array\n     acceder_arreglo : var_arreglo LEFT_COR INTEGER RIGHT_COR\n     ifStatement : IF condiciones NEWLINE codigo END_LOWER\n                     | IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER\n     condiciones : condicion\n                    | condiciones conectores condiciones\n     conectores : AND\n                   | OR\n                   | AND_RESERVED\n                   | OR_RESERVED\n     condicion : num operComp num\n                  | var operComp num\n                  | num operComp var\n     operComp : GREATER\n                 | LESS\n                 | GREATER_EQUAL\n                 | LESS_EQUAL\n                 | EQUAL\n                 | NOT_EQUAL\n                 | COMPARE\n     else_statement : ELSE NEWLINE codigo\n     hash_declaration : HASH LEFT_COR values RIGHT_COR\n                         | HASH LEFT_COR RIGHT_COR\n     hash_access : var LEFT_COR value RIGHT_COR\n     hash_operations : hash_access ASSIGN value\n     variable_declaration : var ASSIGN value\n     store_conditional_result : var ASSIGN condiciones\n     declare_data_structures : variable_declaration\n                                | array\n                                | hash_declaration\n     while_statement : WHILE condiciones COLON codigo\n     condition_with_connectors : condiciones conectores condiciones\n     method_call : var LEFTPAR values RIGHTPAR\n                    | var LEFTPAR RIGHTPAR\n     print_statement : PUT LEFTPAR values RIGHTPAR\n     boolean_expression : expression GREATER expression\n                           | expression LESS expression\n                           | expression GREATER_EQUAL expression\n                           | expression LESS_EQUAL expression\n                           | expression EQUAL expression\n                           | expression NOT_EQUAL expression\n                           | boolean_value  boolean_value : TRUE\n                      | FALSE  expression : INTEGER\n                   | FLOAT\n                   | variable\n                   | STRING  variable : LOCAL_VAR\n                 | INSTANCE_VAR\n                 | CLASS_VAR\n                 | GLOBAL_VAR\n                 | CONSTANT  declaraciones : variable_declaration\n                      | store_conditional_result\n                      | declare_data_structures\n     expresion : puts\n                 | gets\n                 | print_statement\n    set_expression : SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR\n                      | SET LEFT_COR values RIGHT_CORset_operations : set_expression\n                      | set_operations set_binary_operators set_expressiondeclare_data_structures : LOCAL_VAR ASSIGN set_expressionset_binary_operators : PLUS\n                            | MINUS\n                            | AMPERSAND\n                            | PIPE\n                            | CARETunless_expression : UNLESS boolean_expression THEN expresion END\n                         | UNLESS boolean_expression THEN expresion ELSE expresion ENDexpresion : arithmetic_productionarithmetic_production : num\n                             | var\n                             | num arithmetic_operators arithmetic_production\n                             | var arithmetic_operators arithmetic_productionarithmetic_operators : PLUS\n                            | MINUS\n                            | MULTIPLY\n                            | DIVIDE\n                            | MODULO\n                            | EXPONENTblock_expression : LBRACE expresion RBRACE\n                         | DO expresion END\n                         | LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE\n                         | DO PIPE LOCAL_VAR PIPE expresion ENDblock_assignment : method_call block_expressionproc_expression : PROC DOT NEW block_expressionproc_assignment : LOCAL_VAR ASSIGN proc_expressionproc_call : LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR DOT LEFTPAR values RIGHTPAR\n                 | LOCAL_VAR LEFT_COR values RIGHT_CORexpresion : condition_with_connectors'
    
_lr_action_items = {'PUT':([0,50,51,150,165,166,213,216,226,244,],[12,117,117,12,12,117,117,117,117,12,]),'GETS':([0,50,51,150,165,166,213,216,226,244,],[13,13,13,13,13,13,13,13,13,13,]),'LOCAL_VAR':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,111,117,122,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[26,59,59,59,59,102,59,59,59,59,59,59,59,-131,-132,-133,-134,-135,-136,59,59,59,59,59,179,59,183,59,59,26,59,-61,-62,-63,-64,59,-68,-69,-70,-71,-72,-73,-74,26,59,102,102,102,102,102,102,59,59,59,59,59,59,59,59,59,26,]),'HASH':([0,150,165,244,],[37,37,37,37,]),'SET':([0,63,64,65,66,67,68,79,150,165,244,],[38,38,-119,-120,-121,-122,-123,38,38,38,38,]),'IF':([0,150,165,244,],[39,39,39,39,]),'WHILE':([0,150,165,244,],[40,40,40,40,]),'UNLESS':([0,150,165,244,],[41,41,41,41,]),'INSTANCE_VAR':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[42,42,42,42,42,103,42,42,42,42,42,42,42,-131,-132,-133,-134,-135,-136,42,42,42,42,42,42,42,42,42,42,-61,-62,-63,-64,42,-68,-69,-70,-71,-72,-73,-74,42,42,103,103,103,103,103,103,42,42,42,42,42,42,42,42,42,42,]),'CLASS_VAR':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[43,43,43,43,43,104,43,43,43,43,43,43,43,-131,-132,-133,-134,-135,-136,43,43,43,43,43,43,43,43,43,43,-61,-62,-63,-64,43,-68,-69,-70,-71,-72,-73,-74,43,43,104,104,104,104,104,104,43,43,43,43,43,43,43,43,43,43,]),'GLOBAL_VAR':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[44,44,44,44,44,105,44,44,44,44,44,44,44,-131,-132,-133,-134,-135,-136,44,44,44,44,44,44,44,44,44,44,-61,-62,-63,-64,44,-68,-69,-70,-71,-72,-73,-74,44,44,105,105,105,105,105,105,44,44,44,44,44,44,44,44,44,44,]),'CONSTANT':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[45,45,45,45,45,106,45,45,45,45,45,45,45,-131,-132,-133,-134,-135,-136,45,45,45,45,45,45,45,45,45,45,-61,-62,-63,-64,45,-68,-69,-70,-71,-72,-73,-74,45,45,106,106,106,106,106,106,45,45,45,45,45,45,45,45,45,45,]),'FLOAT':([0,12,27,39,40,41,50,51,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,180,181,190,210,213,216,222,226,239,244,],[46,46,46,46,46,97,46,46,46,46,46,46,46,-131,-132,-133,-134,-135,-136,46,46,46,46,46,46,46,46,46,46,-61,-62,-63,-64,46,-68,-69,-70,-71,-72,-73,-74,46,46,46,97,97,97,97,97,97,46,46,46,46,46,46,46,46,46,46,]),'INTEGER':([0,12,27,39,40,41,50,51,61,62,69,70,71,72,73,74,75,76,77,78,81,84,85,87,107,117,123,142,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,180,181,190,210,212,213,216,222,226,239,244,],[36,36,36,36,36,96,36,36,125,36,36,36,36,36,-131,-132,-133,-134,-135,-136,36,36,36,36,36,36,36,36,36,36,-61,-62,-63,-64,36,-68,-69,-70,-71,-72,-73,-74,36,36,36,96,96,96,96,96,96,36,36,36,36,228,36,36,36,36,36,36,]),'LEFT_COR':([0,15,25,26,32,33,34,35,37,38,42,43,44,45,47,71,83,108,133,144,150,165,174,177,194,209,211,238,244,249,],[27,61,72,81,-42,-43,-44,-45,85,87,-32,-33,-34,-35,107,27,-47,27,-55,-46,27,27,-49,-51,222,-48,-50,-52,27,-53,]),'PERCENTW':([0,71,150,165,244,],[47,47,47,47,47,]),'ARRAY':([0,71,150,165,244,],[48,48,48,48,48,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,42,43,44,45,46,49,52,53,54,55,56,57,58,59,83,89,124,126,127,129,130,131,132,133,134,135,136,138,139,144,145,147,174,177,178,182,184,186,187,188,192,193,195,197,198,199,200,201,209,211,217,218,221,224,225,232,233,238,240,241,243,245,247,249,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-54,-31,-82,-109,-110,-127,-42,-43,-44,-45,-37,-32,-33,-34,-35,-36,-141,-41,-29,-22,-23,-24,-25,-26,-31,-47,-59,-40,-79,-117,-88,-128,-130,-22,-55,-80,-81,-23,-143,-118,-46,-129,-77,-49,-51,-137,-138,-30,-56,-87,-78,-146,-76,-115,-60,-65,-67,-66,-85,-48,-50,-38,-39,-145,-57,-124,-142,-144,-52,-139,-140,-58,-125,-114,-53,]),'END_LOWER':([2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,42,43,44,45,46,49,52,53,54,55,56,57,58,59,83,89,124,126,127,129,130,131,132,133,134,135,136,138,139,144,145,147,174,177,178,182,184,186,187,188,192,193,195,196,197,198,199,200,201,209,211,217,218,221,224,225,232,233,235,238,240,241,243,245,247,248,249,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-54,-31,-82,-109,-110,-127,-42,-43,-44,-45,-37,-32,-33,-34,-35,-36,-141,-41,-29,-22,-23,-24,-25,-26,-31,-47,-59,-40,-79,-117,-88,-128,-130,-22,-55,-80,-81,-23,-143,-118,-46,-129,-77,-49,-51,-137,-138,-30,-56,-87,-78,-146,-76,-115,224,-60,-65,-67,-66,-85,-48,-50,-38,-39,-145,-57,-124,-142,-144,243,-52,-139,-140,-58,-125,-114,-75,-53,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,42,43,44,45,46,49,52,53,54,55,56,57,58,59,83,88,89,124,126,127,129,130,131,132,133,134,135,136,138,139,144,145,147,174,177,178,182,184,186,187,188,192,193,195,196,197,198,199,200,201,209,211,217,218,221,224,225,232,233,236,238,240,241,243,245,247,249,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-54,-31,-82,-109,-110,-127,-42,-43,-44,-45,-37,-32,-33,-34,-35,-36,-141,-41,-29,-22,-23,-24,-25,-26,-31,-47,150,-59,-40,-79,-117,-88,-128,-130,-22,-55,-80,-81,-23,-143,-118,-46,-129,-77,-49,-51,-137,-138,-30,-56,-87,-78,-146,-76,-115,223,-60,-65,-67,-66,-85,-48,-50,-38,-39,-145,-57,-124,-142,-144,244,-52,-139,-140,-58,-125,-114,-53,]),'LBRACE':([6,129,187,219,],[50,-88,-87,50,]),'DO':([6,129,187,219,],[51,-88,-87,51,]),'STRING':([12,27,41,62,69,71,72,81,85,87,107,117,123,142,167,168,169,170,171,172,180,190,210,222,239,],[56,56,99,56,56,56,56,56,56,56,56,56,56,56,99,99,99,99,99,99,56,56,56,56,56,]),'NIL':([12,27,62,69,71,72,81,85,87,107,117,123,142,180,190,210,222,239,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'SYMBOL':([12,27,62,69,71,72,81,85,87,107,117,123,142,180,190,210,222,239,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'DOT':([13,26,38,48,124,140,],[60,80,86,109,185,189,]),'ASSIGN':([18,25,26,42,43,44,45,188,],[62,71,79,-32,-33,-34,-35,-78,]),'PLUS':([20,21,25,26,31,36,42,43,44,45,46,59,118,119,127,130,195,247,],[-116,64,73,-31,73,-37,-32,-33,-34,-35,-36,-31,73,73,-117,73,-115,-114,]),'MINUS':([20,21,25,26,31,36,42,43,44,45,46,59,118,119,127,130,195,247,],[-116,65,74,-31,74,-37,-32,-33,-34,-35,-36,-31,74,74,-117,74,-115,-114,]),'AMPERSAND':([20,21,127,195,247,],[-116,66,-117,-115,-114,]),'PIPE':([20,21,50,51,127,179,183,195,247,],[-116,67,111,122,-117,213,216,-115,-114,]),'CARET':([20,21,127,195,247,],[-116,68,-117,-115,-114,]),'LEFTPAR':([25,26,42,43,44,45,48,80,117,141,148,177,],[69,-31,-32,-33,-34,-35,108,142,180,190,194,212,]),'MULTIPLY':([25,26,31,36,42,43,44,45,46,59,118,119,130,],[75,-31,75,-37,-32,-33,-34,-35,-36,-31,75,75,75,]),'DIVIDE':([25,26,31,36,42,43,44,45,46,59,118,119,130,],[76,-31,76,-37,-32,-33,-34,-35,-36,-31,76,76,76,]),'MODULO':([25,26,31,36,42,43,44,45,46,59,118,119,130,],[77,-31,77,-37,-32,-33,-34,-35,-36,-31,77,77,77,]),'EXPONENT':([25,26,31,36,42,43,44,45,46,59,118,119,130,],[78,-31,78,-37,-32,-33,-34,-35,-36,-31,78,78,78,]),'RIGHT_COR':([27,36,42,43,44,45,46,53,54,55,56,57,58,59,82,85,107,125,137,143,146,149,173,175,184,227,234,],[83,-37,-32,-33,-34,-35,-36,-29,-22,-23,-24,-25,-26,-31,144,147,174,186,188,192,193,195,209,-28,-30,-27,242,]),'RBRACE':([31,36,42,43,44,45,46,52,53,54,55,56,57,58,59,89,110,112,113,114,115,116,118,119,124,130,131,145,184,197,198,199,200,215,217,218,229,230,],[-127,-37,-32,-33,-34,-35,-36,-41,-29,-22,-23,-24,-25,-26,-31,-59,178,-111,-112,-113,-126,-147,-127,-128,-40,-128,-130,-129,-30,-60,-65,-67,-66,-86,-38,-39,240,-89,]),'END':([31,36,42,43,44,45,46,52,53,54,55,56,57,58,59,89,112,113,114,115,116,118,119,121,124,130,131,145,184,197,198,199,200,202,215,217,218,230,231,237,],[-127,-37,-32,-33,-34,-35,-36,-41,-29,-22,-23,-24,-25,-26,-31,-59,-111,-112,-113,-126,-147,-127,-128,182,-40,-128,-130,-129,-30,-60,-65,-67,-66,225,-86,-38,-39,-89,241,245,]),'ELSE':([31,36,42,43,44,45,46,52,53,54,55,56,57,58,59,89,112,113,114,115,116,118,119,124,130,131,145,184,197,198,199,200,202,215,217,218,223,230,],[-127,-37,-32,-33,-34,-35,-36,-41,-29,-22,-23,-24,-25,-26,-31,-59,-111,-112,-113,-126,-147,-127,-128,-40,-128,-130,-129,-30,-60,-65,-67,-66,226,-86,-38,-39,236,-89,]),'COMMA':([36,42,43,44,45,46,53,54,55,56,57,58,59,228,],[-37,-32,-33,-34,-35,-36,123,-22,-23,-24,-25,-26,-31,239,]),'GREATER':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,157,157,167,-99,-100,-101,-102,-103,-104,-105,-106,-107,157,157,157,157,]),'LESS':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,158,158,168,-99,-100,-101,-102,-103,-104,-105,-106,-107,158,158,158,158,]),'GREATER_EQUAL':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,159,159,169,-99,-100,-101,-102,-103,-104,-105,-106,-107,159,159,159,159,]),'LESS_EQUAL':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,160,160,170,-99,-100,-101,-102,-103,-104,-105,-106,-107,160,160,160,160,]),'EQUAL':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,161,161,171,-99,-100,-101,-102,-103,-104,-105,-106,-107,161,161,161,161,]),'NOT_EQUAL':([36,42,43,44,45,46,59,90,91,94,96,97,98,99,102,103,104,105,106,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,162,162,172,-99,-100,-101,-102,-103,-104,-105,-106,-107,162,162,162,162,]),'COMPARE':([36,42,43,44,45,46,59,90,91,118,119,132,136,],[-37,-32,-33,-34,-35,-36,-31,163,163,163,163,163,163,]),'RIGHTPAR':([36,42,43,44,45,46,53,54,55,56,57,58,59,69,83,128,144,176,184,191,214,220,228,242,246,],[-37,-32,-33,-34,-35,-36,-29,-22,-23,-24,-25,-26,-31,129,-47,187,-46,211,-30,221,230,233,238,247,249,]),'SPACE':([36,42,43,44,45,46,54,55,56,57,58,59,175,],[-37,-32,-33,-34,-35,-36,-22,-23,-24,-25,-26,-31,210,]),'AND':([36,42,43,44,45,46,59,88,89,92,120,135,197,198,199,200,215,],[-37,-32,-33,-34,-35,-36,-31,152,-59,152,152,152,152,-65,-67,-66,152,]),'OR':([36,42,43,44,45,46,59,88,89,92,120,135,197,198,199,200,215,],[-37,-32,-33,-34,-35,-36,-31,153,-59,153,153,153,153,-65,-67,-66,153,]),'AND_RESERVED':([36,42,43,44,45,46,59,88,89,92,120,135,197,198,199,200,215,],[-37,-32,-33,-34,-35,-36,-31,154,-59,154,154,154,154,-65,-67,-66,154,]),'OR_RESERVED':([36,42,43,44,45,46,59,88,89,92,120,135,197,198,199,200,215,],[-37,-32,-33,-34,-35,-36,-31,155,-59,155,155,155,155,-65,-67,-66,155,]),'COLON':([36,42,43,44,45,46,59,89,92,197,198,199,200,],[-37,-32,-33,-34,-35,-36,-31,-59,165,-60,-65,-67,-66,]),'TRUE':([41,],[100,]),'FALSE':([41,],[101,]),'CHOMP':([60,],[124,]),'PROC':([79,],[140,]),'CALL':([80,],[141,]),'NEW':([86,109,189,],[148,177,219,]),'THEN':([93,95,96,97,98,99,100,101,102,103,104,105,106,203,204,205,206,207,208,],[166,-96,-99,-100,-101,-102,-97,-98,-103,-104,-105,-106,-107,-90,-91,-92,-93,-94,-95,]),'TO_F':([185,],[217,]),'TO_I':([185,],[218,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,150,165,244,],[1,196,201,248,]),'puts':([0,50,51,150,165,166,213,216,226,244,],[2,112,112,2,2,112,112,112,112,2,]),'gets':([0,50,51,150,165,166,213,216,226,244,],[3,113,113,3,3,113,113,113,113,3,]),'estructurasDatos':([0,150,165,244,],[4,4,4,4,]),'estructurasControl':([0,150,165,244,],[5,5,5,5,]),'method_call':([0,150,165,244,],[6,6,6,6,]),'block_assignment':([0,150,165,244,],[7,7,7,7,]),'proc_assignment':([0,150,165,244,],[8,8,8,8,]),'proc_call':([0,150,165,244,],[9,9,9,9,]),'declaraciones':([0,150,165,244,],[10,10,10,10,]),'arithmetic_production':([0,50,51,70,84,150,165,166,213,216,226,244,],[11,115,115,131,145,11,11,115,115,115,115,11,]),'array':([0,71,150,165,244,],[14,133,14,14,14,]),'var_arreglo':([0,150,165,244,],[15,15,15,15,]),'acceder_arreglo':([0,150,165,244,],[16,16,16,16,]),'hash_declaration':([0,150,165,244,],[17,17,17,17,]),'hash_access':([0,150,165,244,],[18,18,18,18,]),'hash_operations':([0,150,165,244,],[19,19,19,19,]),'set_expression':([0,63,79,150,165,244,],[20,127,139,20,20,20,]),'set_operations':([0,150,165,244,],[21,21,21,21,]),'ifStatement':([0,150,165,244,],[22,22,22,22,]),'while_statement':([0,150,165,244,],[23,23,23,23,]),'unless_expression':([0,150,165,244,],[24,24,24,24,]),'var':([0,12,27,39,40,50,51,62,69,70,71,72,81,84,85,87,107,117,123,142,150,151,156,165,166,180,181,190,210,213,216,222,226,239,244,],[25,54,54,91,91,119,119,54,54,130,132,54,54,130,54,54,54,54,54,54,25,91,199,25,119,54,91,54,54,119,119,54,119,54,25,]),'variable_declaration':([0,150,165,244,],[28,28,28,28,]),'store_conditional_result':([0,150,165,244,],[29,29,29,29,]),'declare_data_structures':([0,150,165,244,],[30,30,30,30,]),'num':([0,12,27,39,40,50,51,62,69,70,71,72,81,84,85,87,107,117,123,142,150,151,156,164,165,166,180,181,190,210,213,216,222,226,239,244,],[31,55,55,90,90,118,118,55,55,31,136,55,55,31,55,55,55,55,55,55,31,90,198,200,31,118,55,90,55,55,118,118,55,118,55,31,]),'array_explicito':([0,71,108,150,165,244,],[32,32,176,32,32,32,]),'array_implicito':([0,71,150,165,244,],[33,33,33,33,33,]),'array_creation':([0,71,150,165,244,],[34,34,34,34,34,]),'newArray':([0,71,150,165,244,],[35,35,35,35,35,]),'block_expression':([6,219,],[49,232,]),'values':([12,27,69,81,85,87,117,123,142,180,190,222,239,],[52,82,128,143,146,149,52,184,191,214,220,234,246,]),'value':([12,27,62,69,71,72,81,85,87,107,117,123,142,180,190,210,222,239,],[53,53,126,53,134,137,53,53,53,175,53,53,53,53,53,175,53,53,]),'set_binary_operators':([21,],[63,]),'arithmetic_operators':([25,31,118,119,130,],[70,84,84,70,70,]),'condiciones':([39,40,50,51,71,151,166,181,213,216,226,],[88,92,120,120,135,197,120,215,120,120,120,]),'condicion':([39,40,50,51,71,151,166,181,213,216,226,],[89,89,89,89,89,89,89,89,89,89,89,]),'boolean_expression':([41,],[93,]),'expression':([41,167,168,169,170,171,172,],[94,203,204,205,206,207,208,]),'boolean_value':([41,],[95,]),'variable':([41,167,168,169,170,171,172,],[98,98,98,98,98,98,98,]),'expresion':([50,51,166,213,216,226,],[110,121,202,229,231,237,]),'print_statement':([50,51,166,213,216,226,],[114,114,114,114,114,114,]),'condition_with_connectors':([50,51,166,213,216,226,],[116,116,116,116,116,116,]),'proc_expression':([79,],[138,]),'conectores':([88,92,120,135,197,215,],[151,151,181,151,151,151,]),'operComp':([90,91,118,119,132,136,],[156,164,156,164,164,156,]),'values_space':([107,210,],[173,227,]),'else_statement':([223,],[235,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> puts','codigo',1,'p_codigo','sintax_analyzer.py',9),
  ('codigo -> gets','codigo',1,'p_codigo','sintax_analyzer.py',10),
  ('codigo -> estructurasDatos','codigo',1,'p_codigo','sintax_analyzer.py',11),
  ('codigo -> estructurasControl','codigo',1,'p_codigo','sintax_analyzer.py',12),
  ('codigo -> method_call','codigo',1,'p_codigo','sintax_analyzer.py',13),
  ('codigo -> block_assignment','codigo',1,'p_codigo','sintax_analyzer.py',14),
  ('codigo -> proc_assignment','codigo',1,'p_codigo','sintax_analyzer.py',15),
  ('codigo -> proc_call','codigo',1,'p_codigo','sintax_analyzer.py',16),
  ('codigo -> declaraciones','codigo',1,'p_codigo','sintax_analyzer.py',17),
  ('codigo -> arithmetic_production','codigo',1,'p_codigo','sintax_analyzer.py',18),
  ('estructurasDatos -> array','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',22),
  ('estructurasDatos -> var_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',23),
  ('estructurasDatos -> acceder_arreglo','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',24),
  ('estructurasDatos -> hash_declaration','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',25),
  ('estructurasDatos -> hash_access','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',26),
  ('estructurasDatos -> hash_operations','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',27),
  ('estructurasDatos -> set_expression','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',28),
  ('estructurasDatos -> set_operations','estructurasDatos',1,'p_estructurasDatos','sintax_analyzer.py',29),
  ('estructurasControl -> ifStatement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',33),
  ('estructurasControl -> while_statement','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',34),
  ('estructurasControl -> unless_expression','estructurasControl',1,'p_estructurasControl','sintax_analyzer.py',35),
  ('value -> var','value',1,'p_value','sintax_analyzer.py',40),
  ('value -> num','value',1,'p_value','sintax_analyzer.py',41),
  ('value -> STRING','value',1,'p_value','sintax_analyzer.py',42),
  ('value -> NIL','value',1,'p_value','sintax_analyzer.py',43),
  ('value -> SYMBOL','value',1,'p_value','sintax_analyzer.py',44),
  ('values_space -> value SPACE values_space','values_space',3,'p_values_space','sintax_analyzer.py',48),
  ('values_space -> value','values_space',1,'p_values_space','sintax_analyzer.py',49),
  ('values -> value','values',1,'p_values','sintax_analyzer.py',53),
  ('values -> value COMMA values','values',3,'p_values','sintax_analyzer.py',54),
  ('var -> LOCAL_VAR','var',1,'p_var','sintax_analyzer.py',58),
  ('var -> INSTANCE_VAR','var',1,'p_var','sintax_analyzer.py',59),
  ('var -> CLASS_VAR','var',1,'p_var','sintax_analyzer.py',60),
  ('var -> GLOBAL_VAR','var',1,'p_var','sintax_analyzer.py',61),
  ('var -> CONSTANT','var',1,'p_var','sintax_analyzer.py',62),
  ('num -> FLOAT','num',1,'p_num','sintax_analyzer.py',66),
  ('num -> INTEGER','num',1,'p_num','sintax_analyzer.py',67),
  ('gets -> GETS DOT CHOMP DOT TO_F','gets',5,'p_gets','sintax_analyzer.py',71),
  ('gets -> GETS DOT CHOMP DOT TO_I','gets',5,'p_gets','sintax_analyzer.py',72),
  ('gets -> GETS DOT CHOMP','gets',3,'p_gets','sintax_analyzer.py',73),
  ('puts -> PUT values','puts',2,'p_puts','sintax_analyzer.py',77),
  ('array -> array_explicito','array',1,'p_array','sintax_analyzer.py',86),
  ('array -> array_implicito','array',1,'p_array','sintax_analyzer.py',87),
  ('array -> array_creation','array',1,'p_array','sintax_analyzer.py',88),
  ('array -> newArray','array',1,'p_array','sintax_analyzer.py',89),
  ('array_explicito -> LEFT_COR values RIGHT_COR','array_explicito',3,'p_array_explicito','sintax_analyzer.py',93),
  ('array_explicito -> LEFT_COR RIGHT_COR','array_explicito',2,'p_array_explicito','sintax_analyzer.py',94),
  ('array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR','array_implicito',4,'p_array_implicito','sintax_analyzer.py',98),
  ('array_implicito -> PERCENTW LEFT_COR RIGHT_COR','array_implicito',3,'p_array_implicito','sintax_analyzer.py',99),
  ('array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR','array_creation',4,'p_array_creation','sintax_analyzer.py',103),
  ('newArray -> ARRAY DOT NEW','newArray',3,'p_newArray','sintax_analyzer.py',107),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR','newArray',6,'p_newArray','sintax_analyzer.py',108),
  ('newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR','newArray',8,'p_newArray','sintax_analyzer.py',109),
  ('var_arreglo -> var','var_arreglo',1,'p_var_arreglo','sintax_analyzer.py',113),
  ('var_arreglo -> var ASSIGN array','var_arreglo',3,'p_var_arreglo','sintax_analyzer.py',114),
  ('acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR','acceder_arreglo',4,'p_acceder_arreglo','sintax_analyzer.py',118),
  ('ifStatement -> IF condiciones NEWLINE codigo END_LOWER','ifStatement',5,'p_ifStatement','sintax_analyzer.py',123),
  ('ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER','ifStatement',7,'p_ifStatement','sintax_analyzer.py',124),
  ('condiciones -> condicion','condiciones',1,'p_condiciones','sintax_analyzer.py',128),
  ('condiciones -> condiciones conectores condiciones','condiciones',3,'p_condiciones','sintax_analyzer.py',129),
  ('conectores -> AND','conectores',1,'p_conectores','sintax_analyzer.py',133),
  ('conectores -> OR','conectores',1,'p_conectores','sintax_analyzer.py',134),
  ('conectores -> AND_RESERVED','conectores',1,'p_conectores','sintax_analyzer.py',135),
  ('conectores -> OR_RESERVED','conectores',1,'p_conectores','sintax_analyzer.py',136),
  ('condicion -> num operComp num','condicion',3,'p_condicion','sintax_analyzer.py',140),
  ('condicion -> var operComp num','condicion',3,'p_condicion','sintax_analyzer.py',141),
  ('condicion -> num operComp var','condicion',3,'p_condicion','sintax_analyzer.py',142),
  ('operComp -> GREATER','operComp',1,'p_operComp','sintax_analyzer.py',146),
  ('operComp -> LESS','operComp',1,'p_operComp','sintax_analyzer.py',147),
  ('operComp -> GREATER_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',148),
  ('operComp -> LESS_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',149),
  ('operComp -> EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',150),
  ('operComp -> NOT_EQUAL','operComp',1,'p_operComp','sintax_analyzer.py',151),
  ('operComp -> COMPARE','operComp',1,'p_operComp','sintax_analyzer.py',152),
  ('else_statement -> ELSE NEWLINE codigo','else_statement',3,'p_else_statement','sintax_analyzer.py',156),
  ('hash_declaration -> HASH LEFT_COR values RIGHT_COR','hash_declaration',4,'p_hash_declaration','sintax_analyzer.py',162),
  ('hash_declaration -> HASH LEFT_COR RIGHT_COR','hash_declaration',3,'p_hash_declaration','sintax_analyzer.py',163),
  ('hash_access -> var LEFT_COR value RIGHT_COR','hash_access',4,'p_hash_access','sintax_analyzer.py',167),
  ('hash_operations -> hash_access ASSIGN value','hash_operations',3,'p_hash_operations','sintax_analyzer.py',171),
  ('variable_declaration -> var ASSIGN value','variable_declaration',3,'p_variable_declaration','sintax_analyzer.py',176),
  ('store_conditional_result -> var ASSIGN condiciones','store_conditional_result',3,'p_store_conditional_result','sintax_analyzer.py',180),
  ('declare_data_structures -> variable_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',184),
  ('declare_data_structures -> array','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',185),
  ('declare_data_structures -> hash_declaration','declare_data_structures',1,'p_declare_data_structures','sintax_analyzer.py',186),
  ('while_statement -> WHILE condiciones COLON codigo','while_statement',4,'p_while_statement','sintax_analyzer.py',191),
  ('condition_with_connectors -> condiciones conectores condiciones','condition_with_connectors',3,'p_condition_with_connectors','sintax_analyzer.py',196),
  ('method_call -> var LEFTPAR values RIGHTPAR','method_call',4,'p_method_call','sintax_analyzer.py',201),
  ('method_call -> var LEFTPAR RIGHTPAR','method_call',3,'p_method_call','sintax_analyzer.py',202),
  ('print_statement -> PUT LEFTPAR values RIGHTPAR','print_statement',4,'p_print_statement','sintax_analyzer.py',206),
  ('boolean_expression -> expression GREATER expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',211),
  ('boolean_expression -> expression LESS expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',212),
  ('boolean_expression -> expression GREATER_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',213),
  ('boolean_expression -> expression LESS_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',214),
  ('boolean_expression -> expression EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',215),
  ('boolean_expression -> expression NOT_EQUAL expression','boolean_expression',3,'p_boolean_expression','sintax_analyzer.py',216),
  ('boolean_expression -> boolean_value','boolean_expression',1,'p_boolean_expression','sintax_analyzer.py',217),
  ('boolean_value -> TRUE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',221),
  ('boolean_value -> FALSE','boolean_value',1,'p_boolean_value','sintax_analyzer.py',222),
  ('expression -> INTEGER','expression',1,'p_expression','sintax_analyzer.py',226),
  ('expression -> FLOAT','expression',1,'p_expression','sintax_analyzer.py',227),
  ('expression -> variable','expression',1,'p_expression','sintax_analyzer.py',228),
  ('expression -> STRING','expression',1,'p_expression','sintax_analyzer.py',229),
  ('variable -> LOCAL_VAR','variable',1,'p_variable','sintax_analyzer.py',232),
  ('variable -> INSTANCE_VAR','variable',1,'p_variable','sintax_analyzer.py',233),
  ('variable -> CLASS_VAR','variable',1,'p_variable','sintax_analyzer.py',234),
  ('variable -> GLOBAL_VAR','variable',1,'p_variable','sintax_analyzer.py',235),
  ('variable -> CONSTANT','variable',1,'p_variable','sintax_analyzer.py',236),
  ('declaraciones -> variable_declaration','declaraciones',1,'p_declaraciones','sintax_analyzer.py',240),
  ('declaraciones -> store_conditional_result','declaraciones',1,'p_declaraciones','sintax_analyzer.py',241),
  ('declaraciones -> declare_data_structures','declaraciones',1,'p_declaraciones','sintax_analyzer.py',242),
  ('expresion -> puts','expresion',1,'p_expresion','sintax_analyzer.py',247),
  ('expresion -> gets','expresion',1,'p_expresion','sintax_analyzer.py',248),
  ('expresion -> print_statement','expresion',1,'p_expresion','sintax_analyzer.py',249),
  ('set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR','set_expression',8,'p_set_expression','sintax_analyzer.py',254),
  ('set_expression -> SET LEFT_COR values RIGHT_COR','set_expression',4,'p_set_expression','sintax_analyzer.py',255),
  ('set_operations -> set_expression','set_operations',1,'p_set_operations','sintax_analyzer.py',258),
  ('set_operations -> set_operations set_binary_operators set_expression','set_operations',3,'p_set_operations','sintax_analyzer.py',259),
  ('declare_data_structures -> LOCAL_VAR ASSIGN set_expression','declare_data_structures',3,'p_set_declaration','sintax_analyzer.py',262),
  ('set_binary_operators -> PLUS','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',265),
  ('set_binary_operators -> MINUS','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',266),
  ('set_binary_operators -> AMPERSAND','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',267),
  ('set_binary_operators -> PIPE','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',268),
  ('set_binary_operators -> CARET','set_binary_operators',1,'p_set_binary_operators','sintax_analyzer.py',269),
  ('unless_expression -> UNLESS boolean_expression THEN expresion END','unless_expression',5,'p_unless_expression','sintax_analyzer.py',272),
  ('unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END','unless_expression',7,'p_unless_expression','sintax_analyzer.py',273),
  ('expresion -> arithmetic_production','expresion',1,'p_arithmetic_expression','sintax_analyzer.py',276),
  ('arithmetic_production -> num','arithmetic_production',1,'p_arithmetic_production','sintax_analyzer.py',279),
  ('arithmetic_production -> var','arithmetic_production',1,'p_arithmetic_production','sintax_analyzer.py',280),
  ('arithmetic_production -> num arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','sintax_analyzer.py',281),
  ('arithmetic_production -> var arithmetic_operators arithmetic_production','arithmetic_production',3,'p_arithmetic_production','sintax_analyzer.py',282),
  ('arithmetic_operators -> PLUS','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',285),
  ('arithmetic_operators -> MINUS','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',286),
  ('arithmetic_operators -> MULTIPLY','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',287),
  ('arithmetic_operators -> DIVIDE','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',288),
  ('arithmetic_operators -> MODULO','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',289),
  ('arithmetic_operators -> EXPONENT','arithmetic_operators',1,'p_arithmetic_operators','sintax_analyzer.py',290),
  ('block_expression -> LBRACE expresion RBRACE','block_expression',3,'p_block_expression','sintax_analyzer.py',293),
  ('block_expression -> DO expresion END','block_expression',3,'p_block_expression','sintax_analyzer.py',294),
  ('block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE','block_expression',6,'p_block_expression','sintax_analyzer.py',295),
  ('block_expression -> DO PIPE LOCAL_VAR PIPE expresion END','block_expression',6,'p_block_expression','sintax_analyzer.py',296),
  ('block_assignment -> method_call block_expression','block_assignment',2,'p_block_assignment','sintax_analyzer.py',299),
  ('proc_expression -> PROC DOT NEW block_expression','proc_expression',4,'p_proc_expression','sintax_analyzer.py',302),
  ('proc_assignment -> LOCAL_VAR ASSIGN proc_expression','proc_assignment',3,'p_proc_assignment','sintax_analyzer.py',305),
  ('proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR','proc_call',6,'p_proc_call','sintax_analyzer.py',308),
  ('proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR','proc_call',5,'p_proc_call','sintax_analyzer.py',309),
  ('proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR','proc_call',4,'p_proc_call','sintax_analyzer.py',310),
  ('expresion -> condition_with_connectors','expresion',1,'p_condition_expr','sintax_analyzer.py',313),
]
