Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BEGIN
    BIN_INTEGER
    BOOLEAN
    BREAK
    CASE
    CASE_EQUAL
    CLASS
    DEF
    DEFINED
    DIVIDE_ASSIGN
    DOUBLE_QUOTE
    ELSIF
    EXPONENT_ASSIGN
    FOR
    HEX_INTEGER
    IN
    MINUS_ASSIGN
    MODULE
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NOT
    OCT_INTEGER
    PLUS_ASSIGN
    RANGEEX
    RANGEIN
    REDO
    RETURN
    SELF
    TAB
    UNTIL
    WHEN

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> puts
Rule 2     codigo -> gets
Rule 3     codigo -> estructurasDatos
Rule 4     codigo -> estructurasControl
Rule 5     codigo -> method_call
Rule 6     codigo -> block_assignment
Rule 7     codigo -> proc_assignment
Rule 8     codigo -> proc_call
Rule 9     codigo -> declaraciones
Rule 10    codigo -> expression
Rule 11    codigo -> to_string
Rule 12    estructurasDatos -> array
Rule 13    estructurasDatos -> acceder_arreglo
Rule 14    estructurasDatos -> hash_declaration
Rule 15    estructurasDatos -> hash_access
Rule 16    estructurasDatos -> hash_operations
Rule 17    estructurasDatos -> set_expression
Rule 18    estructurasDatos -> set_operations
Rule 19    estructurasControl -> ifStatement
Rule 20    estructurasControl -> while_statement
Rule 21    estructurasControl -> unless_expression
Rule 22    value -> num
Rule 23    value -> var
Rule 24    value -> STRING
Rule 25    value -> NIL
Rule 26    value -> SYMBOL
Rule 27    values_space -> value SPACE values_space
Rule 28    values_space -> value
Rule 29    values -> value
Rule 30    values -> value COMMA values
Rule 31    var -> LOCAL_VAR
Rule 32    var -> INSTANCE_VAR
Rule 33    var -> CLASS_VAR
Rule 34    var -> GLOBAL_VAR
Rule 35    num -> FLOAT
Rule 36    num -> INTEGER
Rule 37    gets -> GETS DOT CHOMP DOT TO_F
Rule 38    gets -> GETS DOT CHOMP DOT TO_I
Rule 39    gets -> GETS DOT CHOMP
Rule 40    puts -> PUT values
Rule 41    array -> array_explicito
Rule 42    array -> array_implicito
Rule 43    array -> array_creation
Rule 44    array -> newArray
Rule 45    var_arreglo -> LOCAL_VAR ASSIGN array
Rule 46    array_explicito -> LEFT_COR values RIGHT_COR
Rule 47    array_explicito -> LEFT_COR RIGHT_COR
Rule 48    array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR
Rule 49    array_implicito -> PERCENTW LEFT_COR RIGHT_COR
Rule 50    array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR
Rule 51    newArray -> ARRAY DOT NEW
Rule 52    newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
Rule 53    newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
Rule 54    acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR
Rule 55    ifStatement -> IF condiciones NEWLINE codigo END_LOWER
Rule 56    ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
Rule 57    condiciones -> condicion
Rule 58    condiciones -> condiciones conectores condiciones
Rule 59    conectores -> AND
Rule 60    conectores -> OR
Rule 61    conectores -> AND_RESERVED
Rule 62    conectores -> OR_RESERVED
Rule 63    condicion -> num operComp num
Rule 64    condicion -> var operComp num
Rule 65    condicion -> num operComp var
Rule 66    operComp -> GREATER
Rule 67    operComp -> LESS
Rule 68    operComp -> GREATER_EQUAL
Rule 69    operComp -> LESS_EQUAL
Rule 70    operComp -> EQUAL
Rule 71    operComp -> NOT_EQUAL
Rule 72    operComp -> COMPARE
Rule 73    else_statement -> ELSE NEWLINE codigo
Rule 74    to_string -> LOCAL_VAR DOT TO_S
Rule 75    concatenar_string -> STRING PLUS STRING
Rule 76    concatenar_string -> STRING PLUS LOCAL_VAR
Rule 77    concatenar_string -> LOCAL_VAR PLUS STRING
Rule 78    concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR
Rule 79    declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string
Rule 80    hash_declaration -> HASH LEFT_COR values RIGHT_COR
Rule 81    hash_declaration -> HASH LEFT_COR RIGHT_COR
Rule 82    hash_access -> var LEFT_COR value RIGHT_COR
Rule 83    hash_operations -> hash_access ASSIGN value
Rule 84    variable_declaration -> LOCAL_VAR ASSIGN value
Rule 85    store_conditional_result -> LOCAL_VAR ASSIGN condiciones
Rule 86    declare_data_structures -> var_arreglo
Rule 87    declare_data_structures -> hash_declaration
Rule 88    while_statement -> WHILE condiciones COLON codigo
Rule 89    condition_with_connectors -> condiciones conectores condiciones
Rule 90    method_call -> var LEFTPAR values RIGHTPAR
Rule 91    method_call -> var LEFTPAR RIGHTPAR
Rule 92    print_statement -> PUT LEFTPAR values RIGHTPAR
Rule 93    boolean_expression -> expression GREATER expression
Rule 94    boolean_expression -> expression LESS expression
Rule 95    boolean_expression -> expression GREATER_EQUAL expression
Rule 96    boolean_expression -> expression LESS_EQUAL expression
Rule 97    boolean_expression -> expression EQUAL expression
Rule 98    boolean_expression -> expression NOT_EQUAL expression
Rule 99    boolean_expression -> boolean_value
Rule 100   boolean_value -> TRUE
Rule 101   boolean_value -> FALSE
Rule 102   expression -> INTEGER
Rule 103   expression -> FLOAT
Rule 104   expression -> variable
Rule 105   expression -> STRING
Rule 106   variable -> LOCAL_VAR
Rule 107   variable -> INSTANCE_VAR
Rule 108   variable -> CLASS_VAR
Rule 109   variable -> GLOBAL_VAR
Rule 110   variable -> CONSTANT
Rule 111   declaraciones -> variable_declaration
Rule 112   declaraciones -> store_conditional_result
Rule 113   declaraciones -> declare_data_structures
Rule 114   declaraciones -> var_arreglo
Rule 115   declaraciones -> LOCAL_VAR ASSIGN arithmetic_production
Rule 116   declaraciones -> declaracion_concatenar_string
Rule 117   expresion -> puts
Rule 118   expresion -> gets
Rule 119   expresion -> print_statement
Rule 120   set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
Rule 121   set_expression -> SET LEFT_COR values RIGHT_COR
Rule 122   set_operations -> set_expression
Rule 123   set_operations -> set_operations set_binary_operators set_expression
Rule 124   declare_data_structures -> LOCAL_VAR ASSIGN set_expression
Rule 125   set_binary_operators -> PLUS
Rule 126   set_binary_operators -> MINUS
Rule 127   set_binary_operators -> AMPERSAND
Rule 128   set_binary_operators -> PIPE
Rule 129   set_binary_operators -> CARET
Rule 130   unless_expression -> UNLESS boolean_expression THEN expresion END
Rule 131   unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END
Rule 132   arithmetic_production -> num
Rule 133   arithmetic_production -> LOCAL_VAR
Rule 134   arithmetic_production -> num arithmetic_operators arithmetic_production
Rule 135   arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production
Rule 136   arithmetic_operators -> PLUS
Rule 137   arithmetic_operators -> MINUS
Rule 138   arithmetic_operators -> MULTIPLY
Rule 139   arithmetic_operators -> DIVIDE
Rule 140   arithmetic_operators -> MODULO
Rule 141   arithmetic_operators -> EXPONENT
Rule 142   block_expression -> LBRACE expresion RBRACE
Rule 143   block_expression -> DO expresion END
Rule 144   block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
Rule 145   block_expression -> DO PIPE LOCAL_VAR PIPE expresion END
Rule 146   block_assignment -> method_call block_expression
Rule 147   proc_expression -> PROC DOT NEW block_expression
Rule 148   proc_assignment -> LOCAL_VAR ASSIGN proc_expression
Rule 149   proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
Rule 150   proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR
Rule 151   proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR
Rule 152   expresion -> condition_with_connectors

Terminals, with rules where they appear

AMPERSAND            : 127
AND                  : 59
AND_RESERVED         : 61
ARRAY                : 50 51 52 53
ASSIGN               : 45 79 83 84 85 115 124 148
BACKSLASH            : 
BEGIN                : 
BIN_INTEGER          : 
BOOLEAN              : 
BREAK                : 
CALL                 : 149
CARET                : 129
CASE                 : 
CASE_EQUAL           : 
CHOMP                : 37 38 39
CLASS                : 
CLASS_VAR            : 33 108
COLON                : 88
COMMA                : 30 53
COMPARE              : 72
CONSTANT             : 110
DEF                  : 
DEFINED              : 
DIVIDE               : 139
DIVIDE_ASSIGN        : 
DO                   : 143 145
DOT                  : 37 37 38 38 39 51 52 53 74 120 147 149 150
DOUBLE_QUOTE         : 
ELSE                 : 73 131
ELSIF                : 
END                  : 130 131 143 145
END_LOWER            : 55 56
EQUAL                : 70 97
EXPONENT             : 141
EXPONENT_ASSIGN      : 
FALSE                : 101
FLOAT                : 35 103
FOR                  : 
GETS                 : 37 38 39
GLOBAL_VAR           : 34 109
GREATER              : 66 93
GREATER_EQUAL        : 68 95
HASH                 : 80 81
HEX_INTEGER          : 
IF                   : 55 56
IN                   : 
INSTANCE_VAR         : 32 107
INTEGER              : 36 52 53 54 102
LBRACE               : 142 144
LEFTPAR              : 50 52 53 90 91 92 120 149 150
LEFT_COR             : 46 47 48 49 54 80 81 82 120 121 151
LESS                 : 67 94
LESS_EQUAL           : 69 96
LOCAL_VAR            : 31 45 74 76 77 78 78 79 84 85 106 115 124 133 135 144 145 148 149 150 151
MINUS                : 126 137
MINUS_ASSIGN         : 
MODULE               : 
MODULO               : 140
MODULO_ASSIGN        : 
MULTIPLY             : 138
MULTIPLY_ASSIGN      : 
NEW                  : 51 52 53 120 147
NEWLINE              : 55 56 56 73
NIL                  : 25
NOT                  : 
NOT_EQUAL            : 71 98
OCT_INTEGER          : 
OR                   : 60
OR_RESERVED          : 62
PERCENTW             : 48 49
PIPE                 : 128 144 144 145 145
PLUS                 : 75 76 77 78 125 136
PLUS_ASSIGN          : 
PROC                 : 147
PUT                  : 40 92
RANGEEX              : 
RANGEIN              : 
RBRACE               : 142 144
REDO                 : 
RETURN               : 
RIGHTPAR             : 50 52 53 90 91 92 120 149 150
RIGHT_COR            : 46 47 48 49 54 80 81 82 120 121 151
SELF                 : 
SET                  : 120 121
SPACE                : 27
STRING               : 24 75 75 76 77 105
SYMBOL               : 26
TAB                  : 
THEN                 : 130 131
TO_F                 : 37
TO_I                 : 38
TO_S                 : 74
TRUE                 : 100
UNLESS               : 130 131
UNTIL                : 
WHEN                 : 
WHILE                : 88
error                : 

Nonterminals, with rules where they appear

acceder_arreglo      : 13
arithmetic_operators : 134 135
arithmetic_production : 115 134 135
array                : 12 45
array_creation       : 43
array_explicito      : 41 50
array_implicito      : 42
block_assignment     : 6
block_expression     : 146 147
boolean_expression   : 130 131
boolean_value        : 99
codigo               : 55 56 73 88 0
concatenar_string    : 79
condicion            : 57
condiciones          : 55 56 58 58 85 88 89 89
condition_with_connectors : 152
conectores           : 58 89
declaracion_concatenar_string : 116
declaraciones        : 9
declare_data_structures : 113
else_statement       : 56
estructurasControl   : 4
estructurasDatos     : 3
expresion            : 130 131 131 142 143 144 145
expression           : 10 93 93 94 94 95 95 96 96 97 97 98 98
gets                 : 2 118
hash_access          : 15 83
hash_declaration     : 14 87
hash_operations      : 16
ifStatement          : 19
method_call          : 5 146
newArray             : 44
num                  : 22 63 63 64 65 132 134
operComp             : 63 64 65
print_statement      : 119
proc_assignment      : 7
proc_call            : 8
proc_expression      : 148
puts                 : 1 117
set_binary_operators : 123
set_expression       : 17 122 123 124
set_operations       : 18 123
store_conditional_result : 112
to_string            : 11
unless_expression    : 21
value                : 27 28 29 30 82 83 84
values               : 30 40 46 53 80 90 92 120 121 149 150 151
values_space         : 27 48
var                  : 23 64 65 82 90 91
var_arreglo          : 54 86 114
variable             : 104
variable_declaration : 111
while_statement      : 20

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (12) estructurasDatos -> . array
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (90) method_call -> . var LEFTPAR values RIGHTPAR
    (91) method_call -> . var LEFTPAR RIGHTPAR
    (146) block_assignment -> . method_call block_expression
    (148) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (149) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (151) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (111) declaraciones -> . variable_declaration
    (112) declaraciones -> . store_conditional_result
    (113) declaraciones -> . declare_data_structures
    (114) declaraciones -> . var_arreglo
    (115) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (116) declaraciones -> . declaracion_concatenar_string
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (74) to_string -> . LOCAL_VAR DOT TO_S
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (80) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (81) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (82) hash_access -> . var LEFT_COR value RIGHT_COR
    (83) hash_operations -> . hash_access ASSIGN value
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR
    (122) set_operations -> . set_expression
    (123) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (88) while_statement -> . WHILE condiciones COLON codigo
    (130) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (131) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (84) variable_declaration -> . LOCAL_VAR ASSIGN value
    (85) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (86) declare_data_structures -> . var_arreglo
    (87) declare_data_structures -> . hash_declaration
    (124) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (79) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 13
    GETS            shift and go to state 14
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    HASH            shift and go to state 41
    SET             shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    UNLESS          shift and go to state 45
    INSTANCE_VAR    shift and go to state 46
    CLASS_VAR       shift and go to state 47
    GLOBAL_VAR      shift and go to state 48
    CONSTANT        shift and go to state 49
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 50
    ARRAY           shift and go to state 51

    codigo                         shift and go to state 1
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    array                          shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    array_explicito                shift and go to state 37
    array_implicito                shift and go to state 38
    array_creation                 shift and go to state 39
    newArray                       shift and go to state 40

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> puts .

    $end            reduce using rule 1 (codigo -> puts .)
    END_LOWER       reduce using rule 1 (codigo -> puts .)
    NEWLINE         reduce using rule 1 (codigo -> puts .)


state 3

    (2) codigo -> gets .

    $end            reduce using rule 2 (codigo -> gets .)
    END_LOWER       reduce using rule 2 (codigo -> gets .)
    NEWLINE         reduce using rule 2 (codigo -> gets .)


state 4

    (3) codigo -> estructurasDatos .

    $end            reduce using rule 3 (codigo -> estructurasDatos .)
    END_LOWER       reduce using rule 3 (codigo -> estructurasDatos .)
    NEWLINE         reduce using rule 3 (codigo -> estructurasDatos .)


state 5

    (4) codigo -> estructurasControl .

    $end            reduce using rule 4 (codigo -> estructurasControl .)
    END_LOWER       reduce using rule 4 (codigo -> estructurasControl .)
    NEWLINE         reduce using rule 4 (codigo -> estructurasControl .)


state 6

    (5) codigo -> method_call .
    (146) block_assignment -> method_call . block_expression
    (142) block_expression -> . LBRACE expresion RBRACE
    (143) block_expression -> . DO expresion END
    (144) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (145) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    $end            reduce using rule 5 (codigo -> method_call .)
    END_LOWER       reduce using rule 5 (codigo -> method_call .)
    NEWLINE         reduce using rule 5 (codigo -> method_call .)
    LBRACE          shift and go to state 53
    DO              shift and go to state 54

    block_expression               shift and go to state 52

state 7

    (6) codigo -> block_assignment .

    $end            reduce using rule 6 (codigo -> block_assignment .)
    END_LOWER       reduce using rule 6 (codigo -> block_assignment .)
    NEWLINE         reduce using rule 6 (codigo -> block_assignment .)


state 8

    (7) codigo -> proc_assignment .

    $end            reduce using rule 7 (codigo -> proc_assignment .)
    END_LOWER       reduce using rule 7 (codigo -> proc_assignment .)
    NEWLINE         reduce using rule 7 (codigo -> proc_assignment .)


state 9

    (8) codigo -> proc_call .

    $end            reduce using rule 8 (codigo -> proc_call .)
    END_LOWER       reduce using rule 8 (codigo -> proc_call .)
    NEWLINE         reduce using rule 8 (codigo -> proc_call .)


state 10

    (9) codigo -> declaraciones .

    $end            reduce using rule 9 (codigo -> declaraciones .)
    END_LOWER       reduce using rule 9 (codigo -> declaraciones .)
    NEWLINE         reduce using rule 9 (codigo -> declaraciones .)


state 11

    (10) codigo -> expression .

    $end            reduce using rule 10 (codigo -> expression .)
    END_LOWER       reduce using rule 10 (codigo -> expression .)
    NEWLINE         reduce using rule 10 (codigo -> expression .)


state 12

    (11) codigo -> to_string .

    $end            reduce using rule 11 (codigo -> to_string .)
    END_LOWER       reduce using rule 11 (codigo -> to_string .)
    NEWLINE         reduce using rule 11 (codigo -> to_string .)


state 13

    (40) puts -> PUT . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 55
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 14

    (37) gets -> GETS . DOT CHOMP DOT TO_F
    (38) gets -> GETS . DOT CHOMP DOT TO_I
    (39) gets -> GETS . DOT CHOMP

    DOT             shift and go to state 68


state 15

    (12) estructurasDatos -> array .

    $end            reduce using rule 12 (estructurasDatos -> array .)
    END_LOWER       reduce using rule 12 (estructurasDatos -> array .)
    NEWLINE         reduce using rule 12 (estructurasDatos -> array .)


state 16

    (13) estructurasDatos -> acceder_arreglo .

    $end            reduce using rule 13 (estructurasDatos -> acceder_arreglo .)
    END_LOWER       reduce using rule 13 (estructurasDatos -> acceder_arreglo .)
    NEWLINE         reduce using rule 13 (estructurasDatos -> acceder_arreglo .)


state 17

    (14) estructurasDatos -> hash_declaration .
    (87) declare_data_structures -> hash_declaration .

  ! reduce/reduce conflict for $end resolved using rule 14 (estructurasDatos -> hash_declaration .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 14 (estructurasDatos -> hash_declaration .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 14 (estructurasDatos -> hash_declaration .)
    $end            reduce using rule 14 (estructurasDatos -> hash_declaration .)
    END_LOWER       reduce using rule 14 (estructurasDatos -> hash_declaration .)
    NEWLINE         reduce using rule 14 (estructurasDatos -> hash_declaration .)

  ! $end            [ reduce using rule 87 (declare_data_structures -> hash_declaration .) ]
  ! END_LOWER       [ reduce using rule 87 (declare_data_structures -> hash_declaration .) ]
  ! NEWLINE         [ reduce using rule 87 (declare_data_structures -> hash_declaration .) ]


state 18

    (15) estructurasDatos -> hash_access .
    (83) hash_operations -> hash_access . ASSIGN value

    $end            reduce using rule 15 (estructurasDatos -> hash_access .)
    END_LOWER       reduce using rule 15 (estructurasDatos -> hash_access .)
    NEWLINE         reduce using rule 15 (estructurasDatos -> hash_access .)
    ASSIGN          shift and go to state 69


state 19

    (16) estructurasDatos -> hash_operations .

    $end            reduce using rule 16 (estructurasDatos -> hash_operations .)
    END_LOWER       reduce using rule 16 (estructurasDatos -> hash_operations .)
    NEWLINE         reduce using rule 16 (estructurasDatos -> hash_operations .)


state 20

    (17) estructurasDatos -> set_expression .
    (122) set_operations -> set_expression .

  ! reduce/reduce conflict for $end resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (estructurasDatos -> set_expression .)
    $end            reduce using rule 17 (estructurasDatos -> set_expression .)
    END_LOWER       reduce using rule 17 (estructurasDatos -> set_expression .)
    NEWLINE         reduce using rule 17 (estructurasDatos -> set_expression .)
    PLUS            reduce using rule 122 (set_operations -> set_expression .)
    MINUS           reduce using rule 122 (set_operations -> set_expression .)
    AMPERSAND       reduce using rule 122 (set_operations -> set_expression .)
    PIPE            reduce using rule 122 (set_operations -> set_expression .)
    CARET           reduce using rule 122 (set_operations -> set_expression .)

  ! $end            [ reduce using rule 122 (set_operations -> set_expression .) ]
  ! END_LOWER       [ reduce using rule 122 (set_operations -> set_expression .) ]
  ! NEWLINE         [ reduce using rule 122 (set_operations -> set_expression .) ]


state 21

    (18) estructurasDatos -> set_operations .
    (123) set_operations -> set_operations . set_binary_operators set_expression
    (125) set_binary_operators -> . PLUS
    (126) set_binary_operators -> . MINUS
    (127) set_binary_operators -> . AMPERSAND
    (128) set_binary_operators -> . PIPE
    (129) set_binary_operators -> . CARET

    $end            reduce using rule 18 (estructurasDatos -> set_operations .)
    END_LOWER       reduce using rule 18 (estructurasDatos -> set_operations .)
    NEWLINE         reduce using rule 18 (estructurasDatos -> set_operations .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    AMPERSAND       shift and go to state 73
    PIPE            shift and go to state 74
    CARET           shift and go to state 75

    set_binary_operators           shift and go to state 70

state 22

    (19) estructurasControl -> ifStatement .

    $end            reduce using rule 19 (estructurasControl -> ifStatement .)
    END_LOWER       reduce using rule 19 (estructurasControl -> ifStatement .)
    NEWLINE         reduce using rule 19 (estructurasControl -> ifStatement .)


state 23

    (20) estructurasControl -> while_statement .

    $end            reduce using rule 20 (estructurasControl -> while_statement .)
    END_LOWER       reduce using rule 20 (estructurasControl -> while_statement .)
    NEWLINE         reduce using rule 20 (estructurasControl -> while_statement .)


state 24

    (21) estructurasControl -> unless_expression .

    $end            reduce using rule 21 (estructurasControl -> unless_expression .)
    END_LOWER       reduce using rule 21 (estructurasControl -> unless_expression .)
    NEWLINE         reduce using rule 21 (estructurasControl -> unless_expression .)


state 25

    (90) method_call -> var . LEFTPAR values RIGHTPAR
    (91) method_call -> var . LEFTPAR RIGHTPAR
    (82) hash_access -> var . LEFT_COR value RIGHT_COR

    LEFTPAR         shift and go to state 76
    LEFT_COR        shift and go to state 77


state 26

    (148) proc_assignment -> LOCAL_VAR . ASSIGN proc_expression
    (149) proc_call -> LOCAL_VAR . DOT CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> LOCAL_VAR . DOT LEFTPAR values RIGHTPAR
    (151) proc_call -> LOCAL_VAR . LEFT_COR values RIGHT_COR
    (115) declaraciones -> LOCAL_VAR . ASSIGN arithmetic_production
    (74) to_string -> LOCAL_VAR . DOT TO_S
    (31) var -> LOCAL_VAR .
    (84) variable_declaration -> LOCAL_VAR . ASSIGN value
    (85) store_conditional_result -> LOCAL_VAR . ASSIGN condiciones
    (124) declare_data_structures -> LOCAL_VAR . ASSIGN set_expression
    (45) var_arreglo -> LOCAL_VAR . ASSIGN array
    (79) declaracion_concatenar_string -> LOCAL_VAR . ASSIGN concatenar_string
    (106) variable -> LOCAL_VAR .

  ! shift/reduce conflict for LEFT_COR resolved as shift
    ASSIGN          shift and go to state 78
    DOT             shift and go to state 79
    LEFT_COR        shift and go to state 80
    LEFTPAR         reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 106 (variable -> LOCAL_VAR .)
    END_LOWER       reduce using rule 106 (variable -> LOCAL_VAR .)
    NEWLINE         reduce using rule 106 (variable -> LOCAL_VAR .)

  ! LEFT_COR        [ reduce using rule 31 (var -> LOCAL_VAR .) ]


state 27

    (46) array_explicito -> LEFT_COR . values RIGHT_COR
    (47) array_explicito -> LEFT_COR . RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHT_COR       shift and go to state 82
    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 81
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 28

    (111) declaraciones -> variable_declaration .

    $end            reduce using rule 111 (declaraciones -> variable_declaration .)
    END_LOWER       reduce using rule 111 (declaraciones -> variable_declaration .)
    NEWLINE         reduce using rule 111 (declaraciones -> variable_declaration .)


state 29

    (112) declaraciones -> store_conditional_result .

    $end            reduce using rule 112 (declaraciones -> store_conditional_result .)
    END_LOWER       reduce using rule 112 (declaraciones -> store_conditional_result .)
    NEWLINE         reduce using rule 112 (declaraciones -> store_conditional_result .)


state 30

    (113) declaraciones -> declare_data_structures .

    $end            reduce using rule 113 (declaraciones -> declare_data_structures .)
    END_LOWER       reduce using rule 113 (declaraciones -> declare_data_structures .)
    NEWLINE         reduce using rule 113 (declaraciones -> declare_data_structures .)


state 31

    (114) declaraciones -> var_arreglo .
    (54) acceder_arreglo -> var_arreglo . LEFT_COR INTEGER RIGHT_COR
    (86) declare_data_structures -> var_arreglo .

  ! reduce/reduce conflict for $end resolved using rule 86 (declare_data_structures -> var_arreglo .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 86 (declare_data_structures -> var_arreglo .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 86 (declare_data_structures -> var_arreglo .)
    LEFT_COR        shift and go to state 83
    $end            reduce using rule 86 (declare_data_structures -> var_arreglo .)
    END_LOWER       reduce using rule 86 (declare_data_structures -> var_arreglo .)
    NEWLINE         reduce using rule 86 (declare_data_structures -> var_arreglo .)

  ! $end            [ reduce using rule 114 (declaraciones -> var_arreglo .) ]
  ! END_LOWER       [ reduce using rule 114 (declaraciones -> var_arreglo .) ]
  ! NEWLINE         [ reduce using rule 114 (declaraciones -> var_arreglo .) ]


state 32

    (116) declaraciones -> declaracion_concatenar_string .

    $end            reduce using rule 116 (declaraciones -> declaracion_concatenar_string .)
    END_LOWER       reduce using rule 116 (declaraciones -> declaracion_concatenar_string .)
    NEWLINE         reduce using rule 116 (declaraciones -> declaracion_concatenar_string .)


state 33

    (102) expression -> INTEGER .

    $end            reduce using rule 102 (expression -> INTEGER .)
    GREATER         reduce using rule 102 (expression -> INTEGER .)
    LESS            reduce using rule 102 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 102 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 102 (expression -> INTEGER .)
    EQUAL           reduce using rule 102 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 102 (expression -> INTEGER .)
    END_LOWER       reduce using rule 102 (expression -> INTEGER .)
    NEWLINE         reduce using rule 102 (expression -> INTEGER .)
    THEN            reduce using rule 102 (expression -> INTEGER .)


state 34

    (103) expression -> FLOAT .

    $end            reduce using rule 103 (expression -> FLOAT .)
    GREATER         reduce using rule 103 (expression -> FLOAT .)
    LESS            reduce using rule 103 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 103 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 103 (expression -> FLOAT .)
    EQUAL           reduce using rule 103 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 103 (expression -> FLOAT .)
    END_LOWER       reduce using rule 103 (expression -> FLOAT .)
    NEWLINE         reduce using rule 103 (expression -> FLOAT .)
    THEN            reduce using rule 103 (expression -> FLOAT .)


state 35

    (104) expression -> variable .

    $end            reduce using rule 104 (expression -> variable .)
    GREATER         reduce using rule 104 (expression -> variable .)
    LESS            reduce using rule 104 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 104 (expression -> variable .)
    LESS_EQUAL      reduce using rule 104 (expression -> variable .)
    EQUAL           reduce using rule 104 (expression -> variable .)
    NOT_EQUAL       reduce using rule 104 (expression -> variable .)
    END_LOWER       reduce using rule 104 (expression -> variable .)
    NEWLINE         reduce using rule 104 (expression -> variable .)
    THEN            reduce using rule 104 (expression -> variable .)


state 36

    (105) expression -> STRING .

    $end            reduce using rule 105 (expression -> STRING .)
    GREATER         reduce using rule 105 (expression -> STRING .)
    LESS            reduce using rule 105 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 105 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 105 (expression -> STRING .)
    EQUAL           reduce using rule 105 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 105 (expression -> STRING .)
    END_LOWER       reduce using rule 105 (expression -> STRING .)
    NEWLINE         reduce using rule 105 (expression -> STRING .)
    THEN            reduce using rule 105 (expression -> STRING .)


state 37

    (41) array -> array_explicito .

    $end            reduce using rule 41 (array -> array_explicito .)
    LEFT_COR        reduce using rule 41 (array -> array_explicito .)
    END_LOWER       reduce using rule 41 (array -> array_explicito .)
    NEWLINE         reduce using rule 41 (array -> array_explicito .)


state 38

    (42) array -> array_implicito .

    $end            reduce using rule 42 (array -> array_implicito .)
    LEFT_COR        reduce using rule 42 (array -> array_implicito .)
    END_LOWER       reduce using rule 42 (array -> array_implicito .)
    NEWLINE         reduce using rule 42 (array -> array_implicito .)


state 39

    (43) array -> array_creation .

    $end            reduce using rule 43 (array -> array_creation .)
    LEFT_COR        reduce using rule 43 (array -> array_creation .)
    END_LOWER       reduce using rule 43 (array -> array_creation .)
    NEWLINE         reduce using rule 43 (array -> array_creation .)


state 40

    (44) array -> newArray .

    $end            reduce using rule 44 (array -> newArray .)
    LEFT_COR        reduce using rule 44 (array -> newArray .)
    END_LOWER       reduce using rule 44 (array -> newArray .)
    NEWLINE         reduce using rule 44 (array -> newArray .)


state 41

    (80) hash_declaration -> HASH . LEFT_COR values RIGHT_COR
    (81) hash_declaration -> HASH . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 84


state 42

    (120) set_expression -> SET . DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> SET . LEFT_COR values RIGHT_COR

    DOT             shift and go to state 85
    LEFT_COR        shift and go to state 86


state 43

    (55) ifStatement -> IF . condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> IF . condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    condiciones                    shift and go to state 87
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 44

    (88) while_statement -> WHILE . condiciones COLON codigo
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    condiciones                    shift and go to state 91
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 45

    (130) unless_expression -> UNLESS . boolean_expression THEN expresion END
    (131) unless_expression -> UNLESS . boolean_expression THEN expresion ELSE expresion END
    (93) boolean_expression -> . expression GREATER expression
    (94) boolean_expression -> . expression LESS expression
    (95) boolean_expression -> . expression GREATER_EQUAL expression
    (96) boolean_expression -> . expression LESS_EQUAL expression
    (97) boolean_expression -> . expression EQUAL expression
    (98) boolean_expression -> . expression NOT_EQUAL expression
    (99) boolean_expression -> . boolean_value
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (100) boolean_value -> . TRUE
    (101) boolean_value -> . FALSE
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    TRUE            shift and go to state 95
    FALSE           shift and go to state 96
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    boolean_expression             shift and go to state 92
    expression                     shift and go to state 93
    boolean_value                  shift and go to state 94
    variable                       shift and go to state 35

state 46

    (32) var -> INSTANCE_VAR .
    (107) variable -> INSTANCE_VAR .

    LEFTPAR         reduce using rule 32 (var -> INSTANCE_VAR .)
    LEFT_COR        reduce using rule 32 (var -> INSTANCE_VAR .)
    $end            reduce using rule 107 (variable -> INSTANCE_VAR .)
    END_LOWER       reduce using rule 107 (variable -> INSTANCE_VAR .)
    NEWLINE         reduce using rule 107 (variable -> INSTANCE_VAR .)


state 47

    (33) var -> CLASS_VAR .
    (108) variable -> CLASS_VAR .

    LEFTPAR         reduce using rule 33 (var -> CLASS_VAR .)
    LEFT_COR        reduce using rule 33 (var -> CLASS_VAR .)
    $end            reduce using rule 108 (variable -> CLASS_VAR .)
    END_LOWER       reduce using rule 108 (variable -> CLASS_VAR .)
    NEWLINE         reduce using rule 108 (variable -> CLASS_VAR .)


state 48

    (34) var -> GLOBAL_VAR .
    (109) variable -> GLOBAL_VAR .

    LEFTPAR         reduce using rule 34 (var -> GLOBAL_VAR .)
    LEFT_COR        reduce using rule 34 (var -> GLOBAL_VAR .)
    $end            reduce using rule 109 (variable -> GLOBAL_VAR .)
    END_LOWER       reduce using rule 109 (variable -> GLOBAL_VAR .)
    NEWLINE         reduce using rule 109 (variable -> GLOBAL_VAR .)


state 49

    (110) variable -> CONSTANT .

    $end            reduce using rule 110 (variable -> CONSTANT .)
    GREATER         reduce using rule 110 (variable -> CONSTANT .)
    LESS            reduce using rule 110 (variable -> CONSTANT .)
    GREATER_EQUAL   reduce using rule 110 (variable -> CONSTANT .)
    LESS_EQUAL      reduce using rule 110 (variable -> CONSTANT .)
    EQUAL           reduce using rule 110 (variable -> CONSTANT .)
    NOT_EQUAL       reduce using rule 110 (variable -> CONSTANT .)
    END_LOWER       reduce using rule 110 (variable -> CONSTANT .)
    NEWLINE         reduce using rule 110 (variable -> CONSTANT .)
    THEN            reduce using rule 110 (variable -> CONSTANT .)


state 50

    (48) array_implicito -> PERCENTW . LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> PERCENTW . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 101


state 51

    (50) array_creation -> ARRAY . LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> ARRAY . DOT NEW
    (52) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFTPAR         shift and go to state 102
    DOT             shift and go to state 103


state 52

    (146) block_assignment -> method_call block_expression .

    $end            reduce using rule 146 (block_assignment -> method_call block_expression .)
    END_LOWER       reduce using rule 146 (block_assignment -> method_call block_expression .)
    NEWLINE         reduce using rule 146 (block_assignment -> method_call block_expression .)


state 53

    (142) block_expression -> LBRACE . expresion RBRACE
    (144) block_expression -> LBRACE . PIPE LOCAL_VAR PIPE expresion RBRACE
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PIPE            shift and go to state 105
    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 104
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 54

    (143) block_expression -> DO . expresion END
    (145) block_expression -> DO . PIPE LOCAL_VAR PIPE expresion END
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PIPE            shift and go to state 113
    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 112
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 55

    (40) puts -> PUT values .

    $end            reduce using rule 40 (puts -> PUT values .)
    RBRACE          reduce using rule 40 (puts -> PUT values .)
    END             reduce using rule 40 (puts -> PUT values .)
    END_LOWER       reduce using rule 40 (puts -> PUT values .)
    NEWLINE         reduce using rule 40 (puts -> PUT values .)
    ELSE            reduce using rule 40 (puts -> PUT values .)


state 56

    (29) values -> value .
    (30) values -> value . COMMA values

    $end            reduce using rule 29 (values -> value .)
    END_LOWER       reduce using rule 29 (values -> value .)
    NEWLINE         reduce using rule 29 (values -> value .)
    RIGHT_COR       reduce using rule 29 (values -> value .)
    RIGHTPAR        reduce using rule 29 (values -> value .)
    RBRACE          reduce using rule 29 (values -> value .)
    END             reduce using rule 29 (values -> value .)
    ELSE            reduce using rule 29 (values -> value .)
    COMMA           shift and go to state 114


state 57

    (22) value -> num .

    COMMA           reduce using rule 22 (value -> num .)
    $end            reduce using rule 22 (value -> num .)
    END_LOWER       reduce using rule 22 (value -> num .)
    NEWLINE         reduce using rule 22 (value -> num .)
    RIGHT_COR       reduce using rule 22 (value -> num .)
    RIGHTPAR        reduce using rule 22 (value -> num .)
    SPACE           reduce using rule 22 (value -> num .)
    RBRACE          reduce using rule 22 (value -> num .)
    END             reduce using rule 22 (value -> num .)
    ELSE            reduce using rule 22 (value -> num .)


state 58

    (23) value -> var .

    COMMA           reduce using rule 23 (value -> var .)
    $end            reduce using rule 23 (value -> var .)
    END_LOWER       reduce using rule 23 (value -> var .)
    NEWLINE         reduce using rule 23 (value -> var .)
    RIGHT_COR       reduce using rule 23 (value -> var .)
    RIGHTPAR        reduce using rule 23 (value -> var .)
    SPACE           reduce using rule 23 (value -> var .)
    RBRACE          reduce using rule 23 (value -> var .)
    END             reduce using rule 23 (value -> var .)
    ELSE            reduce using rule 23 (value -> var .)


state 59

    (24) value -> STRING .

    COMMA           reduce using rule 24 (value -> STRING .)
    $end            reduce using rule 24 (value -> STRING .)
    END_LOWER       reduce using rule 24 (value -> STRING .)
    NEWLINE         reduce using rule 24 (value -> STRING .)
    RIGHT_COR       reduce using rule 24 (value -> STRING .)
    RIGHTPAR        reduce using rule 24 (value -> STRING .)
    SPACE           reduce using rule 24 (value -> STRING .)
    RBRACE          reduce using rule 24 (value -> STRING .)
    END             reduce using rule 24 (value -> STRING .)
    ELSE            reduce using rule 24 (value -> STRING .)


state 60

    (25) value -> NIL .

    COMMA           reduce using rule 25 (value -> NIL .)
    $end            reduce using rule 25 (value -> NIL .)
    END_LOWER       reduce using rule 25 (value -> NIL .)
    NEWLINE         reduce using rule 25 (value -> NIL .)
    RIGHT_COR       reduce using rule 25 (value -> NIL .)
    RIGHTPAR        reduce using rule 25 (value -> NIL .)
    SPACE           reduce using rule 25 (value -> NIL .)
    RBRACE          reduce using rule 25 (value -> NIL .)
    END             reduce using rule 25 (value -> NIL .)
    ELSE            reduce using rule 25 (value -> NIL .)


state 61

    (26) value -> SYMBOL .

    COMMA           reduce using rule 26 (value -> SYMBOL .)
    $end            reduce using rule 26 (value -> SYMBOL .)
    END_LOWER       reduce using rule 26 (value -> SYMBOL .)
    NEWLINE         reduce using rule 26 (value -> SYMBOL .)
    RIGHT_COR       reduce using rule 26 (value -> SYMBOL .)
    RIGHTPAR        reduce using rule 26 (value -> SYMBOL .)
    SPACE           reduce using rule 26 (value -> SYMBOL .)
    RBRACE          reduce using rule 26 (value -> SYMBOL .)
    END             reduce using rule 26 (value -> SYMBOL .)
    ELSE            reduce using rule 26 (value -> SYMBOL .)


state 62

    (35) num -> FLOAT .

    COMMA           reduce using rule 35 (num -> FLOAT .)
    $end            reduce using rule 35 (num -> FLOAT .)
    END_LOWER       reduce using rule 35 (num -> FLOAT .)
    NEWLINE         reduce using rule 35 (num -> FLOAT .)
    RIGHT_COR       reduce using rule 35 (num -> FLOAT .)
    GREATER         reduce using rule 35 (num -> FLOAT .)
    LESS            reduce using rule 35 (num -> FLOAT .)
    GREATER_EQUAL   reduce using rule 35 (num -> FLOAT .)
    LESS_EQUAL      reduce using rule 35 (num -> FLOAT .)
    EQUAL           reduce using rule 35 (num -> FLOAT .)
    NOT_EQUAL       reduce using rule 35 (num -> FLOAT .)
    COMPARE         reduce using rule 35 (num -> FLOAT .)
    RIGHTPAR        reduce using rule 35 (num -> FLOAT .)
    PLUS            reduce using rule 35 (num -> FLOAT .)
    MINUS           reduce using rule 35 (num -> FLOAT .)
    MULTIPLY        reduce using rule 35 (num -> FLOAT .)
    DIVIDE          reduce using rule 35 (num -> FLOAT .)
    MODULO          reduce using rule 35 (num -> FLOAT .)
    EXPONENT        reduce using rule 35 (num -> FLOAT .)
    SPACE           reduce using rule 35 (num -> FLOAT .)
    RBRACE          reduce using rule 35 (num -> FLOAT .)
    END             reduce using rule 35 (num -> FLOAT .)
    ELSE            reduce using rule 35 (num -> FLOAT .)
    AND             reduce using rule 35 (num -> FLOAT .)
    OR              reduce using rule 35 (num -> FLOAT .)
    AND_RESERVED    reduce using rule 35 (num -> FLOAT .)
    OR_RESERVED     reduce using rule 35 (num -> FLOAT .)
    COLON           reduce using rule 35 (num -> FLOAT .)


state 63

    (36) num -> INTEGER .

    COMMA           reduce using rule 36 (num -> INTEGER .)
    $end            reduce using rule 36 (num -> INTEGER .)
    END_LOWER       reduce using rule 36 (num -> INTEGER .)
    NEWLINE         reduce using rule 36 (num -> INTEGER .)
    RIGHT_COR       reduce using rule 36 (num -> INTEGER .)
    GREATER         reduce using rule 36 (num -> INTEGER .)
    LESS            reduce using rule 36 (num -> INTEGER .)
    GREATER_EQUAL   reduce using rule 36 (num -> INTEGER .)
    LESS_EQUAL      reduce using rule 36 (num -> INTEGER .)
    EQUAL           reduce using rule 36 (num -> INTEGER .)
    NOT_EQUAL       reduce using rule 36 (num -> INTEGER .)
    COMPARE         reduce using rule 36 (num -> INTEGER .)
    RIGHTPAR        reduce using rule 36 (num -> INTEGER .)
    PLUS            reduce using rule 36 (num -> INTEGER .)
    MINUS           reduce using rule 36 (num -> INTEGER .)
    MULTIPLY        reduce using rule 36 (num -> INTEGER .)
    DIVIDE          reduce using rule 36 (num -> INTEGER .)
    MODULO          reduce using rule 36 (num -> INTEGER .)
    EXPONENT        reduce using rule 36 (num -> INTEGER .)
    SPACE           reduce using rule 36 (num -> INTEGER .)
    RBRACE          reduce using rule 36 (num -> INTEGER .)
    END             reduce using rule 36 (num -> INTEGER .)
    ELSE            reduce using rule 36 (num -> INTEGER .)
    AND             reduce using rule 36 (num -> INTEGER .)
    OR              reduce using rule 36 (num -> INTEGER .)
    AND_RESERVED    reduce using rule 36 (num -> INTEGER .)
    OR_RESERVED     reduce using rule 36 (num -> INTEGER .)
    COLON           reduce using rule 36 (num -> INTEGER .)


state 64

    (31) var -> LOCAL_VAR .

    COMMA           reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHT_COR       reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER         reduce using rule 31 (var -> LOCAL_VAR .)
    LESS            reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 31 (var -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHTPAR        reduce using rule 31 (var -> LOCAL_VAR .)
    SPACE           reduce using rule 31 (var -> LOCAL_VAR .)
    RBRACE          reduce using rule 31 (var -> LOCAL_VAR .)
    END             reduce using rule 31 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 31 (var -> LOCAL_VAR .)
    AND             reduce using rule 31 (var -> LOCAL_VAR .)
    OR              reduce using rule 31 (var -> LOCAL_VAR .)
    AND_RESERVED    reduce using rule 31 (var -> LOCAL_VAR .)
    OR_RESERVED     reduce using rule 31 (var -> LOCAL_VAR .)
    COLON           reduce using rule 31 (var -> LOCAL_VAR .)


state 65

    (32) var -> INSTANCE_VAR .

    COMMA           reduce using rule 32 (var -> INSTANCE_VAR .)
    $end            reduce using rule 32 (var -> INSTANCE_VAR .)
    END_LOWER       reduce using rule 32 (var -> INSTANCE_VAR .)
    NEWLINE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHT_COR       reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER         reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS            reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 32 (var -> INSTANCE_VAR .)
    EQUAL           reduce using rule 32 (var -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 32 (var -> INSTANCE_VAR .)
    COMPARE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHTPAR        reduce using rule 32 (var -> INSTANCE_VAR .)
    SPACE           reduce using rule 32 (var -> INSTANCE_VAR .)
    RBRACE          reduce using rule 32 (var -> INSTANCE_VAR .)
    END             reduce using rule 32 (var -> INSTANCE_VAR .)
    ELSE            reduce using rule 32 (var -> INSTANCE_VAR .)
    AND             reduce using rule 32 (var -> INSTANCE_VAR .)
    OR              reduce using rule 32 (var -> INSTANCE_VAR .)
    AND_RESERVED    reduce using rule 32 (var -> INSTANCE_VAR .)
    OR_RESERVED     reduce using rule 32 (var -> INSTANCE_VAR .)
    COLON           reduce using rule 32 (var -> INSTANCE_VAR .)


state 66

    (33) var -> CLASS_VAR .

    COMMA           reduce using rule 33 (var -> CLASS_VAR .)
    $end            reduce using rule 33 (var -> CLASS_VAR .)
    END_LOWER       reduce using rule 33 (var -> CLASS_VAR .)
    NEWLINE         reduce using rule 33 (var -> CLASS_VAR .)
    RIGHT_COR       reduce using rule 33 (var -> CLASS_VAR .)
    GREATER         reduce using rule 33 (var -> CLASS_VAR .)
    LESS            reduce using rule 33 (var -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 33 (var -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 33 (var -> CLASS_VAR .)
    EQUAL           reduce using rule 33 (var -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 33 (var -> CLASS_VAR .)
    COMPARE         reduce using rule 33 (var -> CLASS_VAR .)
    RIGHTPAR        reduce using rule 33 (var -> CLASS_VAR .)
    SPACE           reduce using rule 33 (var -> CLASS_VAR .)
    RBRACE          reduce using rule 33 (var -> CLASS_VAR .)
    END             reduce using rule 33 (var -> CLASS_VAR .)
    ELSE            reduce using rule 33 (var -> CLASS_VAR .)
    AND             reduce using rule 33 (var -> CLASS_VAR .)
    OR              reduce using rule 33 (var -> CLASS_VAR .)
    AND_RESERVED    reduce using rule 33 (var -> CLASS_VAR .)
    OR_RESERVED     reduce using rule 33 (var -> CLASS_VAR .)
    COLON           reduce using rule 33 (var -> CLASS_VAR .)


state 67

    (34) var -> GLOBAL_VAR .

    COMMA           reduce using rule 34 (var -> GLOBAL_VAR .)
    $end            reduce using rule 34 (var -> GLOBAL_VAR .)
    END_LOWER       reduce using rule 34 (var -> GLOBAL_VAR .)
    NEWLINE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHT_COR       reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER         reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS            reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 34 (var -> GLOBAL_VAR .)
    EQUAL           reduce using rule 34 (var -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 34 (var -> GLOBAL_VAR .)
    COMPARE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHTPAR        reduce using rule 34 (var -> GLOBAL_VAR .)
    SPACE           reduce using rule 34 (var -> GLOBAL_VAR .)
    RBRACE          reduce using rule 34 (var -> GLOBAL_VAR .)
    END             reduce using rule 34 (var -> GLOBAL_VAR .)
    ELSE            reduce using rule 34 (var -> GLOBAL_VAR .)
    AND             reduce using rule 34 (var -> GLOBAL_VAR .)
    OR              reduce using rule 34 (var -> GLOBAL_VAR .)
    AND_RESERVED    reduce using rule 34 (var -> GLOBAL_VAR .)
    OR_RESERVED     reduce using rule 34 (var -> GLOBAL_VAR .)
    COLON           reduce using rule 34 (var -> GLOBAL_VAR .)


state 68

    (37) gets -> GETS DOT . CHOMP DOT TO_F
    (38) gets -> GETS DOT . CHOMP DOT TO_I
    (39) gets -> GETS DOT . CHOMP

    CHOMP           shift and go to state 115


state 69

    (83) hash_operations -> hash_access ASSIGN . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    value                          shift and go to state 116
    num                            shift and go to state 57
    var                            shift and go to state 58

state 70

    (123) set_operations -> set_operations set_binary_operators . set_expression
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR

    SET             shift and go to state 42

    set_expression                 shift and go to state 117

state 71

    (125) set_binary_operators -> PLUS .

    SET             reduce using rule 125 (set_binary_operators -> PLUS .)


state 72

    (126) set_binary_operators -> MINUS .

    SET             reduce using rule 126 (set_binary_operators -> MINUS .)


state 73

    (127) set_binary_operators -> AMPERSAND .

    SET             reduce using rule 127 (set_binary_operators -> AMPERSAND .)


state 74

    (128) set_binary_operators -> PIPE .

    SET             reduce using rule 128 (set_binary_operators -> PIPE .)


state 75

    (129) set_binary_operators -> CARET .

    SET             reduce using rule 129 (set_binary_operators -> CARET .)


state 76

    (90) method_call -> var LEFTPAR . values RIGHTPAR
    (91) method_call -> var LEFTPAR . RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHTPAR        shift and go to state 119
    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    var                            shift and go to state 58
    values                         shift and go to state 118
    value                          shift and go to state 56
    num                            shift and go to state 57

state 77

    (82) hash_access -> var LEFT_COR . value RIGHT_COR
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    var                            shift and go to state 58
    value                          shift and go to state 120
    num                            shift and go to state 57

state 78

    (148) proc_assignment -> LOCAL_VAR ASSIGN . proc_expression
    (115) declaraciones -> LOCAL_VAR ASSIGN . arithmetic_production
    (84) variable_declaration -> LOCAL_VAR ASSIGN . value
    (85) store_conditional_result -> LOCAL_VAR ASSIGN . condiciones
    (124) declare_data_structures -> LOCAL_VAR ASSIGN . set_expression
    (45) var_arreglo -> LOCAL_VAR ASSIGN . array
    (79) declaracion_concatenar_string -> LOCAL_VAR ASSIGN . concatenar_string
    (147) proc_expression -> . PROC DOT NEW block_expression
    (132) arithmetic_production -> . num
    (133) arithmetic_production -> . LOCAL_VAR
    (134) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (135) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (75) concatenar_string -> . STRING PLUS STRING
    (76) concatenar_string -> . STRING PLUS LOCAL_VAR
    (77) concatenar_string -> . LOCAL_VAR PLUS STRING
    (78) concatenar_string -> . LOCAL_VAR PLUS LOCAL_VAR
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PROC            shift and go to state 129
    LOCAL_VAR       shift and go to state 121
    STRING          shift and go to state 132
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    SET             shift and go to state 42
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 50
    ARRAY           shift and go to state 51

    proc_expression                shift and go to state 122
    arithmetic_production          shift and go to state 123
    value                          shift and go to state 124
    condiciones                    shift and go to state 125
    set_expression                 shift and go to state 126
    array                          shift and go to state 127
    concatenar_string              shift and go to state 128
    num                            shift and go to state 130
    var                            shift and go to state 131
    condicion                      shift and go to state 88
    array_explicito                shift and go to state 37
    array_implicito                shift and go to state 38
    array_creation                 shift and go to state 39
    newArray                       shift and go to state 40

state 79

    (149) proc_call -> LOCAL_VAR DOT . CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> LOCAL_VAR DOT . LEFTPAR values RIGHTPAR
    (74) to_string -> LOCAL_VAR DOT . TO_S

    CALL            shift and go to state 133
    LEFTPAR         shift and go to state 134
    TO_S            shift and go to state 135


state 80

    (151) proc_call -> LOCAL_VAR LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 136
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 81

    (46) array_explicito -> LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 137


state 82

    (47) array_explicito -> LEFT_COR RIGHT_COR .

    $end            reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    RIGHTPAR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)


state 83

    (54) acceder_arreglo -> var_arreglo LEFT_COR . INTEGER RIGHT_COR

    INTEGER         shift and go to state 138


state 84

    (80) hash_declaration -> HASH LEFT_COR . values RIGHT_COR
    (81) hash_declaration -> HASH LEFT_COR . RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHT_COR       shift and go to state 140
    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 139
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 85

    (120) set_expression -> SET DOT . NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    NEW             shift and go to state 141


state 86

    (121) set_expression -> SET LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 142
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 87

    (55) ifStatement -> IF condiciones . NEWLINE codigo END_LOWER
    (56) ifStatement -> IF condiciones . NEWLINE codigo NEWLINE else_statement END_LOWER
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

    NEWLINE         shift and go to state 143
    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

    conectores                     shift and go to state 144

state 88

    (57) condiciones -> condicion .

    NEWLINE         reduce using rule 57 (condiciones -> condicion .)
    AND             reduce using rule 57 (condiciones -> condicion .)
    OR              reduce using rule 57 (condiciones -> condicion .)
    AND_RESERVED    reduce using rule 57 (condiciones -> condicion .)
    OR_RESERVED     reduce using rule 57 (condiciones -> condicion .)
    COLON           reduce using rule 57 (condiciones -> condicion .)
    $end            reduce using rule 57 (condiciones -> condicion .)
    END_LOWER       reduce using rule 57 (condiciones -> condicion .)
    RBRACE          reduce using rule 57 (condiciones -> condicion .)
    END             reduce using rule 57 (condiciones -> condicion .)
    ELSE            reduce using rule 57 (condiciones -> condicion .)


state 89

    (63) condicion -> num . operComp num
    (65) condicion -> num . operComp var
    (66) operComp -> . GREATER
    (67) operComp -> . LESS
    (68) operComp -> . GREATER_EQUAL
    (69) operComp -> . LESS_EQUAL
    (70) operComp -> . EQUAL
    (71) operComp -> . NOT_EQUAL
    (72) operComp -> . COMPARE

    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GREATER_EQUAL   shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    EQUAL           shift and go to state 154
    NOT_EQUAL       shift and go to state 155
    COMPARE         shift and go to state 156

    operComp                       shift and go to state 149

state 90

    (64) condicion -> var . operComp num
    (66) operComp -> . GREATER
    (67) operComp -> . LESS
    (68) operComp -> . GREATER_EQUAL
    (69) operComp -> . LESS_EQUAL
    (70) operComp -> . EQUAL
    (71) operComp -> . NOT_EQUAL
    (72) operComp -> . COMPARE

    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GREATER_EQUAL   shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    EQUAL           shift and go to state 154
    NOT_EQUAL       shift and go to state 155
    COMPARE         shift and go to state 156

    operComp                       shift and go to state 157

state 91

    (88) while_statement -> WHILE condiciones . COLON codigo
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

    COLON           shift and go to state 158
    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

    conectores                     shift and go to state 144

state 92

    (130) unless_expression -> UNLESS boolean_expression . THEN expresion END
    (131) unless_expression -> UNLESS boolean_expression . THEN expresion ELSE expresion END

    THEN            shift and go to state 159


state 93

    (93) boolean_expression -> expression . GREATER expression
    (94) boolean_expression -> expression . LESS expression
    (95) boolean_expression -> expression . GREATER_EQUAL expression
    (96) boolean_expression -> expression . LESS_EQUAL expression
    (97) boolean_expression -> expression . EQUAL expression
    (98) boolean_expression -> expression . NOT_EQUAL expression

    GREATER         shift and go to state 160
    LESS            shift and go to state 161
    GREATER_EQUAL   shift and go to state 162
    LESS_EQUAL      shift and go to state 163
    EQUAL           shift and go to state 164
    NOT_EQUAL       shift and go to state 165


state 94

    (99) boolean_expression -> boolean_value .

    THEN            reduce using rule 99 (boolean_expression -> boolean_value .)


state 95

    (100) boolean_value -> TRUE .

    THEN            reduce using rule 100 (boolean_value -> TRUE .)


state 96

    (101) boolean_value -> FALSE .

    THEN            reduce using rule 101 (boolean_value -> FALSE .)


state 97

    (106) variable -> LOCAL_VAR .

    GREATER         reduce using rule 106 (variable -> LOCAL_VAR .)
    LESS            reduce using rule 106 (variable -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 106 (variable -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 106 (variable -> LOCAL_VAR .)
    EQUAL           reduce using rule 106 (variable -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 106 (variable -> LOCAL_VAR .)
    THEN            reduce using rule 106 (variable -> LOCAL_VAR .)


state 98

    (107) variable -> INSTANCE_VAR .

    GREATER         reduce using rule 107 (variable -> INSTANCE_VAR .)
    LESS            reduce using rule 107 (variable -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 107 (variable -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 107 (variable -> INSTANCE_VAR .)
    EQUAL           reduce using rule 107 (variable -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 107 (variable -> INSTANCE_VAR .)
    THEN            reduce using rule 107 (variable -> INSTANCE_VAR .)


state 99

    (108) variable -> CLASS_VAR .

    GREATER         reduce using rule 108 (variable -> CLASS_VAR .)
    LESS            reduce using rule 108 (variable -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 108 (variable -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 108 (variable -> CLASS_VAR .)
    EQUAL           reduce using rule 108 (variable -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 108 (variable -> CLASS_VAR .)
    THEN            reduce using rule 108 (variable -> CLASS_VAR .)


state 100

    (109) variable -> GLOBAL_VAR .

    GREATER         reduce using rule 109 (variable -> GLOBAL_VAR .)
    LESS            reduce using rule 109 (variable -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 109 (variable -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 109 (variable -> GLOBAL_VAR .)
    EQUAL           reduce using rule 109 (variable -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 109 (variable -> GLOBAL_VAR .)
    THEN            reduce using rule 109 (variable -> GLOBAL_VAR .)


state 101

    (48) array_implicito -> PERCENTW LEFT_COR . values_space RIGHT_COR
    (49) array_implicito -> PERCENTW LEFT_COR . RIGHT_COR
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHT_COR       shift and go to state 167
    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values_space                   shift and go to state 166
    value                          shift and go to state 168
    num                            shift and go to state 57
    var                            shift and go to state 58

state 102

    (50) array_creation -> ARRAY LEFTPAR . array_explicito RIGHTPAR
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 27

    array_explicito                shift and go to state 169

state 103

    (51) newArray -> ARRAY DOT . NEW
    (52) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    NEW             shift and go to state 170


state 104

    (142) block_expression -> LBRACE expresion . RBRACE

    RBRACE          shift and go to state 171


state 105

    (144) block_expression -> LBRACE PIPE . LOCAL_VAR PIPE expresion RBRACE

    LOCAL_VAR       shift and go to state 172


state 106

    (117) expresion -> puts .

    RBRACE          reduce using rule 117 (expresion -> puts .)
    END             reduce using rule 117 (expresion -> puts .)
    ELSE            reduce using rule 117 (expresion -> puts .)


state 107

    (118) expresion -> gets .

    RBRACE          reduce using rule 118 (expresion -> gets .)
    END             reduce using rule 118 (expresion -> gets .)
    ELSE            reduce using rule 118 (expresion -> gets .)


state 108

    (119) expresion -> print_statement .

    RBRACE          reduce using rule 119 (expresion -> print_statement .)
    END             reduce using rule 119 (expresion -> print_statement .)
    ELSE            reduce using rule 119 (expresion -> print_statement .)


state 109

    (152) expresion -> condition_with_connectors .

    RBRACE          reduce using rule 152 (expresion -> condition_with_connectors .)
    END             reduce using rule 152 (expresion -> condition_with_connectors .)
    ELSE            reduce using rule 152 (expresion -> condition_with_connectors .)


state 110

    (40) puts -> PUT . values
    (92) print_statement -> PUT . LEFTPAR values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    LEFTPAR         shift and go to state 173
    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 55
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 111

    (89) condition_with_connectors -> condiciones . conectores condiciones
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

    conectores                     shift and go to state 174

state 112

    (143) block_expression -> DO expresion . END

    END             shift and go to state 175


state 113

    (145) block_expression -> DO PIPE . LOCAL_VAR PIPE expresion END

    LOCAL_VAR       shift and go to state 176


state 114

    (30) values -> value COMMA . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    value                          shift and go to state 56
    values                         shift and go to state 177
    num                            shift and go to state 57
    var                            shift and go to state 58

state 115

    (37) gets -> GETS DOT CHOMP . DOT TO_F
    (38) gets -> GETS DOT CHOMP . DOT TO_I
    (39) gets -> GETS DOT CHOMP .

    DOT             shift and go to state 178
    $end            reduce using rule 39 (gets -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 39 (gets -> GETS DOT CHOMP .)
    END             reduce using rule 39 (gets -> GETS DOT CHOMP .)
    END_LOWER       reduce using rule 39 (gets -> GETS DOT CHOMP .)
    NEWLINE         reduce using rule 39 (gets -> GETS DOT CHOMP .)
    ELSE            reduce using rule 39 (gets -> GETS DOT CHOMP .)


state 116

    (83) hash_operations -> hash_access ASSIGN value .

    $end            reduce using rule 83 (hash_operations -> hash_access ASSIGN value .)
    END_LOWER       reduce using rule 83 (hash_operations -> hash_access ASSIGN value .)
    NEWLINE         reduce using rule 83 (hash_operations -> hash_access ASSIGN value .)


state 117

    (123) set_operations -> set_operations set_binary_operators set_expression .

    PLUS            reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    MINUS           reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    AMPERSAND       reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    PIPE            reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    CARET           reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    $end            reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    END_LOWER       reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)
    NEWLINE         reduce using rule 123 (set_operations -> set_operations set_binary_operators set_expression .)


state 118

    (90) method_call -> var LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 179


state 119

    (91) method_call -> var LEFTPAR RIGHTPAR .

    LBRACE          reduce using rule 91 (method_call -> var LEFTPAR RIGHTPAR .)
    DO              reduce using rule 91 (method_call -> var LEFTPAR RIGHTPAR .)
    $end            reduce using rule 91 (method_call -> var LEFTPAR RIGHTPAR .)
    END_LOWER       reduce using rule 91 (method_call -> var LEFTPAR RIGHTPAR .)
    NEWLINE         reduce using rule 91 (method_call -> var LEFTPAR RIGHTPAR .)


state 120

    (82) hash_access -> var LEFT_COR value . RIGHT_COR

    RIGHT_COR       shift and go to state 180


state 121

    (133) arithmetic_production -> LOCAL_VAR .
    (135) arithmetic_production -> LOCAL_VAR . arithmetic_operators arithmetic_production
    (77) concatenar_string -> LOCAL_VAR . PLUS STRING
    (78) concatenar_string -> LOCAL_VAR . PLUS LOCAL_VAR
    (31) var -> LOCAL_VAR .
    (136) arithmetic_operators -> . PLUS
    (137) arithmetic_operators -> . MINUS
    (138) arithmetic_operators -> . MULTIPLY
    (139) arithmetic_operators -> . DIVIDE
    (140) arithmetic_operators -> . MODULO
    (141) arithmetic_operators -> . EXPONENT

  ! reduce/reduce conflict for $end resolved using rule 31 (var -> LOCAL_VAR .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 31 (var -> LOCAL_VAR .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 31 (var -> LOCAL_VAR .)
    PLUS            shift and go to state 182
    GREATER         reduce using rule 31 (var -> LOCAL_VAR .)
    LESS            reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 31 (var -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)
    MINUS           shift and go to state 183
    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    MODULO          shift and go to state 186
    EXPONENT        shift and go to state 187

  ! $end            [ reduce using rule 133 (arithmetic_production -> LOCAL_VAR .) ]
  ! END_LOWER       [ reduce using rule 133 (arithmetic_production -> LOCAL_VAR .) ]
  ! NEWLINE         [ reduce using rule 133 (arithmetic_production -> LOCAL_VAR .) ]

    arithmetic_operators           shift and go to state 181

state 122

    (148) proc_assignment -> LOCAL_VAR ASSIGN proc_expression .

    $end            reduce using rule 148 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    END_LOWER       reduce using rule 148 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    NEWLINE         reduce using rule 148 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)


state 123

    (115) declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .

    $end            reduce using rule 115 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)
    END_LOWER       reduce using rule 115 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)
    NEWLINE         reduce using rule 115 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)


state 124

    (84) variable_declaration -> LOCAL_VAR ASSIGN value .

    $end            reduce using rule 84 (variable_declaration -> LOCAL_VAR ASSIGN value .)
    END_LOWER       reduce using rule 84 (variable_declaration -> LOCAL_VAR ASSIGN value .)
    NEWLINE         reduce using rule 84 (variable_declaration -> LOCAL_VAR ASSIGN value .)


state 125

    (85) store_conditional_result -> LOCAL_VAR ASSIGN condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

    $end            reduce using rule 85 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    END_LOWER       reduce using rule 85 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    NEWLINE         reduce using rule 85 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

    conectores                     shift and go to state 144

state 126

    (124) declare_data_structures -> LOCAL_VAR ASSIGN set_expression .

    $end            reduce using rule 124 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    END_LOWER       reduce using rule 124 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    NEWLINE         reduce using rule 124 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)


state 127

    (45) var_arreglo -> LOCAL_VAR ASSIGN array .

    LEFT_COR        reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    $end            reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    END_LOWER       reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    NEWLINE         reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)


state 128

    (79) declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .

    $end            reduce using rule 79 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)
    END_LOWER       reduce using rule 79 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)
    NEWLINE         reduce using rule 79 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)


state 129

    (147) proc_expression -> PROC . DOT NEW block_expression

    DOT             shift and go to state 188


state 130

    (132) arithmetic_production -> num .
    (134) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (22) value -> num .
    (63) condicion -> num . operComp num
    (65) condicion -> num . operComp var
    (136) arithmetic_operators -> . PLUS
    (137) arithmetic_operators -> . MINUS
    (138) arithmetic_operators -> . MULTIPLY
    (139) arithmetic_operators -> . DIVIDE
    (140) arithmetic_operators -> . MODULO
    (141) arithmetic_operators -> . EXPONENT
    (66) operComp -> . GREATER
    (67) operComp -> . LESS
    (68) operComp -> . GREATER_EQUAL
    (69) operComp -> . LESS_EQUAL
    (70) operComp -> . EQUAL
    (71) operComp -> . NOT_EQUAL
    (72) operComp -> . COMPARE

  ! reduce/reduce conflict for $end resolved using rule 22 (value -> num .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 22 (value -> num .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 22 (value -> num .)
    $end            reduce using rule 22 (value -> num .)
    END_LOWER       reduce using rule 22 (value -> num .)
    NEWLINE         reduce using rule 22 (value -> num .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 183
    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    MODULO          shift and go to state 186
    EXPONENT        shift and go to state 187
    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GREATER_EQUAL   shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    EQUAL           shift and go to state 154
    NOT_EQUAL       shift and go to state 155
    COMPARE         shift and go to state 156

  ! $end            [ reduce using rule 132 (arithmetic_production -> num .) ]
  ! END_LOWER       [ reduce using rule 132 (arithmetic_production -> num .) ]
  ! NEWLINE         [ reduce using rule 132 (arithmetic_production -> num .) ]

    arithmetic_operators           shift and go to state 189
    operComp                       shift and go to state 149

state 131

    (23) value -> var .
    (64) condicion -> var . operComp num
    (66) operComp -> . GREATER
    (67) operComp -> . LESS
    (68) operComp -> . GREATER_EQUAL
    (69) operComp -> . LESS_EQUAL
    (70) operComp -> . EQUAL
    (71) operComp -> . NOT_EQUAL
    (72) operComp -> . COMPARE

    $end            reduce using rule 23 (value -> var .)
    END_LOWER       reduce using rule 23 (value -> var .)
    NEWLINE         reduce using rule 23 (value -> var .)
    GREATER         shift and go to state 150
    LESS            shift and go to state 151
    GREATER_EQUAL   shift and go to state 152
    LESS_EQUAL      shift and go to state 153
    EQUAL           shift and go to state 154
    NOT_EQUAL       shift and go to state 155
    COMPARE         shift and go to state 156

    operComp                       shift and go to state 157

state 132

    (24) value -> STRING .
    (75) concatenar_string -> STRING . PLUS STRING
    (76) concatenar_string -> STRING . PLUS LOCAL_VAR

    $end            reduce using rule 24 (value -> STRING .)
    END_LOWER       reduce using rule 24 (value -> STRING .)
    NEWLINE         reduce using rule 24 (value -> STRING .)
    PLUS            shift and go to state 191


state 133

    (149) proc_call -> LOCAL_VAR DOT CALL . LEFTPAR values RIGHTPAR

    LEFTPAR         shift and go to state 192


state 134

    (150) proc_call -> LOCAL_VAR DOT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 193
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 135

    (74) to_string -> LOCAL_VAR DOT TO_S .

    $end            reduce using rule 74 (to_string -> LOCAL_VAR DOT TO_S .)
    END_LOWER       reduce using rule 74 (to_string -> LOCAL_VAR DOT TO_S .)
    NEWLINE         reduce using rule 74 (to_string -> LOCAL_VAR DOT TO_S .)


state 136

    (151) proc_call -> LOCAL_VAR LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 194


state 137

    (46) array_explicito -> LEFT_COR values RIGHT_COR .

    $end            reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    LEFT_COR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    RIGHTPAR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)


state 138

    (54) acceder_arreglo -> var_arreglo LEFT_COR INTEGER . RIGHT_COR

    RIGHT_COR       shift and go to state 195


state 139

    (80) hash_declaration -> HASH LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 196


state 140

    (81) hash_declaration -> HASH LEFT_COR RIGHT_COR .

    $end            reduce using rule 81 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 81 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 81 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)


state 141

    (120) set_expression -> SET DOT NEW . LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    LEFTPAR         shift and go to state 197


state 142

    (121) set_expression -> SET LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 198


state 143

    (55) ifStatement -> IF condiciones NEWLINE . codigo END_LOWER
    (56) ifStatement -> IF condiciones NEWLINE . codigo NEWLINE else_statement END_LOWER
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (12) estructurasDatos -> . array
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (90) method_call -> . var LEFTPAR values RIGHTPAR
    (91) method_call -> . var LEFTPAR RIGHTPAR
    (146) block_assignment -> . method_call block_expression
    (148) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (149) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (151) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (111) declaraciones -> . variable_declaration
    (112) declaraciones -> . store_conditional_result
    (113) declaraciones -> . declare_data_structures
    (114) declaraciones -> . var_arreglo
    (115) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (116) declaraciones -> . declaracion_concatenar_string
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (74) to_string -> . LOCAL_VAR DOT TO_S
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (80) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (81) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (82) hash_access -> . var LEFT_COR value RIGHT_COR
    (83) hash_operations -> . hash_access ASSIGN value
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR
    (122) set_operations -> . set_expression
    (123) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (88) while_statement -> . WHILE condiciones COLON codigo
    (130) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (131) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (84) variable_declaration -> . LOCAL_VAR ASSIGN value
    (85) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (86) declare_data_structures -> . var_arreglo
    (87) declare_data_structures -> . hash_declaration
    (124) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (79) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 13
    GETS            shift and go to state 14
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    HASH            shift and go to state 41
    SET             shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    UNLESS          shift and go to state 45
    INSTANCE_VAR    shift and go to state 46
    CLASS_VAR       shift and go to state 47
    GLOBAL_VAR      shift and go to state 48
    CONSTANT        shift and go to state 49
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 50
    ARRAY           shift and go to state 51

    codigo                         shift and go to state 199
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    array                          shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    array_explicito                shift and go to state 37
    array_implicito                shift and go to state 38
    array_creation                 shift and go to state 39
    newArray                       shift and go to state 40

state 144

    (58) condiciones -> condiciones conectores . condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    condiciones                    shift and go to state 200
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 145

    (59) conectores -> AND .

    FLOAT           reduce using rule 59 (conectores -> AND .)
    INTEGER         reduce using rule 59 (conectores -> AND .)
    LOCAL_VAR       reduce using rule 59 (conectores -> AND .)
    INSTANCE_VAR    reduce using rule 59 (conectores -> AND .)
    CLASS_VAR       reduce using rule 59 (conectores -> AND .)
    GLOBAL_VAR      reduce using rule 59 (conectores -> AND .)


state 146

    (60) conectores -> OR .

    FLOAT           reduce using rule 60 (conectores -> OR .)
    INTEGER         reduce using rule 60 (conectores -> OR .)
    LOCAL_VAR       reduce using rule 60 (conectores -> OR .)
    INSTANCE_VAR    reduce using rule 60 (conectores -> OR .)
    CLASS_VAR       reduce using rule 60 (conectores -> OR .)
    GLOBAL_VAR      reduce using rule 60 (conectores -> OR .)


state 147

    (61) conectores -> AND_RESERVED .

    FLOAT           reduce using rule 61 (conectores -> AND_RESERVED .)
    INTEGER         reduce using rule 61 (conectores -> AND_RESERVED .)
    LOCAL_VAR       reduce using rule 61 (conectores -> AND_RESERVED .)
    INSTANCE_VAR    reduce using rule 61 (conectores -> AND_RESERVED .)
    CLASS_VAR       reduce using rule 61 (conectores -> AND_RESERVED .)
    GLOBAL_VAR      reduce using rule 61 (conectores -> AND_RESERVED .)


state 148

    (62) conectores -> OR_RESERVED .

    FLOAT           reduce using rule 62 (conectores -> OR_RESERVED .)
    INTEGER         reduce using rule 62 (conectores -> OR_RESERVED .)
    LOCAL_VAR       reduce using rule 62 (conectores -> OR_RESERVED .)
    INSTANCE_VAR    reduce using rule 62 (conectores -> OR_RESERVED .)
    CLASS_VAR       reduce using rule 62 (conectores -> OR_RESERVED .)
    GLOBAL_VAR      reduce using rule 62 (conectores -> OR_RESERVED .)


state 149

    (63) condicion -> num operComp . num
    (65) condicion -> num operComp . var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    num                            shift and go to state 201
    var                            shift and go to state 202

state 150

    (66) operComp -> GREATER .

    FLOAT           reduce using rule 66 (operComp -> GREATER .)
    INTEGER         reduce using rule 66 (operComp -> GREATER .)
    LOCAL_VAR       reduce using rule 66 (operComp -> GREATER .)
    INSTANCE_VAR    reduce using rule 66 (operComp -> GREATER .)
    CLASS_VAR       reduce using rule 66 (operComp -> GREATER .)
    GLOBAL_VAR      reduce using rule 66 (operComp -> GREATER .)


state 151

    (67) operComp -> LESS .

    FLOAT           reduce using rule 67 (operComp -> LESS .)
    INTEGER         reduce using rule 67 (operComp -> LESS .)
    LOCAL_VAR       reduce using rule 67 (operComp -> LESS .)
    INSTANCE_VAR    reduce using rule 67 (operComp -> LESS .)
    CLASS_VAR       reduce using rule 67 (operComp -> LESS .)
    GLOBAL_VAR      reduce using rule 67 (operComp -> LESS .)


state 152

    (68) operComp -> GREATER_EQUAL .

    FLOAT           reduce using rule 68 (operComp -> GREATER_EQUAL .)
    INTEGER         reduce using rule 68 (operComp -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 68 (operComp -> GREATER_EQUAL .)
    INSTANCE_VAR    reduce using rule 68 (operComp -> GREATER_EQUAL .)
    CLASS_VAR       reduce using rule 68 (operComp -> GREATER_EQUAL .)
    GLOBAL_VAR      reduce using rule 68 (operComp -> GREATER_EQUAL .)


state 153

    (69) operComp -> LESS_EQUAL .

    FLOAT           reduce using rule 69 (operComp -> LESS_EQUAL .)
    INTEGER         reduce using rule 69 (operComp -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 69 (operComp -> LESS_EQUAL .)
    INSTANCE_VAR    reduce using rule 69 (operComp -> LESS_EQUAL .)
    CLASS_VAR       reduce using rule 69 (operComp -> LESS_EQUAL .)
    GLOBAL_VAR      reduce using rule 69 (operComp -> LESS_EQUAL .)


state 154

    (70) operComp -> EQUAL .

    FLOAT           reduce using rule 70 (operComp -> EQUAL .)
    INTEGER         reduce using rule 70 (operComp -> EQUAL .)
    LOCAL_VAR       reduce using rule 70 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 70 (operComp -> EQUAL .)
    CLASS_VAR       reduce using rule 70 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 70 (operComp -> EQUAL .)


state 155

    (71) operComp -> NOT_EQUAL .

    FLOAT           reduce using rule 71 (operComp -> NOT_EQUAL .)
    INTEGER         reduce using rule 71 (operComp -> NOT_EQUAL .)
    LOCAL_VAR       reduce using rule 71 (operComp -> NOT_EQUAL .)
    INSTANCE_VAR    reduce using rule 71 (operComp -> NOT_EQUAL .)
    CLASS_VAR       reduce using rule 71 (operComp -> NOT_EQUAL .)
    GLOBAL_VAR      reduce using rule 71 (operComp -> NOT_EQUAL .)


state 156

    (72) operComp -> COMPARE .

    FLOAT           reduce using rule 72 (operComp -> COMPARE .)
    INTEGER         reduce using rule 72 (operComp -> COMPARE .)
    LOCAL_VAR       reduce using rule 72 (operComp -> COMPARE .)
    INSTANCE_VAR    reduce using rule 72 (operComp -> COMPARE .)
    CLASS_VAR       reduce using rule 72 (operComp -> COMPARE .)
    GLOBAL_VAR      reduce using rule 72 (operComp -> COMPARE .)


state 157

    (64) condicion -> var operComp . num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63

    num                            shift and go to state 203

state 158

    (88) while_statement -> WHILE condiciones COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (12) estructurasDatos -> . array
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (90) method_call -> . var LEFTPAR values RIGHTPAR
    (91) method_call -> . var LEFTPAR RIGHTPAR
    (146) block_assignment -> . method_call block_expression
    (148) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (149) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (151) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (111) declaraciones -> . variable_declaration
    (112) declaraciones -> . store_conditional_result
    (113) declaraciones -> . declare_data_structures
    (114) declaraciones -> . var_arreglo
    (115) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (116) declaraciones -> . declaracion_concatenar_string
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (74) to_string -> . LOCAL_VAR DOT TO_S
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (80) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (81) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (82) hash_access -> . var LEFT_COR value RIGHT_COR
    (83) hash_operations -> . hash_access ASSIGN value
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR
    (122) set_operations -> . set_expression
    (123) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (88) while_statement -> . WHILE condiciones COLON codigo
    (130) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (131) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (84) variable_declaration -> . LOCAL_VAR ASSIGN value
    (85) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (86) declare_data_structures -> . var_arreglo
    (87) declare_data_structures -> . hash_declaration
    (124) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (79) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 13
    GETS            shift and go to state 14
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    HASH            shift and go to state 41
    SET             shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    UNLESS          shift and go to state 45
    INSTANCE_VAR    shift and go to state 46
    CLASS_VAR       shift and go to state 47
    GLOBAL_VAR      shift and go to state 48
    CONSTANT        shift and go to state 49
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 50
    ARRAY           shift and go to state 51

    codigo                         shift and go to state 204
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    array                          shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    array_explicito                shift and go to state 37
    array_implicito                shift and go to state 38
    array_creation                 shift and go to state 39
    newArray                       shift and go to state 40

state 159

    (130) unless_expression -> UNLESS boolean_expression THEN . expresion END
    (131) unless_expression -> UNLESS boolean_expression THEN . expresion ELSE expresion END
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 205
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 160

    (93) boolean_expression -> expression GREATER . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 206
    variable                       shift and go to state 35

state 161

    (94) boolean_expression -> expression LESS . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 207
    variable                       shift and go to state 35

state 162

    (95) boolean_expression -> expression GREATER_EQUAL . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 208
    variable                       shift and go to state 35

state 163

    (96) boolean_expression -> expression LESS_EQUAL . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 209
    variable                       shift and go to state 35

state 164

    (97) boolean_expression -> expression EQUAL . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 210
    variable                       shift and go to state 35

state 165

    (98) boolean_expression -> expression NOT_EQUAL . expression
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT

    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    LOCAL_VAR       shift and go to state 97
    INSTANCE_VAR    shift and go to state 98
    CLASS_VAR       shift and go to state 99
    GLOBAL_VAR      shift and go to state 100
    CONSTANT        shift and go to state 49

    expression                     shift and go to state 211
    variable                       shift and go to state 35

state 166

    (48) array_implicito -> PERCENTW LEFT_COR values_space . RIGHT_COR

    RIGHT_COR       shift and go to state 212


state 167

    (49) array_implicito -> PERCENTW LEFT_COR RIGHT_COR .

    $end            reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)


state 168

    (27) values_space -> value . SPACE values_space
    (28) values_space -> value .

    SPACE           shift and go to state 213
    RIGHT_COR       reduce using rule 28 (values_space -> value .)


state 169

    (50) array_creation -> ARRAY LEFTPAR array_explicito . RIGHTPAR

    RIGHTPAR        shift and go to state 214


state 170

    (51) newArray -> ARRAY DOT NEW .
    (52) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER COMMA values RIGHTPAR

    $end            reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFT_COR        reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    END_LOWER       reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    NEWLINE         reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFTPAR         shift and go to state 215


state 171

    (142) block_expression -> LBRACE expresion RBRACE .

    $end            reduce using rule 142 (block_expression -> LBRACE expresion RBRACE .)
    END_LOWER       reduce using rule 142 (block_expression -> LBRACE expresion RBRACE .)
    NEWLINE         reduce using rule 142 (block_expression -> LBRACE expresion RBRACE .)


state 172

    (144) block_expression -> LBRACE PIPE LOCAL_VAR . PIPE expresion RBRACE

    PIPE            shift and go to state 216


state 173

    (92) print_statement -> PUT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 217
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 174

    (89) condition_with_connectors -> condiciones conectores . condiciones
    (58) condiciones -> condiciones conectores . condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    condiciones                    shift and go to state 218
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 175

    (143) block_expression -> DO expresion END .

    $end            reduce using rule 143 (block_expression -> DO expresion END .)
    END_LOWER       reduce using rule 143 (block_expression -> DO expresion END .)
    NEWLINE         reduce using rule 143 (block_expression -> DO expresion END .)


state 176

    (145) block_expression -> DO PIPE LOCAL_VAR . PIPE expresion END

    PIPE            shift and go to state 219


state 177

    (30) values -> value COMMA values .

    $end            reduce using rule 30 (values -> value COMMA values .)
    END_LOWER       reduce using rule 30 (values -> value COMMA values .)
    NEWLINE         reduce using rule 30 (values -> value COMMA values .)
    RIGHT_COR       reduce using rule 30 (values -> value COMMA values .)
    RIGHTPAR        reduce using rule 30 (values -> value COMMA values .)
    RBRACE          reduce using rule 30 (values -> value COMMA values .)
    END             reduce using rule 30 (values -> value COMMA values .)
    ELSE            reduce using rule 30 (values -> value COMMA values .)


state 178

    (37) gets -> GETS DOT CHOMP DOT . TO_F
    (38) gets -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 220
    TO_I            shift and go to state 221


state 179

    (90) method_call -> var LEFTPAR values RIGHTPAR .

    LBRACE          reduce using rule 90 (method_call -> var LEFTPAR values RIGHTPAR .)
    DO              reduce using rule 90 (method_call -> var LEFTPAR values RIGHTPAR .)
    $end            reduce using rule 90 (method_call -> var LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 90 (method_call -> var LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 90 (method_call -> var LEFTPAR values RIGHTPAR .)


state 180

    (82) hash_access -> var LEFT_COR value RIGHT_COR .

    ASSIGN          reduce using rule 82 (hash_access -> var LEFT_COR value RIGHT_COR .)
    $end            reduce using rule 82 (hash_access -> var LEFT_COR value RIGHT_COR .)
    END_LOWER       reduce using rule 82 (hash_access -> var LEFT_COR value RIGHT_COR .)
    NEWLINE         reduce using rule 82 (hash_access -> var LEFT_COR value RIGHT_COR .)


state 181

    (135) arithmetic_production -> LOCAL_VAR arithmetic_operators . arithmetic_production
    (132) arithmetic_production -> . num
    (133) arithmetic_production -> . LOCAL_VAR
    (134) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (135) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    LOCAL_VAR       shift and go to state 222
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63

    arithmetic_production          shift and go to state 223
    num                            shift and go to state 224

state 182

    (77) concatenar_string -> LOCAL_VAR PLUS . STRING
    (78) concatenar_string -> LOCAL_VAR PLUS . LOCAL_VAR
    (136) arithmetic_operators -> PLUS .

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    STRING          shift and go to state 226
    LOCAL_VAR       shift and go to state 225
    FLOAT           reduce using rule 136 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 136 (arithmetic_operators -> PLUS .)

  ! LOCAL_VAR       [ reduce using rule 136 (arithmetic_operators -> PLUS .) ]


state 183

    (137) arithmetic_operators -> MINUS .

    LOCAL_VAR       reduce using rule 137 (arithmetic_operators -> MINUS .)
    FLOAT           reduce using rule 137 (arithmetic_operators -> MINUS .)
    INTEGER         reduce using rule 137 (arithmetic_operators -> MINUS .)


state 184

    (138) arithmetic_operators -> MULTIPLY .

    LOCAL_VAR       reduce using rule 138 (arithmetic_operators -> MULTIPLY .)
    FLOAT           reduce using rule 138 (arithmetic_operators -> MULTIPLY .)
    INTEGER         reduce using rule 138 (arithmetic_operators -> MULTIPLY .)


state 185

    (139) arithmetic_operators -> DIVIDE .

    LOCAL_VAR       reduce using rule 139 (arithmetic_operators -> DIVIDE .)
    FLOAT           reduce using rule 139 (arithmetic_operators -> DIVIDE .)
    INTEGER         reduce using rule 139 (arithmetic_operators -> DIVIDE .)


state 186

    (140) arithmetic_operators -> MODULO .

    LOCAL_VAR       reduce using rule 140 (arithmetic_operators -> MODULO .)
    FLOAT           reduce using rule 140 (arithmetic_operators -> MODULO .)
    INTEGER         reduce using rule 140 (arithmetic_operators -> MODULO .)


state 187

    (141) arithmetic_operators -> EXPONENT .

    LOCAL_VAR       reduce using rule 141 (arithmetic_operators -> EXPONENT .)
    FLOAT           reduce using rule 141 (arithmetic_operators -> EXPONENT .)
    INTEGER         reduce using rule 141 (arithmetic_operators -> EXPONENT .)


state 188

    (147) proc_expression -> PROC DOT . NEW block_expression

    NEW             shift and go to state 227


state 189

    (134) arithmetic_production -> num arithmetic_operators . arithmetic_production
    (132) arithmetic_production -> . num
    (133) arithmetic_production -> . LOCAL_VAR
    (134) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (135) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    LOCAL_VAR       shift and go to state 222
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63

    num                            shift and go to state 224
    arithmetic_production          shift and go to state 228

state 190

    (136) arithmetic_operators -> PLUS .

    LOCAL_VAR       reduce using rule 136 (arithmetic_operators -> PLUS .)
    FLOAT           reduce using rule 136 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 136 (arithmetic_operators -> PLUS .)


state 191

    (75) concatenar_string -> STRING PLUS . STRING
    (76) concatenar_string -> STRING PLUS . LOCAL_VAR

    STRING          shift and go to state 229
    LOCAL_VAR       shift and go to state 230


state 192

    (149) proc_call -> LOCAL_VAR DOT CALL LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 231
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 193

    (150) proc_call -> LOCAL_VAR DOT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 232


state 194

    (151) proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .

    $end            reduce using rule 151 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 151 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 151 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)


state 195

    (54) acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .

    $end            reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    END_LOWER       reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    NEWLINE         reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)


state 196

    (80) hash_declaration -> HASH LEFT_COR values RIGHT_COR .

    $end            reduce using rule 80 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 80 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 80 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)


state 197

    (120) set_expression -> SET DOT NEW LEFTPAR . LEFT_COR values RIGHT_COR RIGHTPAR

    LEFT_COR        shift and go to state 233


state 198

    (121) set_expression -> SET LEFT_COR values RIGHT_COR .

    $end            reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PLUS            reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    MINUS           reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    AMPERSAND       reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PIPE            reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    CARET           reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 121 (set_expression -> SET LEFT_COR values RIGHT_COR .)


state 199

    (55) ifStatement -> IF condiciones NEWLINE codigo . END_LOWER
    (56) ifStatement -> IF condiciones NEWLINE codigo . NEWLINE else_statement END_LOWER

    END_LOWER       shift and go to state 235
    NEWLINE         shift and go to state 234


state 200

    (58) condiciones -> condiciones conectores condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
    NEWLINE         reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    COLON           reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    $end            reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    END_LOWER       reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    RBRACE          reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    END             reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    ELSE            reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

  ! AND             [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 144

state 201

    (63) condicion -> num operComp num .

    NEWLINE         reduce using rule 63 (condicion -> num operComp num .)
    AND             reduce using rule 63 (condicion -> num operComp num .)
    OR              reduce using rule 63 (condicion -> num operComp num .)
    AND_RESERVED    reduce using rule 63 (condicion -> num operComp num .)
    OR_RESERVED     reduce using rule 63 (condicion -> num operComp num .)
    COLON           reduce using rule 63 (condicion -> num operComp num .)
    $end            reduce using rule 63 (condicion -> num operComp num .)
    END_LOWER       reduce using rule 63 (condicion -> num operComp num .)
    RBRACE          reduce using rule 63 (condicion -> num operComp num .)
    END             reduce using rule 63 (condicion -> num operComp num .)
    ELSE            reduce using rule 63 (condicion -> num operComp num .)


state 202

    (65) condicion -> num operComp var .

    NEWLINE         reduce using rule 65 (condicion -> num operComp var .)
    AND             reduce using rule 65 (condicion -> num operComp var .)
    OR              reduce using rule 65 (condicion -> num operComp var .)
    AND_RESERVED    reduce using rule 65 (condicion -> num operComp var .)
    OR_RESERVED     reduce using rule 65 (condicion -> num operComp var .)
    COLON           reduce using rule 65 (condicion -> num operComp var .)
    $end            reduce using rule 65 (condicion -> num operComp var .)
    END_LOWER       reduce using rule 65 (condicion -> num operComp var .)
    RBRACE          reduce using rule 65 (condicion -> num operComp var .)
    END             reduce using rule 65 (condicion -> num operComp var .)
    ELSE            reduce using rule 65 (condicion -> num operComp var .)


state 203

    (64) condicion -> var operComp num .

    NEWLINE         reduce using rule 64 (condicion -> var operComp num .)
    AND             reduce using rule 64 (condicion -> var operComp num .)
    OR              reduce using rule 64 (condicion -> var operComp num .)
    AND_RESERVED    reduce using rule 64 (condicion -> var operComp num .)
    OR_RESERVED     reduce using rule 64 (condicion -> var operComp num .)
    COLON           reduce using rule 64 (condicion -> var operComp num .)
    $end            reduce using rule 64 (condicion -> var operComp num .)
    END_LOWER       reduce using rule 64 (condicion -> var operComp num .)
    RBRACE          reduce using rule 64 (condicion -> var operComp num .)
    END             reduce using rule 64 (condicion -> var operComp num .)
    ELSE            reduce using rule 64 (condicion -> var operComp num .)


state 204

    (88) while_statement -> WHILE condiciones COLON codigo .

    $end            reduce using rule 88 (while_statement -> WHILE condiciones COLON codigo .)
    END_LOWER       reduce using rule 88 (while_statement -> WHILE condiciones COLON codigo .)
    NEWLINE         reduce using rule 88 (while_statement -> WHILE condiciones COLON codigo .)


state 205

    (130) unless_expression -> UNLESS boolean_expression THEN expresion . END
    (131) unless_expression -> UNLESS boolean_expression THEN expresion . ELSE expresion END

    END             shift and go to state 236
    ELSE            shift and go to state 237


state 206

    (93) boolean_expression -> expression GREATER expression .

    THEN            reduce using rule 93 (boolean_expression -> expression GREATER expression .)


state 207

    (94) boolean_expression -> expression LESS expression .

    THEN            reduce using rule 94 (boolean_expression -> expression LESS expression .)


state 208

    (95) boolean_expression -> expression GREATER_EQUAL expression .

    THEN            reduce using rule 95 (boolean_expression -> expression GREATER_EQUAL expression .)


state 209

    (96) boolean_expression -> expression LESS_EQUAL expression .

    THEN            reduce using rule 96 (boolean_expression -> expression LESS_EQUAL expression .)


state 210

    (97) boolean_expression -> expression EQUAL expression .

    THEN            reduce using rule 97 (boolean_expression -> expression EQUAL expression .)


state 211

    (98) boolean_expression -> expression NOT_EQUAL expression .

    THEN            reduce using rule 98 (boolean_expression -> expression NOT_EQUAL expression .)


state 212

    (48) array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .

    $end            reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    LEFT_COR        reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    END_LOWER       reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    NEWLINE         reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)


state 213

    (27) values_space -> value SPACE . values_space
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    value                          shift and go to state 168
    values_space                   shift and go to state 238
    num                            shift and go to state 57
    var                            shift and go to state 58

state 214

    (50) array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .

    $end            reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    LEFT_COR        reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    END_LOWER       reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    NEWLINE         reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)


state 215

    (52) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER COMMA values RIGHTPAR

    INTEGER         shift and go to state 239


state 216

    (144) block_expression -> LBRACE PIPE LOCAL_VAR PIPE . expresion RBRACE
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 240
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 217

    (92) print_statement -> PUT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 241


state 218

    (89) condition_with_connectors -> condiciones conectores condiciones .
    (58) condiciones -> condiciones conectores condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
    RBRACE          reduce using rule 89 (condition_with_connectors -> condiciones conectores condiciones .)
    END             reduce using rule 89 (condition_with_connectors -> condiciones conectores condiciones .)
    ELSE            reduce using rule 89 (condition_with_connectors -> condiciones conectores condiciones .)
    AND             shift and go to state 145
    OR              shift and go to state 146
    AND_RESERVED    shift and go to state 147
    OR_RESERVED     shift and go to state 148

  ! AND             [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 144

state 219

    (145) block_expression -> DO PIPE LOCAL_VAR PIPE . expresion END
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 242
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 220

    (37) gets -> GETS DOT CHOMP DOT TO_F .

    $end            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    END_LOWER       reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    NEWLINE         reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)


state 221

    (38) gets -> GETS DOT CHOMP DOT TO_I .

    $end            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    END_LOWER       reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    NEWLINE         reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)


state 222

    (133) arithmetic_production -> LOCAL_VAR .
    (135) arithmetic_production -> LOCAL_VAR . arithmetic_operators arithmetic_production
    (136) arithmetic_operators -> . PLUS
    (137) arithmetic_operators -> . MINUS
    (138) arithmetic_operators -> . MULTIPLY
    (139) arithmetic_operators -> . DIVIDE
    (140) arithmetic_operators -> . MODULO
    (141) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 133 (arithmetic_production -> LOCAL_VAR .)
    END_LOWER       reduce using rule 133 (arithmetic_production -> LOCAL_VAR .)
    NEWLINE         reduce using rule 133 (arithmetic_production -> LOCAL_VAR .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 183
    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    MODULO          shift and go to state 186
    EXPONENT        shift and go to state 187

    arithmetic_operators           shift and go to state 181

state 223

    (135) arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .

    $end            reduce using rule 135 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 135 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 135 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)


state 224

    (132) arithmetic_production -> num .
    (134) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (136) arithmetic_operators -> . PLUS
    (137) arithmetic_operators -> . MINUS
    (138) arithmetic_operators -> . MULTIPLY
    (139) arithmetic_operators -> . DIVIDE
    (140) arithmetic_operators -> . MODULO
    (141) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 132 (arithmetic_production -> num .)
    END_LOWER       reduce using rule 132 (arithmetic_production -> num .)
    NEWLINE         reduce using rule 132 (arithmetic_production -> num .)
    PLUS            shift and go to state 190
    MINUS           shift and go to state 183
    MULTIPLY        shift and go to state 184
    DIVIDE          shift and go to state 185
    MODULO          shift and go to state 186
    EXPONENT        shift and go to state 187

    arithmetic_operators           shift and go to state 189

state 225

    (78) concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .

    $end            reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)
    END_LOWER       reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)
    NEWLINE         reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)


state 226

    (77) concatenar_string -> LOCAL_VAR PLUS STRING .

    $end            reduce using rule 77 (concatenar_string -> LOCAL_VAR PLUS STRING .)
    END_LOWER       reduce using rule 77 (concatenar_string -> LOCAL_VAR PLUS STRING .)
    NEWLINE         reduce using rule 77 (concatenar_string -> LOCAL_VAR PLUS STRING .)


state 227

    (147) proc_expression -> PROC DOT NEW . block_expression
    (142) block_expression -> . LBRACE expresion RBRACE
    (143) block_expression -> . DO expresion END
    (144) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (145) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    LBRACE          shift and go to state 53
    DO              shift and go to state 54

    block_expression               shift and go to state 243

state 228

    (134) arithmetic_production -> num arithmetic_operators arithmetic_production .

    $end            reduce using rule 134 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 134 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 134 (arithmetic_production -> num arithmetic_operators arithmetic_production .)


state 229

    (75) concatenar_string -> STRING PLUS STRING .

    $end            reduce using rule 75 (concatenar_string -> STRING PLUS STRING .)
    END_LOWER       reduce using rule 75 (concatenar_string -> STRING PLUS STRING .)
    NEWLINE         reduce using rule 75 (concatenar_string -> STRING PLUS STRING .)


state 230

    (76) concatenar_string -> STRING PLUS LOCAL_VAR .

    $end            reduce using rule 76 (concatenar_string -> STRING PLUS LOCAL_VAR .)
    END_LOWER       reduce using rule 76 (concatenar_string -> STRING PLUS LOCAL_VAR .)
    NEWLINE         reduce using rule 76 (concatenar_string -> STRING PLUS LOCAL_VAR .)


state 231

    (149) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 244


state 232

    (150) proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .

    $end            reduce using rule 150 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 150 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 150 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)


state 233

    (120) set_expression -> SET DOT NEW LEFTPAR LEFT_COR . values RIGHT_COR RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 245
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 234

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE . else_statement END_LOWER
    (73) else_statement -> . ELSE NEWLINE codigo

    ELSE            shift and go to state 247

    else_statement                 shift and go to state 246

state 235

    (55) ifStatement -> IF condiciones NEWLINE codigo END_LOWER .

    $end            reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    END_LOWER       reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    NEWLINE         reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)


state 236

    (130) unless_expression -> UNLESS boolean_expression THEN expresion END .

    $end            reduce using rule 130 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    END_LOWER       reduce using rule 130 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    NEWLINE         reduce using rule 130 (unless_expression -> UNLESS boolean_expression THEN expresion END .)


state 237

    (131) unless_expression -> UNLESS boolean_expression THEN expresion ELSE . expresion END
    (117) expresion -> . puts
    (118) expresion -> . gets
    (119) expresion -> . print_statement
    (152) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (92) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (89) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (63) condicion -> . num operComp num
    (64) condicion -> . var operComp num
    (65) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 110
    GETS            shift and go to state 14
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    expresion                      shift and go to state 248
    puts                           shift and go to state 106
    gets                           shift and go to state 107
    print_statement                shift and go to state 108
    condition_with_connectors      shift and go to state 109
    condiciones                    shift and go to state 111
    condicion                      shift and go to state 88
    num                            shift and go to state 89
    var                            shift and go to state 90

state 238

    (27) values_space -> value SPACE values_space .

    RIGHT_COR       reduce using rule 27 (values_space -> value SPACE values_space .)


state 239

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . COMMA values RIGHTPAR

    RIGHTPAR        shift and go to state 249
    COMMA           shift and go to state 250


state 240

    (144) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion . RBRACE

    RBRACE          shift and go to state 251


state 241

    (92) print_statement -> PUT LEFTPAR values RIGHTPAR .

    RBRACE          reduce using rule 92 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    END             reduce using rule 92 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 92 (print_statement -> PUT LEFTPAR values RIGHTPAR .)


state 242

    (145) block_expression -> DO PIPE LOCAL_VAR PIPE expresion . END

    END             shift and go to state 252


state 243

    (147) proc_expression -> PROC DOT NEW block_expression .

    $end            reduce using rule 147 (proc_expression -> PROC DOT NEW block_expression .)
    END_LOWER       reduce using rule 147 (proc_expression -> PROC DOT NEW block_expression .)
    NEWLINE         reduce using rule 147 (proc_expression -> PROC DOT NEW block_expression .)


state 244

    (149) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .

    $end            reduce using rule 149 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 149 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 149 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)


state 245

    (120) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values . RIGHT_COR RIGHTPAR

    RIGHT_COR       shift and go to state 253


state 246

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement . END_LOWER

    END_LOWER       shift and go to state 254


state 247

    (73) else_statement -> ELSE . NEWLINE codigo

    NEWLINE         shift and go to state 255


state 248

    (131) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion . END

    END             shift and go to state 256


state 249

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .

    $end            reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    LEFT_COR        reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    END_LOWER       reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    NEWLINE         reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)


state 250

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 59
    NIL             shift and go to state 60
    SYMBOL          shift and go to state 61
    FLOAT           shift and go to state 62
    INTEGER         shift and go to state 63
    LOCAL_VAR       shift and go to state 64
    INSTANCE_VAR    shift and go to state 65
    CLASS_VAR       shift and go to state 66
    GLOBAL_VAR      shift and go to state 67

    values                         shift and go to state 257
    value                          shift and go to state 56
    num                            shift and go to state 57
    var                            shift and go to state 58

state 251

    (144) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .

    $end            reduce using rule 144 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    END_LOWER       reduce using rule 144 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    NEWLINE         reduce using rule 144 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)


state 252

    (145) block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .

    $end            reduce using rule 145 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    END_LOWER       reduce using rule 145 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    NEWLINE         reduce using rule 145 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)


state 253

    (120) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR . RIGHTPAR

    RIGHTPAR        shift and go to state 258


state 254

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .

    $end            reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    END_LOWER       reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    NEWLINE         reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)


state 255

    (73) else_statement -> ELSE NEWLINE . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (12) estructurasDatos -> . array
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (90) method_call -> . var LEFTPAR values RIGHTPAR
    (91) method_call -> . var LEFTPAR RIGHTPAR
    (146) block_assignment -> . method_call block_expression
    (148) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (149) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (150) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (151) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (111) declaraciones -> . variable_declaration
    (112) declaraciones -> . store_conditional_result
    (113) declaraciones -> . declare_data_structures
    (114) declaraciones -> . var_arreglo
    (115) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (116) declaraciones -> . declaracion_concatenar_string
    (102) expression -> . INTEGER
    (103) expression -> . FLOAT
    (104) expression -> . variable
    (105) expression -> . STRING
    (74) to_string -> . LOCAL_VAR DOT TO_S
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (80) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (81) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (82) hash_access -> . var LEFT_COR value RIGHT_COR
    (83) hash_operations -> . hash_access ASSIGN value
    (120) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (121) set_expression -> . SET LEFT_COR values RIGHT_COR
    (122) set_operations -> . set_expression
    (123) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (88) while_statement -> . WHILE condiciones COLON codigo
    (130) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (131) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (84) variable_declaration -> . LOCAL_VAR ASSIGN value
    (85) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (86) declare_data_structures -> . var_arreglo
    (87) declare_data_structures -> . hash_declaration
    (124) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (79) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (106) variable -> . LOCAL_VAR
    (107) variable -> . INSTANCE_VAR
    (108) variable -> . CLASS_VAR
    (109) variable -> . GLOBAL_VAR
    (110) variable -> . CONSTANT
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 13
    GETS            shift and go to state 14
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    HASH            shift and go to state 41
    SET             shift and go to state 42
    IF              shift and go to state 43
    WHILE           shift and go to state 44
    UNLESS          shift and go to state 45
    INSTANCE_VAR    shift and go to state 46
    CLASS_VAR       shift and go to state 47
    GLOBAL_VAR      shift and go to state 48
    CONSTANT        shift and go to state 49
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 50
    ARRAY           shift and go to state 51

    codigo                         shift and go to state 259
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    array                          shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    array_explicito                shift and go to state 37
    array_implicito                shift and go to state 38
    array_creation                 shift and go to state 39
    newArray                       shift and go to state 40

state 256

    (131) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .

    $end            reduce using rule 131 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    END_LOWER       reduce using rule 131 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    NEWLINE         reduce using rule 131 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)


state 257

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values . RIGHTPAR

    RIGHTPAR        shift and go to state 260


state 258

    (120) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .

    $end            reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PLUS            reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    MINUS           reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    AMPERSAND       reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PIPE            reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    CARET           reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    END_LOWER       reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    NEWLINE         reduce using rule 120 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)


state 259

    (73) else_statement -> ELSE NEWLINE codigo .

    END_LOWER       reduce using rule 73 (else_statement -> ELSE NEWLINE codigo .)


state 260

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .

    $end            reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    LEFT_COR        reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    END_LOWER       reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    NEWLINE         reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_COR in state 26 resolved as shift
WARNING: shift/reduce conflict for LOCAL_VAR in state 182 resolved as shift
WARNING: shift/reduce conflict for AND in state 200 resolved as shift
WARNING: shift/reduce conflict for OR in state 200 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 200 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 200 resolved as shift
WARNING: shift/reduce conflict for AND in state 218 resolved as shift
WARNING: shift/reduce conflict for OR in state 218 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 218 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 218 resolved as shift
WARNING: reduce/reduce conflict in state 17 resolved using rule (estructurasDatos -> hash_declaration)
WARNING: rejected rule (declare_data_structures -> hash_declaration) in state 17
WARNING: reduce/reduce conflict in state 20 resolved using rule (estructurasDatos -> set_expression)
WARNING: rejected rule (set_operations -> set_expression) in state 20
WARNING: reduce/reduce conflict in state 31 resolved using rule (declare_data_structures -> var_arreglo)
WARNING: rejected rule (declaraciones -> var_arreglo) in state 31
WARNING: reduce/reduce conflict in state 121 resolved using rule (var -> LOCAL_VAR)
WARNING: rejected rule (arithmetic_production -> LOCAL_VAR) in state 121
WARNING: reduce/reduce conflict in state 130 resolved using rule (value -> num)
WARNING: rejected rule (arithmetic_production -> num) in state 130
WARNING: Rule (declare_data_structures -> hash_declaration) is never reduced
WARNING: Rule (declaraciones -> var_arreglo) is never reduced
