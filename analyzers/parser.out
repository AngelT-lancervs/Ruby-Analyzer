Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BEGIN
    BIN_INTEGER
    BOOLEAN
    BREAK
    CASE
    CASE_EQUAL
    CLASS
    DEF
    DEFINED
    DIVIDE_ASSIGN
    DOUBLE_QUOTE
    ELSIF
    EXPONENT_ASSIGN
    FOR
    HEX_INTEGER
    IN
    MINUS_ASSIGN
    MODULE
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NMAP
    NOT
    OCT_INTEGER
    PLUS_ASSIGN
    QUOTATION
    RANGEEX
    RANGEIN
    REDO
    RETURN
    SELF
    TAB
    UNTIL
    WHEN

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> puts
Rule 2     codigo -> gets
Rule 3     codigo -> estructurasDatos
Rule 4     codigo -> estructurasControl
Rule 5     codigo -> method_call
Rule 6     codigo -> block_assignment
Rule 7     codigo -> proc_assignment
Rule 8     codigo -> proc_call
Rule 9     codigo -> declaraciones
Rule 10    codigo -> expression
Rule 11    codigo -> to_string
Rule 12    codigo -> comparador
Rule 13    estructurasDatos -> array
Rule 14    estructurasDatos -> acceder_arreglo
Rule 15    estructurasDatos -> hash_operations
Rule 16    estructurasDatos -> hash_var
Rule 17    estructurasDatos -> set_expression
Rule 18    estructurasDatos -> set_operations
Rule 19    estructurasControl -> ifStatement
Rule 20    estructurasControl -> while_statement
Rule 21    estructurasControl -> unless_expression
Rule 22    value -> num
Rule 23    value -> var
Rule 24    value -> STRING
Rule 25    value -> NIL
Rule 26    value -> SYMBOL
Rule 27    values_space -> value SPACE values_space
Rule 28    values_space -> value
Rule 29    values -> value
Rule 30    values -> value COMMA values
Rule 31    var -> LOCAL_VAR
Rule 32    var -> INSTANCE_VAR
Rule 33    var -> CLASS_VAR
Rule 34    var -> GLOBAL_VAR
Rule 35    num -> FLOAT
Rule 36    num -> INTEGER
Rule 37    gets -> GETS DOT CHOMP DOT TO_F
Rule 38    gets -> GETS DOT CHOMP DOT TO_I
Rule 39    gets -> GETS DOT CHOMP
Rule 40    puts -> PUT values
Rule 41    array -> array_explicito
Rule 42    array -> array_implicito
Rule 43    array -> array_creation
Rule 44    array -> newArray
Rule 45    var_arreglo -> LOCAL_VAR ASSIGN array
Rule 46    array_explicito -> LEFT_COR values RIGHT_COR
Rule 47    array_explicito -> LEFT_COR RIGHT_COR
Rule 48    array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR
Rule 49    array_implicito -> PERCENTW LEFT_COR RIGHT_COR
Rule 50    array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR
Rule 51    newArray -> ARRAY DOT NEW
Rule 52    newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
Rule 53    newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
Rule 54    acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR
Rule 55    ifStatement -> IF condiciones NEWLINE codigo END_LOWER
Rule 56    ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
Rule 57    condiciones -> condicion
Rule 58    condiciones -> condiciones conectores condiciones
Rule 59    conectores -> AND
Rule 60    conectores -> OR
Rule 61    conectores -> AND_RESERVED
Rule 62    conectores -> OR_RESERVED
Rule 63    conectores -> EQUAL
Rule 64    condicion -> num operComp num
Rule 65    condicion -> var operComp num
Rule 66    condicion -> num operComp var
Rule 67    operComp -> GREATER
Rule 68    operComp -> LESS
Rule 69    operComp -> GREATER_EQUAL
Rule 70    operComp -> LESS_EQUAL
Rule 71    operComp -> EQUAL
Rule 72    operComp -> NOT_EQUAL
Rule 73    operComp -> COMPARE
Rule 74    else_statement -> ELSE NEWLINE codigo
Rule 75    to_string -> LOCAL_VAR DOT TO_S
Rule 76    concatenar_string -> STRING PLUS STRING
Rule 77    concatenar_string -> STRING PLUS LOCAL_VAR
Rule 78    concatenar_string -> LOCAL_VAR PLUS STRING
Rule 79    concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR
Rule 80    declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string
Rule 81    hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE
Rule 82    hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE
Rule 83    hash_values -> STRING HASH_ROCKET value
Rule 84    hash_values -> STRING HASH_ROCKET value COMMA hash_values
Rule 85    hash_access -> var LBRACE value RBRACE
Rule 86    hash_operations -> hash_access ASSIGN value
Rule 87    variable_declaration -> LOCAL_VAR ASSIGN value
Rule 88    store_conditional_result -> LOCAL_VAR ASSIGN condiciones
Rule 89    declare_data_structures -> var_arreglo
Rule 90    declare_data_structures -> hash_var
Rule 91    while_statement -> WHILE condiciones COLON codigo
Rule 92    condition_with_connectors -> condiciones conectores condiciones
Rule 93    method_call -> var LEFTPAR values RIGHTPAR
Rule 94    method_call -> var LEFTPAR RIGHTPAR
Rule 95    print_statement -> PUT LEFTPAR values RIGHTPAR
Rule 96    boolean_expression -> expression GREATER expression
Rule 97    boolean_expression -> expression LESS expression
Rule 98    boolean_expression -> expression GREATER_EQUAL expression
Rule 99    boolean_expression -> expression LESS_EQUAL expression
Rule 100   boolean_expression -> expression EQUAL expression
Rule 101   boolean_expression -> expression NOT_EQUAL expression
Rule 102   boolean_expression -> boolean_value
Rule 103   boolean_value -> TRUE
Rule 104   boolean_value -> FALSE
Rule 105   expression -> INTEGER
Rule 106   expression -> FLOAT
Rule 107   expression -> variable
Rule 108   expression -> STRING
Rule 109   variable -> LOCAL_VAR
Rule 110   variable -> INSTANCE_VAR
Rule 111   variable -> CLASS_VAR
Rule 112   variable -> GLOBAL_VAR
Rule 113   variable -> CONSTANT
Rule 114   declaraciones -> variable_declaration
Rule 115   declaraciones -> store_conditional_result
Rule 116   declaraciones -> declare_data_structures
Rule 117   declaraciones -> var_arreglo
Rule 118   declaraciones -> hash_var
Rule 119   declaraciones -> LOCAL_VAR ASSIGN arithmetic_production
Rule 120   declaraciones -> declaracion_concatenar_string
Rule 121   expresion -> puts
Rule 122   expresion -> gets
Rule 123   expresion -> print_statement
Rule 124   comparador -> value EQUAL value
Rule 125   comparador -> value COMPARE value
Rule 126   set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
Rule 127   set_expression -> SET LEFT_COR values RIGHT_COR
Rule 128   set_operations -> set_expression
Rule 129   set_operations -> set_operations set_binary_operators set_expression
Rule 130   declare_data_structures -> LOCAL_VAR ASSIGN set_expression
Rule 131   set_binary_operators -> PLUS
Rule 132   set_binary_operators -> MINUS
Rule 133   set_binary_operators -> AMPERSAND
Rule 134   set_binary_operators -> PIPE
Rule 135   set_binary_operators -> CARET
Rule 136   unless_expression -> UNLESS boolean_expression THEN expresion END
Rule 137   unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END
Rule 138   arithmetic_production -> num
Rule 139   arithmetic_production -> LOCAL_VAR
Rule 140   arithmetic_production -> num arithmetic_operators arithmetic_production
Rule 141   arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production
Rule 142   arithmetic_operators -> PLUS
Rule 143   arithmetic_operators -> MINUS
Rule 144   arithmetic_operators -> MULTIPLY
Rule 145   arithmetic_operators -> DIVIDE
Rule 146   arithmetic_operators -> MODULO
Rule 147   arithmetic_operators -> EXPONENT
Rule 148   block_expression -> LBRACE expresion RBRACE
Rule 149   block_expression -> DO expresion END
Rule 150   block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
Rule 151   block_expression -> DO PIPE LOCAL_VAR PIPE expresion END
Rule 152   block_assignment -> method_call block_expression
Rule 153   proc_expression -> PROC DOT NEW block_expression
Rule 154   proc_assignment -> LOCAL_VAR ASSIGN proc_expression
Rule 155   proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
Rule 156   proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR
Rule 157   proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR
Rule 158   expresion -> condition_with_connectors

Terminals, with rules where they appear

AMPERSAND            : 133
AND                  : 59
AND_RESERVED         : 61
ARRAY                : 50 51 52 53
ASSIGN               : 45 80 81 82 86 87 88 119 130 154
BACKSLASH            : 
BEGIN                : 
BIN_INTEGER          : 
BOOLEAN              : 
BREAK                : 
CALL                 : 155
CARET                : 135
CASE                 : 
CASE_EQUAL           : 
CHOMP                : 37 38 39
CLASS                : 
CLASS_VAR            : 33 111
COLON                : 91
COMMA                : 30 53 84
COMPARE              : 73 125
CONSTANT             : 113
DEF                  : 
DEFINED              : 
DIVIDE               : 145
DIVIDE_ASSIGN        : 
DO                   : 149 151
DOT                  : 37 37 38 38 39 51 52 53 75 126 153 155 156
DOUBLE_QUOTE         : 
ELSE                 : 74 137
ELSIF                : 
END                  : 136 137 149 151
END_LOWER            : 55 56
EQUAL                : 63 71 100 124
EXPONENT             : 147
EXPONENT_ASSIGN      : 
FALSE                : 104
FLOAT                : 35 106
FOR                  : 
GETS                 : 37 38 39
GLOBAL_VAR           : 34 112
GREATER              : 67 96
GREATER_EQUAL        : 69 98
HASH_ROCKET          : 83 84
HEX_INTEGER          : 
IF                   : 55 56
IN                   : 
INSTANCE_VAR         : 32 110
INTEGER              : 36 52 53 54 105
LBRACE               : 81 82 85 148 150
LEFTPAR              : 50 52 53 93 94 95 126 155 156
LEFT_COR             : 46 47 48 49 54 126 127 157
LESS                 : 68 97
LESS_EQUAL           : 70 99
LOCAL_VAR            : 31 45 75 77 78 79 79 80 81 82 87 88 109 119 130 139 141 150 151 154 155 156 157
MINUS                : 132 143
MINUS_ASSIGN         : 
MODULE               : 
MODULO               : 146
MODULO_ASSIGN        : 
MULTIPLY             : 144
MULTIPLY_ASSIGN      : 
NEW                  : 51 52 53 126 153
NEWLINE              : 55 56 56 74
NIL                  : 25
NMAP                 : 
NOT                  : 
NOT_EQUAL            : 72 101
OCT_INTEGER          : 
OR                   : 60
OR_RESERVED          : 62
PERCENTW             : 48 49
PIPE                 : 134 150 150 151 151
PLUS                 : 76 77 78 79 131 142
PLUS_ASSIGN          : 
PROC                 : 153
PUT                  : 40 95
QUOTATION            : 
RANGEEX              : 
RANGEIN              : 
RBRACE               : 81 82 85 148 150
REDO                 : 
RETURN               : 
RIGHTPAR             : 50 52 53 93 94 95 126 155 156
RIGHT_COR            : 46 47 48 49 54 126 127 157
SELF                 : 
SET                  : 126 127
SPACE                : 27
STRING               : 24 76 76 77 78 83 84 108
SYMBOL               : 26
TAB                  : 
THEN                 : 136 137
TO_F                 : 37
TO_I                 : 38
TO_S                 : 75
TRUE                 : 103
UNLESS               : 136 137
UNTIL                : 
WHEN                 : 
WHILE                : 91
error                : 

Nonterminals, with rules where they appear

acceder_arreglo      : 14
arithmetic_operators : 140 141
arithmetic_production : 119 140 141
array                : 13 45
array_creation       : 43
array_explicito      : 41 50
array_implicito      : 42
block_assignment     : 6
block_expression     : 152 153
boolean_expression   : 136 137
boolean_value        : 102
codigo               : 55 56 74 91 0
comparador           : 12
concatenar_string    : 80
condicion            : 57
condiciones          : 55 56 58 58 88 91 92 92
condition_with_connectors : 158
conectores           : 58 92
declaracion_concatenar_string : 120
declaraciones        : 9
declare_data_structures : 116
else_statement       : 56
estructurasControl   : 4
estructurasDatos     : 3
expresion            : 136 137 137 148 149 150 151
expression           : 10 96 96 97 97 98 98 99 99 100 100 101 101
gets                 : 2 122
hash_access          : 86
hash_operations      : 15
hash_values          : 81 84
hash_var             : 16 90 118
ifStatement          : 19
method_call          : 5 152
newArray             : 44
num                  : 22 64 64 65 66 138 140
operComp             : 64 65 66
print_statement      : 123
proc_assignment      : 7
proc_call            : 8
proc_expression      : 154
puts                 : 1 121
set_binary_operators : 129
set_expression       : 17 128 129 130
set_operations       : 18 129
store_conditional_result : 115
to_string            : 11
unless_expression    : 21
value                : 27 28 29 30 83 84 85 86 87 124 124 125 125
values               : 30 40 46 53 93 95 126 127 155 156 157
values_space         : 27 48
var                  : 23 65 66 85 93 94
var_arreglo          : 54 89 117
variable             : 107
variable_declaration : 114
while_statement      : 20

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (12) codigo -> . comparador
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (13) estructurasDatos -> . array
    (14) estructurasDatos -> . acceder_arreglo
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . hash_var
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (93) method_call -> . var LEFTPAR values RIGHTPAR
    (94) method_call -> . var LEFTPAR RIGHTPAR
    (152) block_assignment -> . method_call block_expression
    (154) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (155) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (157) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (114) declaraciones -> . variable_declaration
    (115) declaraciones -> . store_conditional_result
    (116) declaraciones -> . declare_data_structures
    (117) declaraciones -> . var_arreglo
    (118) declaraciones -> . hash_var
    (119) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (120) declaraciones -> . declaracion_concatenar_string
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (75) to_string -> . LOCAL_VAR DOT TO_S
    (124) comparador -> . value EQUAL value
    (125) comparador -> . value COMPARE value
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (86) hash_operations -> . hash_access ASSIGN value
    (81) hash_var -> . LOCAL_VAR ASSIGN LBRACE hash_values RBRACE
    (82) hash_var -> . LOCAL_VAR ASSIGN LBRACE RBRACE
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR
    (128) set_operations -> . set_expression
    (129) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (91) while_statement -> . WHILE condiciones COLON codigo
    (136) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (137) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (87) variable_declaration -> . LOCAL_VAR ASSIGN value
    (88) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (89) declare_data_structures -> . var_arreglo
    (90) declare_data_structures -> . hash_var
    (130) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (80) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (85) hash_access -> . var LBRACE value RBRACE
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    PUT             shift and go to state 14
    GETS            shift and go to state 15
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    SET             shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    UNLESS          shift and go to state 46
    INSTANCE_VAR    shift and go to state 47
    CLASS_VAR       shift and go to state 48
    GLOBAL_VAR      shift and go to state 49
    CONSTANT        shift and go to state 50
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 54
    ARRAY           shift and go to state 55

    codigo                         shift and go to state 1
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    comparador                     shift and go to state 13
    array                          shift and go to state 16
    acceder_arreglo                shift and go to state 17
    hash_operations                shift and go to state 18
    hash_var                       shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    value                          shift and go to state 37
    array_explicito                shift and go to state 38
    array_implicito                shift and go to state 39
    array_creation                 shift and go to state 40
    newArray                       shift and go to state 41
    hash_access                    shift and go to state 42
    num                            shift and go to state 51

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> puts .

    $end            reduce using rule 1 (codigo -> puts .)
    END_LOWER       reduce using rule 1 (codigo -> puts .)
    NEWLINE         reduce using rule 1 (codigo -> puts .)


state 3

    (2) codigo -> gets .

    $end            reduce using rule 2 (codigo -> gets .)
    END_LOWER       reduce using rule 2 (codigo -> gets .)
    NEWLINE         reduce using rule 2 (codigo -> gets .)


state 4

    (3) codigo -> estructurasDatos .

    $end            reduce using rule 3 (codigo -> estructurasDatos .)
    END_LOWER       reduce using rule 3 (codigo -> estructurasDatos .)
    NEWLINE         reduce using rule 3 (codigo -> estructurasDatos .)


state 5

    (4) codigo -> estructurasControl .

    $end            reduce using rule 4 (codigo -> estructurasControl .)
    END_LOWER       reduce using rule 4 (codigo -> estructurasControl .)
    NEWLINE         reduce using rule 4 (codigo -> estructurasControl .)


state 6

    (5) codigo -> method_call .
    (152) block_assignment -> method_call . block_expression
    (148) block_expression -> . LBRACE expresion RBRACE
    (149) block_expression -> . DO expresion END
    (150) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (151) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    $end            reduce using rule 5 (codigo -> method_call .)
    END_LOWER       reduce using rule 5 (codigo -> method_call .)
    NEWLINE         reduce using rule 5 (codigo -> method_call .)
    LBRACE          shift and go to state 57
    DO              shift and go to state 58

    block_expression               shift and go to state 56

state 7

    (6) codigo -> block_assignment .

    $end            reduce using rule 6 (codigo -> block_assignment .)
    END_LOWER       reduce using rule 6 (codigo -> block_assignment .)
    NEWLINE         reduce using rule 6 (codigo -> block_assignment .)


state 8

    (7) codigo -> proc_assignment .

    $end            reduce using rule 7 (codigo -> proc_assignment .)
    END_LOWER       reduce using rule 7 (codigo -> proc_assignment .)
    NEWLINE         reduce using rule 7 (codigo -> proc_assignment .)


state 9

    (8) codigo -> proc_call .

    $end            reduce using rule 8 (codigo -> proc_call .)
    END_LOWER       reduce using rule 8 (codigo -> proc_call .)
    NEWLINE         reduce using rule 8 (codigo -> proc_call .)


state 10

    (9) codigo -> declaraciones .

    $end            reduce using rule 9 (codigo -> declaraciones .)
    END_LOWER       reduce using rule 9 (codigo -> declaraciones .)
    NEWLINE         reduce using rule 9 (codigo -> declaraciones .)


state 11

    (10) codigo -> expression .

    $end            reduce using rule 10 (codigo -> expression .)
    END_LOWER       reduce using rule 10 (codigo -> expression .)
    NEWLINE         reduce using rule 10 (codigo -> expression .)


state 12

    (11) codigo -> to_string .

    $end            reduce using rule 11 (codigo -> to_string .)
    END_LOWER       reduce using rule 11 (codigo -> to_string .)
    NEWLINE         reduce using rule 11 (codigo -> to_string .)


state 13

    (12) codigo -> comparador .

    $end            reduce using rule 12 (codigo -> comparador .)
    END_LOWER       reduce using rule 12 (codigo -> comparador .)
    NEWLINE         reduce using rule 12 (codigo -> comparador .)


state 14

    (40) puts -> PUT . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 59
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 15

    (37) gets -> GETS . DOT CHOMP DOT TO_F
    (38) gets -> GETS . DOT CHOMP DOT TO_I
    (39) gets -> GETS . DOT CHOMP

    DOT             shift and go to state 69


state 16

    (13) estructurasDatos -> array .

    $end            reduce using rule 13 (estructurasDatos -> array .)
    END_LOWER       reduce using rule 13 (estructurasDatos -> array .)
    NEWLINE         reduce using rule 13 (estructurasDatos -> array .)


state 17

    (14) estructurasDatos -> acceder_arreglo .

    $end            reduce using rule 14 (estructurasDatos -> acceder_arreglo .)
    END_LOWER       reduce using rule 14 (estructurasDatos -> acceder_arreglo .)
    NEWLINE         reduce using rule 14 (estructurasDatos -> acceder_arreglo .)


state 18

    (15) estructurasDatos -> hash_operations .

    $end            reduce using rule 15 (estructurasDatos -> hash_operations .)
    END_LOWER       reduce using rule 15 (estructurasDatos -> hash_operations .)
    NEWLINE         reduce using rule 15 (estructurasDatos -> hash_operations .)


state 19

    (16) estructurasDatos -> hash_var .
    (118) declaraciones -> hash_var .
    (90) declare_data_structures -> hash_var .

  ! reduce/reduce conflict for $end resolved using rule 16 (estructurasDatos -> hash_var .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 16 (estructurasDatos -> hash_var .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 16 (estructurasDatos -> hash_var .)
  ! reduce/reduce conflict for $end resolved using rule 16 (estructurasDatos -> hash_var .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 16 (estructurasDatos -> hash_var .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 16 (estructurasDatos -> hash_var .)
    $end            reduce using rule 16 (estructurasDatos -> hash_var .)
    END_LOWER       reduce using rule 16 (estructurasDatos -> hash_var .)
    NEWLINE         reduce using rule 16 (estructurasDatos -> hash_var .)

  ! $end            [ reduce using rule 118 (declaraciones -> hash_var .) ]
  ! END_LOWER       [ reduce using rule 118 (declaraciones -> hash_var .) ]
  ! NEWLINE         [ reduce using rule 118 (declaraciones -> hash_var .) ]
  ! $end            [ reduce using rule 90 (declare_data_structures -> hash_var .) ]
  ! END_LOWER       [ reduce using rule 90 (declare_data_structures -> hash_var .) ]
  ! NEWLINE         [ reduce using rule 90 (declare_data_structures -> hash_var .) ]


state 20

    (17) estructurasDatos -> set_expression .
    (128) set_operations -> set_expression .

  ! reduce/reduce conflict for $end resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (estructurasDatos -> set_expression .)
    $end            reduce using rule 17 (estructurasDatos -> set_expression .)
    END_LOWER       reduce using rule 17 (estructurasDatos -> set_expression .)
    NEWLINE         reduce using rule 17 (estructurasDatos -> set_expression .)
    PLUS            reduce using rule 128 (set_operations -> set_expression .)
    MINUS           reduce using rule 128 (set_operations -> set_expression .)
    AMPERSAND       reduce using rule 128 (set_operations -> set_expression .)
    PIPE            reduce using rule 128 (set_operations -> set_expression .)
    CARET           reduce using rule 128 (set_operations -> set_expression .)

  ! $end            [ reduce using rule 128 (set_operations -> set_expression .) ]
  ! END_LOWER       [ reduce using rule 128 (set_operations -> set_expression .) ]
  ! NEWLINE         [ reduce using rule 128 (set_operations -> set_expression .) ]


state 21

    (18) estructurasDatos -> set_operations .
    (129) set_operations -> set_operations . set_binary_operators set_expression
    (131) set_binary_operators -> . PLUS
    (132) set_binary_operators -> . MINUS
    (133) set_binary_operators -> . AMPERSAND
    (134) set_binary_operators -> . PIPE
    (135) set_binary_operators -> . CARET

    $end            reduce using rule 18 (estructurasDatos -> set_operations .)
    END_LOWER       reduce using rule 18 (estructurasDatos -> set_operations .)
    NEWLINE         reduce using rule 18 (estructurasDatos -> set_operations .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    AMPERSAND       shift and go to state 73
    PIPE            shift and go to state 74
    CARET           shift and go to state 75

    set_binary_operators           shift and go to state 70

state 22

    (19) estructurasControl -> ifStatement .

    $end            reduce using rule 19 (estructurasControl -> ifStatement .)
    END_LOWER       reduce using rule 19 (estructurasControl -> ifStatement .)
    NEWLINE         reduce using rule 19 (estructurasControl -> ifStatement .)


state 23

    (20) estructurasControl -> while_statement .

    $end            reduce using rule 20 (estructurasControl -> while_statement .)
    END_LOWER       reduce using rule 20 (estructurasControl -> while_statement .)
    NEWLINE         reduce using rule 20 (estructurasControl -> while_statement .)


state 24

    (21) estructurasControl -> unless_expression .

    $end            reduce using rule 21 (estructurasControl -> unless_expression .)
    END_LOWER       reduce using rule 21 (estructurasControl -> unless_expression .)
    NEWLINE         reduce using rule 21 (estructurasControl -> unless_expression .)


state 25

    (93) method_call -> var . LEFTPAR values RIGHTPAR
    (94) method_call -> var . LEFTPAR RIGHTPAR
    (23) value -> var .
    (85) hash_access -> var . LBRACE value RBRACE

    LEFTPAR         shift and go to state 76
    EQUAL           reduce using rule 23 (value -> var .)
    COMPARE         reduce using rule 23 (value -> var .)
    LBRACE          shift and go to state 77


state 26

    (154) proc_assignment -> LOCAL_VAR . ASSIGN proc_expression
    (155) proc_call -> LOCAL_VAR . DOT CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> LOCAL_VAR . DOT LEFTPAR values RIGHTPAR
    (157) proc_call -> LOCAL_VAR . LEFT_COR values RIGHT_COR
    (119) declaraciones -> LOCAL_VAR . ASSIGN arithmetic_production
    (75) to_string -> LOCAL_VAR . DOT TO_S
    (81) hash_var -> LOCAL_VAR . ASSIGN LBRACE hash_values RBRACE
    (82) hash_var -> LOCAL_VAR . ASSIGN LBRACE RBRACE
    (31) var -> LOCAL_VAR .
    (87) variable_declaration -> LOCAL_VAR . ASSIGN value
    (88) store_conditional_result -> LOCAL_VAR . ASSIGN condiciones
    (130) declare_data_structures -> LOCAL_VAR . ASSIGN set_expression
    (45) var_arreglo -> LOCAL_VAR . ASSIGN array
    (80) declaracion_concatenar_string -> LOCAL_VAR . ASSIGN concatenar_string
    (109) variable -> LOCAL_VAR .

    ASSIGN          shift and go to state 78
    DOT             shift and go to state 79
    LEFT_COR        shift and go to state 80
    LEFTPAR         reduce using rule 31 (var -> LOCAL_VAR .)
    LBRACE          reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 109 (variable -> LOCAL_VAR .)
    END_LOWER       reduce using rule 109 (variable -> LOCAL_VAR .)
    NEWLINE         reduce using rule 109 (variable -> LOCAL_VAR .)


state 27

    (46) array_explicito -> LEFT_COR . values RIGHT_COR
    (47) array_explicito -> LEFT_COR . RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHT_COR       shift and go to state 82
    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 81
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 28

    (114) declaraciones -> variable_declaration .

    $end            reduce using rule 114 (declaraciones -> variable_declaration .)
    END_LOWER       reduce using rule 114 (declaraciones -> variable_declaration .)
    NEWLINE         reduce using rule 114 (declaraciones -> variable_declaration .)


state 29

    (115) declaraciones -> store_conditional_result .

    $end            reduce using rule 115 (declaraciones -> store_conditional_result .)
    END_LOWER       reduce using rule 115 (declaraciones -> store_conditional_result .)
    NEWLINE         reduce using rule 115 (declaraciones -> store_conditional_result .)


state 30

    (116) declaraciones -> declare_data_structures .

    $end            reduce using rule 116 (declaraciones -> declare_data_structures .)
    END_LOWER       reduce using rule 116 (declaraciones -> declare_data_structures .)
    NEWLINE         reduce using rule 116 (declaraciones -> declare_data_structures .)


state 31

    (117) declaraciones -> var_arreglo .
    (54) acceder_arreglo -> var_arreglo . LEFT_COR INTEGER RIGHT_COR
    (89) declare_data_structures -> var_arreglo .

  ! reduce/reduce conflict for $end resolved using rule 89 (declare_data_structures -> var_arreglo .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 89 (declare_data_structures -> var_arreglo .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 89 (declare_data_structures -> var_arreglo .)
    LEFT_COR        shift and go to state 83
    $end            reduce using rule 89 (declare_data_structures -> var_arreglo .)
    END_LOWER       reduce using rule 89 (declare_data_structures -> var_arreglo .)
    NEWLINE         reduce using rule 89 (declare_data_structures -> var_arreglo .)

  ! $end            [ reduce using rule 117 (declaraciones -> var_arreglo .) ]
  ! END_LOWER       [ reduce using rule 117 (declaraciones -> var_arreglo .) ]
  ! NEWLINE         [ reduce using rule 117 (declaraciones -> var_arreglo .) ]


state 32

    (120) declaraciones -> declaracion_concatenar_string .

    $end            reduce using rule 120 (declaraciones -> declaracion_concatenar_string .)
    END_LOWER       reduce using rule 120 (declaraciones -> declaracion_concatenar_string .)
    NEWLINE         reduce using rule 120 (declaraciones -> declaracion_concatenar_string .)


state 33

    (105) expression -> INTEGER .
    (36) num -> INTEGER .

    $end            reduce using rule 105 (expression -> INTEGER .)
    END_LOWER       reduce using rule 105 (expression -> INTEGER .)
    NEWLINE         reduce using rule 105 (expression -> INTEGER .)
    EQUAL           reduce using rule 36 (num -> INTEGER .)
    COMPARE         reduce using rule 36 (num -> INTEGER .)


state 34

    (106) expression -> FLOAT .
    (35) num -> FLOAT .

    $end            reduce using rule 106 (expression -> FLOAT .)
    END_LOWER       reduce using rule 106 (expression -> FLOAT .)
    NEWLINE         reduce using rule 106 (expression -> FLOAT .)
    EQUAL           reduce using rule 35 (num -> FLOAT .)
    COMPARE         reduce using rule 35 (num -> FLOAT .)


state 35

    (107) expression -> variable .

    $end            reduce using rule 107 (expression -> variable .)
    GREATER         reduce using rule 107 (expression -> variable .)
    LESS            reduce using rule 107 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 107 (expression -> variable .)
    LESS_EQUAL      reduce using rule 107 (expression -> variable .)
    EQUAL           reduce using rule 107 (expression -> variable .)
    NOT_EQUAL       reduce using rule 107 (expression -> variable .)
    END_LOWER       reduce using rule 107 (expression -> variable .)
    NEWLINE         reduce using rule 107 (expression -> variable .)
    THEN            reduce using rule 107 (expression -> variable .)


state 36

    (108) expression -> STRING .
    (24) value -> STRING .

    $end            reduce using rule 108 (expression -> STRING .)
    END_LOWER       reduce using rule 108 (expression -> STRING .)
    NEWLINE         reduce using rule 108 (expression -> STRING .)
    EQUAL           reduce using rule 24 (value -> STRING .)
    COMPARE         reduce using rule 24 (value -> STRING .)


state 37

    (124) comparador -> value . EQUAL value
    (125) comparador -> value . COMPARE value

    EQUAL           shift and go to state 84
    COMPARE         shift and go to state 85


state 38

    (41) array -> array_explicito .

    $end            reduce using rule 41 (array -> array_explicito .)
    LEFT_COR        reduce using rule 41 (array -> array_explicito .)
    END_LOWER       reduce using rule 41 (array -> array_explicito .)
    NEWLINE         reduce using rule 41 (array -> array_explicito .)


state 39

    (42) array -> array_implicito .

    $end            reduce using rule 42 (array -> array_implicito .)
    LEFT_COR        reduce using rule 42 (array -> array_implicito .)
    END_LOWER       reduce using rule 42 (array -> array_implicito .)
    NEWLINE         reduce using rule 42 (array -> array_implicito .)


state 40

    (43) array -> array_creation .

    $end            reduce using rule 43 (array -> array_creation .)
    LEFT_COR        reduce using rule 43 (array -> array_creation .)
    END_LOWER       reduce using rule 43 (array -> array_creation .)
    NEWLINE         reduce using rule 43 (array -> array_creation .)


state 41

    (44) array -> newArray .

    $end            reduce using rule 44 (array -> newArray .)
    LEFT_COR        reduce using rule 44 (array -> newArray .)
    END_LOWER       reduce using rule 44 (array -> newArray .)
    NEWLINE         reduce using rule 44 (array -> newArray .)


state 42

    (86) hash_operations -> hash_access . ASSIGN value

    ASSIGN          shift and go to state 86


state 43

    (126) set_expression -> SET . DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> SET . LEFT_COR values RIGHT_COR

    DOT             shift and go to state 87
    LEFT_COR        shift and go to state 88


state 44

    (55) ifStatement -> IF . condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> IF . condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    condiciones                    shift and go to state 89
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 45

    (91) while_statement -> WHILE . condiciones COLON codigo
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    condiciones                    shift and go to state 93
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 46

    (136) unless_expression -> UNLESS . boolean_expression THEN expresion END
    (137) unless_expression -> UNLESS . boolean_expression THEN expresion ELSE expresion END
    (96) boolean_expression -> . expression GREATER expression
    (97) boolean_expression -> . expression LESS expression
    (98) boolean_expression -> . expression GREATER_EQUAL expression
    (99) boolean_expression -> . expression LESS_EQUAL expression
    (100) boolean_expression -> . expression EQUAL expression
    (101) boolean_expression -> . expression NOT_EQUAL expression
    (102) boolean_expression -> . boolean_value
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (103) boolean_value -> . TRUE
    (104) boolean_value -> . FALSE
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    boolean_expression             shift and go to state 94
    expression                     shift and go to state 95
    boolean_value                  shift and go to state 96
    variable                       shift and go to state 35

state 47

    (32) var -> INSTANCE_VAR .
    (110) variable -> INSTANCE_VAR .

    LEFTPAR         reduce using rule 32 (var -> INSTANCE_VAR .)
    LBRACE          reduce using rule 32 (var -> INSTANCE_VAR .)
    EQUAL           reduce using rule 32 (var -> INSTANCE_VAR .)
    COMPARE         reduce using rule 32 (var -> INSTANCE_VAR .)
    $end            reduce using rule 110 (variable -> INSTANCE_VAR .)
    END_LOWER       reduce using rule 110 (variable -> INSTANCE_VAR .)
    NEWLINE         reduce using rule 110 (variable -> INSTANCE_VAR .)


state 48

    (33) var -> CLASS_VAR .
    (111) variable -> CLASS_VAR .

    LEFTPAR         reduce using rule 33 (var -> CLASS_VAR .)
    LBRACE          reduce using rule 33 (var -> CLASS_VAR .)
    EQUAL           reduce using rule 33 (var -> CLASS_VAR .)
    COMPARE         reduce using rule 33 (var -> CLASS_VAR .)
    $end            reduce using rule 111 (variable -> CLASS_VAR .)
    END_LOWER       reduce using rule 111 (variable -> CLASS_VAR .)
    NEWLINE         reduce using rule 111 (variable -> CLASS_VAR .)


state 49

    (34) var -> GLOBAL_VAR .
    (112) variable -> GLOBAL_VAR .

    LEFTPAR         reduce using rule 34 (var -> GLOBAL_VAR .)
    LBRACE          reduce using rule 34 (var -> GLOBAL_VAR .)
    EQUAL           reduce using rule 34 (var -> GLOBAL_VAR .)
    COMPARE         reduce using rule 34 (var -> GLOBAL_VAR .)
    $end            reduce using rule 112 (variable -> GLOBAL_VAR .)
    END_LOWER       reduce using rule 112 (variable -> GLOBAL_VAR .)
    NEWLINE         reduce using rule 112 (variable -> GLOBAL_VAR .)


state 50

    (113) variable -> CONSTANT .

    $end            reduce using rule 113 (variable -> CONSTANT .)
    GREATER         reduce using rule 113 (variable -> CONSTANT .)
    LESS            reduce using rule 113 (variable -> CONSTANT .)
    GREATER_EQUAL   reduce using rule 113 (variable -> CONSTANT .)
    LESS_EQUAL      reduce using rule 113 (variable -> CONSTANT .)
    EQUAL           reduce using rule 113 (variable -> CONSTANT .)
    NOT_EQUAL       reduce using rule 113 (variable -> CONSTANT .)
    END_LOWER       reduce using rule 113 (variable -> CONSTANT .)
    NEWLINE         reduce using rule 113 (variable -> CONSTANT .)
    THEN            reduce using rule 113 (variable -> CONSTANT .)


state 51

    (22) value -> num .

    EQUAL           reduce using rule 22 (value -> num .)
    COMPARE         reduce using rule 22 (value -> num .)
    COMMA           reduce using rule 22 (value -> num .)
    $end            reduce using rule 22 (value -> num .)
    END_LOWER       reduce using rule 22 (value -> num .)
    NEWLINE         reduce using rule 22 (value -> num .)
    RIGHT_COR       reduce using rule 22 (value -> num .)
    RIGHTPAR        reduce using rule 22 (value -> num .)
    RBRACE          reduce using rule 22 (value -> num .)
    SPACE           reduce using rule 22 (value -> num .)
    END             reduce using rule 22 (value -> num .)
    ELSE            reduce using rule 22 (value -> num .)


state 52

    (25) value -> NIL .

    EQUAL           reduce using rule 25 (value -> NIL .)
    COMPARE         reduce using rule 25 (value -> NIL .)
    COMMA           reduce using rule 25 (value -> NIL .)
    $end            reduce using rule 25 (value -> NIL .)
    END_LOWER       reduce using rule 25 (value -> NIL .)
    NEWLINE         reduce using rule 25 (value -> NIL .)
    RIGHT_COR       reduce using rule 25 (value -> NIL .)
    RIGHTPAR        reduce using rule 25 (value -> NIL .)
    RBRACE          reduce using rule 25 (value -> NIL .)
    SPACE           reduce using rule 25 (value -> NIL .)
    END             reduce using rule 25 (value -> NIL .)
    ELSE            reduce using rule 25 (value -> NIL .)


state 53

    (26) value -> SYMBOL .

    EQUAL           reduce using rule 26 (value -> SYMBOL .)
    COMPARE         reduce using rule 26 (value -> SYMBOL .)
    COMMA           reduce using rule 26 (value -> SYMBOL .)
    $end            reduce using rule 26 (value -> SYMBOL .)
    END_LOWER       reduce using rule 26 (value -> SYMBOL .)
    NEWLINE         reduce using rule 26 (value -> SYMBOL .)
    RIGHT_COR       reduce using rule 26 (value -> SYMBOL .)
    RIGHTPAR        reduce using rule 26 (value -> SYMBOL .)
    RBRACE          reduce using rule 26 (value -> SYMBOL .)
    SPACE           reduce using rule 26 (value -> SYMBOL .)
    END             reduce using rule 26 (value -> SYMBOL .)
    ELSE            reduce using rule 26 (value -> SYMBOL .)


state 54

    (48) array_implicito -> PERCENTW . LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> PERCENTW . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 106


state 55

    (50) array_creation -> ARRAY . LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> ARRAY . DOT NEW
    (52) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFTPAR         shift and go to state 107
    DOT             shift and go to state 108


state 56

    (152) block_assignment -> method_call block_expression .

    $end            reduce using rule 152 (block_assignment -> method_call block_expression .)
    END_LOWER       reduce using rule 152 (block_assignment -> method_call block_expression .)
    NEWLINE         reduce using rule 152 (block_assignment -> method_call block_expression .)


state 57

    (148) block_expression -> LBRACE . expresion RBRACE
    (150) block_expression -> LBRACE . PIPE LOCAL_VAR PIPE expresion RBRACE
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PIPE            shift and go to state 110
    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 109
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 58

    (149) block_expression -> DO . expresion END
    (151) block_expression -> DO . PIPE LOCAL_VAR PIPE expresion END
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PIPE            shift and go to state 118
    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 117
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 59

    (40) puts -> PUT values .

    $end            reduce using rule 40 (puts -> PUT values .)
    RBRACE          reduce using rule 40 (puts -> PUT values .)
    END             reduce using rule 40 (puts -> PUT values .)
    END_LOWER       reduce using rule 40 (puts -> PUT values .)
    NEWLINE         reduce using rule 40 (puts -> PUT values .)
    ELSE            reduce using rule 40 (puts -> PUT values .)


state 60

    (29) values -> value .
    (30) values -> value . COMMA values

    $end            reduce using rule 29 (values -> value .)
    END_LOWER       reduce using rule 29 (values -> value .)
    NEWLINE         reduce using rule 29 (values -> value .)
    RIGHT_COR       reduce using rule 29 (values -> value .)
    RIGHTPAR        reduce using rule 29 (values -> value .)
    RBRACE          reduce using rule 29 (values -> value .)
    END             reduce using rule 29 (values -> value .)
    ELSE            reduce using rule 29 (values -> value .)
    COMMA           shift and go to state 119


state 61

    (23) value -> var .

    COMMA           reduce using rule 23 (value -> var .)
    $end            reduce using rule 23 (value -> var .)
    END_LOWER       reduce using rule 23 (value -> var .)
    NEWLINE         reduce using rule 23 (value -> var .)
    RIGHT_COR       reduce using rule 23 (value -> var .)
    RIGHTPAR        reduce using rule 23 (value -> var .)
    RBRACE          reduce using rule 23 (value -> var .)
    SPACE           reduce using rule 23 (value -> var .)
    END             reduce using rule 23 (value -> var .)
    ELSE            reduce using rule 23 (value -> var .)


state 62

    (24) value -> STRING .

    COMMA           reduce using rule 24 (value -> STRING .)
    $end            reduce using rule 24 (value -> STRING .)
    END_LOWER       reduce using rule 24 (value -> STRING .)
    NEWLINE         reduce using rule 24 (value -> STRING .)
    RIGHT_COR       reduce using rule 24 (value -> STRING .)
    RIGHTPAR        reduce using rule 24 (value -> STRING .)
    RBRACE          reduce using rule 24 (value -> STRING .)
    SPACE           reduce using rule 24 (value -> STRING .)
    END             reduce using rule 24 (value -> STRING .)
    ELSE            reduce using rule 24 (value -> STRING .)


state 63

    (35) num -> FLOAT .

    COMMA           reduce using rule 35 (num -> FLOAT .)
    $end            reduce using rule 35 (num -> FLOAT .)
    END_LOWER       reduce using rule 35 (num -> FLOAT .)
    NEWLINE         reduce using rule 35 (num -> FLOAT .)
    RIGHT_COR       reduce using rule 35 (num -> FLOAT .)
    GREATER         reduce using rule 35 (num -> FLOAT .)
    LESS            reduce using rule 35 (num -> FLOAT .)
    GREATER_EQUAL   reduce using rule 35 (num -> FLOAT .)
    LESS_EQUAL      reduce using rule 35 (num -> FLOAT .)
    EQUAL           reduce using rule 35 (num -> FLOAT .)
    NOT_EQUAL       reduce using rule 35 (num -> FLOAT .)
    COMPARE         reduce using rule 35 (num -> FLOAT .)
    RIGHTPAR        reduce using rule 35 (num -> FLOAT .)
    RBRACE          reduce using rule 35 (num -> FLOAT .)
    PLUS            reduce using rule 35 (num -> FLOAT .)
    MINUS           reduce using rule 35 (num -> FLOAT .)
    MULTIPLY        reduce using rule 35 (num -> FLOAT .)
    DIVIDE          reduce using rule 35 (num -> FLOAT .)
    MODULO          reduce using rule 35 (num -> FLOAT .)
    EXPONENT        reduce using rule 35 (num -> FLOAT .)
    SPACE           reduce using rule 35 (num -> FLOAT .)
    END             reduce using rule 35 (num -> FLOAT .)
    ELSE            reduce using rule 35 (num -> FLOAT .)
    AND             reduce using rule 35 (num -> FLOAT .)
    OR              reduce using rule 35 (num -> FLOAT .)
    AND_RESERVED    reduce using rule 35 (num -> FLOAT .)
    OR_RESERVED     reduce using rule 35 (num -> FLOAT .)
    COLON           reduce using rule 35 (num -> FLOAT .)


state 64

    (36) num -> INTEGER .

    COMMA           reduce using rule 36 (num -> INTEGER .)
    $end            reduce using rule 36 (num -> INTEGER .)
    END_LOWER       reduce using rule 36 (num -> INTEGER .)
    NEWLINE         reduce using rule 36 (num -> INTEGER .)
    RIGHT_COR       reduce using rule 36 (num -> INTEGER .)
    GREATER         reduce using rule 36 (num -> INTEGER .)
    LESS            reduce using rule 36 (num -> INTEGER .)
    GREATER_EQUAL   reduce using rule 36 (num -> INTEGER .)
    LESS_EQUAL      reduce using rule 36 (num -> INTEGER .)
    EQUAL           reduce using rule 36 (num -> INTEGER .)
    NOT_EQUAL       reduce using rule 36 (num -> INTEGER .)
    COMPARE         reduce using rule 36 (num -> INTEGER .)
    RIGHTPAR        reduce using rule 36 (num -> INTEGER .)
    RBRACE          reduce using rule 36 (num -> INTEGER .)
    PLUS            reduce using rule 36 (num -> INTEGER .)
    MINUS           reduce using rule 36 (num -> INTEGER .)
    MULTIPLY        reduce using rule 36 (num -> INTEGER .)
    DIVIDE          reduce using rule 36 (num -> INTEGER .)
    MODULO          reduce using rule 36 (num -> INTEGER .)
    EXPONENT        reduce using rule 36 (num -> INTEGER .)
    SPACE           reduce using rule 36 (num -> INTEGER .)
    END             reduce using rule 36 (num -> INTEGER .)
    ELSE            reduce using rule 36 (num -> INTEGER .)
    AND             reduce using rule 36 (num -> INTEGER .)
    OR              reduce using rule 36 (num -> INTEGER .)
    AND_RESERVED    reduce using rule 36 (num -> INTEGER .)
    OR_RESERVED     reduce using rule 36 (num -> INTEGER .)
    COLON           reduce using rule 36 (num -> INTEGER .)


state 65

    (31) var -> LOCAL_VAR .

    COMMA           reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHT_COR       reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER         reduce using rule 31 (var -> LOCAL_VAR .)
    LESS            reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 31 (var -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHTPAR        reduce using rule 31 (var -> LOCAL_VAR .)
    RBRACE          reduce using rule 31 (var -> LOCAL_VAR .)
    SPACE           reduce using rule 31 (var -> LOCAL_VAR .)
    END             reduce using rule 31 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 31 (var -> LOCAL_VAR .)
    AND             reduce using rule 31 (var -> LOCAL_VAR .)
    OR              reduce using rule 31 (var -> LOCAL_VAR .)
    AND_RESERVED    reduce using rule 31 (var -> LOCAL_VAR .)
    OR_RESERVED     reduce using rule 31 (var -> LOCAL_VAR .)
    COLON           reduce using rule 31 (var -> LOCAL_VAR .)


state 66

    (32) var -> INSTANCE_VAR .

    COMMA           reduce using rule 32 (var -> INSTANCE_VAR .)
    $end            reduce using rule 32 (var -> INSTANCE_VAR .)
    END_LOWER       reduce using rule 32 (var -> INSTANCE_VAR .)
    NEWLINE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHT_COR       reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER         reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS            reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 32 (var -> INSTANCE_VAR .)
    EQUAL           reduce using rule 32 (var -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 32 (var -> INSTANCE_VAR .)
    COMPARE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHTPAR        reduce using rule 32 (var -> INSTANCE_VAR .)
    RBRACE          reduce using rule 32 (var -> INSTANCE_VAR .)
    SPACE           reduce using rule 32 (var -> INSTANCE_VAR .)
    END             reduce using rule 32 (var -> INSTANCE_VAR .)
    ELSE            reduce using rule 32 (var -> INSTANCE_VAR .)
    AND             reduce using rule 32 (var -> INSTANCE_VAR .)
    OR              reduce using rule 32 (var -> INSTANCE_VAR .)
    AND_RESERVED    reduce using rule 32 (var -> INSTANCE_VAR .)
    OR_RESERVED     reduce using rule 32 (var -> INSTANCE_VAR .)
    COLON           reduce using rule 32 (var -> INSTANCE_VAR .)


state 67

    (33) var -> CLASS_VAR .

    COMMA           reduce using rule 33 (var -> CLASS_VAR .)
    $end            reduce using rule 33 (var -> CLASS_VAR .)
    END_LOWER       reduce using rule 33 (var -> CLASS_VAR .)
    NEWLINE         reduce using rule 33 (var -> CLASS_VAR .)
    RIGHT_COR       reduce using rule 33 (var -> CLASS_VAR .)
    GREATER         reduce using rule 33 (var -> CLASS_VAR .)
    LESS            reduce using rule 33 (var -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 33 (var -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 33 (var -> CLASS_VAR .)
    EQUAL           reduce using rule 33 (var -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 33 (var -> CLASS_VAR .)
    COMPARE         reduce using rule 33 (var -> CLASS_VAR .)
    RIGHTPAR        reduce using rule 33 (var -> CLASS_VAR .)
    RBRACE          reduce using rule 33 (var -> CLASS_VAR .)
    SPACE           reduce using rule 33 (var -> CLASS_VAR .)
    END             reduce using rule 33 (var -> CLASS_VAR .)
    ELSE            reduce using rule 33 (var -> CLASS_VAR .)
    AND             reduce using rule 33 (var -> CLASS_VAR .)
    OR              reduce using rule 33 (var -> CLASS_VAR .)
    AND_RESERVED    reduce using rule 33 (var -> CLASS_VAR .)
    OR_RESERVED     reduce using rule 33 (var -> CLASS_VAR .)
    COLON           reduce using rule 33 (var -> CLASS_VAR .)


state 68

    (34) var -> GLOBAL_VAR .

    COMMA           reduce using rule 34 (var -> GLOBAL_VAR .)
    $end            reduce using rule 34 (var -> GLOBAL_VAR .)
    END_LOWER       reduce using rule 34 (var -> GLOBAL_VAR .)
    NEWLINE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHT_COR       reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER         reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS            reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 34 (var -> GLOBAL_VAR .)
    EQUAL           reduce using rule 34 (var -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 34 (var -> GLOBAL_VAR .)
    COMPARE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHTPAR        reduce using rule 34 (var -> GLOBAL_VAR .)
    RBRACE          reduce using rule 34 (var -> GLOBAL_VAR .)
    SPACE           reduce using rule 34 (var -> GLOBAL_VAR .)
    END             reduce using rule 34 (var -> GLOBAL_VAR .)
    ELSE            reduce using rule 34 (var -> GLOBAL_VAR .)
    AND             reduce using rule 34 (var -> GLOBAL_VAR .)
    OR              reduce using rule 34 (var -> GLOBAL_VAR .)
    AND_RESERVED    reduce using rule 34 (var -> GLOBAL_VAR .)
    OR_RESERVED     reduce using rule 34 (var -> GLOBAL_VAR .)
    COLON           reduce using rule 34 (var -> GLOBAL_VAR .)


state 69

    (37) gets -> GETS DOT . CHOMP DOT TO_F
    (38) gets -> GETS DOT . CHOMP DOT TO_I
    (39) gets -> GETS DOT . CHOMP

    CHOMP           shift and go to state 120


state 70

    (129) set_operations -> set_operations set_binary_operators . set_expression
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR

    SET             shift and go to state 43

    set_expression                 shift and go to state 121

state 71

    (131) set_binary_operators -> PLUS .

    SET             reduce using rule 131 (set_binary_operators -> PLUS .)


state 72

    (132) set_binary_operators -> MINUS .

    SET             reduce using rule 132 (set_binary_operators -> MINUS .)


state 73

    (133) set_binary_operators -> AMPERSAND .

    SET             reduce using rule 133 (set_binary_operators -> AMPERSAND .)


state 74

    (134) set_binary_operators -> PIPE .

    SET             reduce using rule 134 (set_binary_operators -> PIPE .)


state 75

    (135) set_binary_operators -> CARET .

    SET             reduce using rule 135 (set_binary_operators -> CARET .)


state 76

    (93) method_call -> var LEFTPAR . values RIGHTPAR
    (94) method_call -> var LEFTPAR . RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHTPAR        shift and go to state 123
    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    var                            shift and go to state 61
    values                         shift and go to state 122
    value                          shift and go to state 60
    num                            shift and go to state 51

state 77

    (85) hash_access -> var LBRACE . value RBRACE
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    var                            shift and go to state 61
    value                          shift and go to state 124
    num                            shift and go to state 51

state 78

    (154) proc_assignment -> LOCAL_VAR ASSIGN . proc_expression
    (119) declaraciones -> LOCAL_VAR ASSIGN . arithmetic_production
    (81) hash_var -> LOCAL_VAR ASSIGN . LBRACE hash_values RBRACE
    (82) hash_var -> LOCAL_VAR ASSIGN . LBRACE RBRACE
    (87) variable_declaration -> LOCAL_VAR ASSIGN . value
    (88) store_conditional_result -> LOCAL_VAR ASSIGN . condiciones
    (130) declare_data_structures -> LOCAL_VAR ASSIGN . set_expression
    (45) var_arreglo -> LOCAL_VAR ASSIGN . array
    (80) declaracion_concatenar_string -> LOCAL_VAR ASSIGN . concatenar_string
    (153) proc_expression -> . PROC DOT NEW block_expression
    (138) arithmetic_production -> . num
    (139) arithmetic_production -> . LOCAL_VAR
    (140) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (141) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (76) concatenar_string -> . STRING PLUS STRING
    (77) concatenar_string -> . STRING PLUS LOCAL_VAR
    (78) concatenar_string -> . LOCAL_VAR PLUS STRING
    (79) concatenar_string -> . LOCAL_VAR PLUS LOCAL_VAR
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LBRACE          shift and go to state 128
    PROC            shift and go to state 134
    LOCAL_VAR       shift and go to state 125
    STRING          shift and go to state 137
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    SET             shift and go to state 43
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 54
    ARRAY           shift and go to state 55

    proc_expression                shift and go to state 126
    arithmetic_production          shift and go to state 127
    value                          shift and go to state 129
    condiciones                    shift and go to state 130
    set_expression                 shift and go to state 131
    array                          shift and go to state 132
    concatenar_string              shift and go to state 133
    num                            shift and go to state 135
    var                            shift and go to state 136
    condicion                      shift and go to state 90
    array_explicito                shift and go to state 38
    array_implicito                shift and go to state 39
    array_creation                 shift and go to state 40
    newArray                       shift and go to state 41

state 79

    (155) proc_call -> LOCAL_VAR DOT . CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> LOCAL_VAR DOT . LEFTPAR values RIGHTPAR
    (75) to_string -> LOCAL_VAR DOT . TO_S

    CALL            shift and go to state 138
    LEFTPAR         shift and go to state 139
    TO_S            shift and go to state 140


state 80

    (157) proc_call -> LOCAL_VAR LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 141
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 81

    (46) array_explicito -> LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 142


state 82

    (47) array_explicito -> LEFT_COR RIGHT_COR .

    $end            reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    RIGHTPAR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)


state 83

    (54) acceder_arreglo -> var_arreglo LEFT_COR . INTEGER RIGHT_COR

    INTEGER         shift and go to state 143


state 84

    (124) comparador -> value EQUAL . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 144
    num                            shift and go to state 51
    var                            shift and go to state 61

state 85

    (125) comparador -> value COMPARE . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 145
    num                            shift and go to state 51
    var                            shift and go to state 61

state 86

    (86) hash_operations -> hash_access ASSIGN . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 146
    num                            shift and go to state 51
    var                            shift and go to state 61

state 87

    (126) set_expression -> SET DOT . NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    NEW             shift and go to state 147


state 88

    (127) set_expression -> SET LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 148
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 89

    (55) ifStatement -> IF condiciones . NEWLINE codigo END_LOWER
    (56) ifStatement -> IF condiciones . NEWLINE codigo NEWLINE else_statement END_LOWER
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

    NEWLINE         shift and go to state 149
    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

    conectores                     shift and go to state 150

state 90

    (57) condiciones -> condicion .

    NEWLINE         reduce using rule 57 (condiciones -> condicion .)
    AND             reduce using rule 57 (condiciones -> condicion .)
    OR              reduce using rule 57 (condiciones -> condicion .)
    AND_RESERVED    reduce using rule 57 (condiciones -> condicion .)
    OR_RESERVED     reduce using rule 57 (condiciones -> condicion .)
    EQUAL           reduce using rule 57 (condiciones -> condicion .)
    COLON           reduce using rule 57 (condiciones -> condicion .)
    $end            reduce using rule 57 (condiciones -> condicion .)
    END_LOWER       reduce using rule 57 (condiciones -> condicion .)
    RBRACE          reduce using rule 57 (condiciones -> condicion .)
    END             reduce using rule 57 (condiciones -> condicion .)
    ELSE            reduce using rule 57 (condiciones -> condicion .)


state 91

    (64) condicion -> num . operComp num
    (66) condicion -> num . operComp var
    (67) operComp -> . GREATER
    (68) operComp -> . LESS
    (69) operComp -> . GREATER_EQUAL
    (70) operComp -> . LESS_EQUAL
    (71) operComp -> . EQUAL
    (72) operComp -> . NOT_EQUAL
    (73) operComp -> . COMPARE

    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 156

state 92

    (65) condicion -> var . operComp num
    (67) operComp -> . GREATER
    (68) operComp -> . LESS
    (69) operComp -> . GREATER_EQUAL
    (70) operComp -> . LESS_EQUAL
    (71) operComp -> . EQUAL
    (72) operComp -> . NOT_EQUAL
    (73) operComp -> . COMPARE

    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 164

state 93

    (91) while_statement -> WHILE condiciones . COLON codigo
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

    COLON           shift and go to state 165
    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

    conectores                     shift and go to state 150

state 94

    (136) unless_expression -> UNLESS boolean_expression . THEN expresion END
    (137) unless_expression -> UNLESS boolean_expression . THEN expresion ELSE expresion END

    THEN            shift and go to state 166


state 95

    (96) boolean_expression -> expression . GREATER expression
    (97) boolean_expression -> expression . LESS expression
    (98) boolean_expression -> expression . GREATER_EQUAL expression
    (99) boolean_expression -> expression . LESS_EQUAL expression
    (100) boolean_expression -> expression . EQUAL expression
    (101) boolean_expression -> expression . NOT_EQUAL expression

    GREATER         shift and go to state 167
    LESS            shift and go to state 168
    GREATER_EQUAL   shift and go to state 169
    LESS_EQUAL      shift and go to state 170
    EQUAL           shift and go to state 171
    NOT_EQUAL       shift and go to state 172


state 96

    (102) boolean_expression -> boolean_value .

    THEN            reduce using rule 102 (boolean_expression -> boolean_value .)


state 97

    (105) expression -> INTEGER .

    GREATER         reduce using rule 105 (expression -> INTEGER .)
    LESS            reduce using rule 105 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 105 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 105 (expression -> INTEGER .)
    EQUAL           reduce using rule 105 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 105 (expression -> INTEGER .)
    THEN            reduce using rule 105 (expression -> INTEGER .)


state 98

    (106) expression -> FLOAT .

    GREATER         reduce using rule 106 (expression -> FLOAT .)
    LESS            reduce using rule 106 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 106 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 106 (expression -> FLOAT .)
    EQUAL           reduce using rule 106 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 106 (expression -> FLOAT .)
    THEN            reduce using rule 106 (expression -> FLOAT .)


state 99

    (108) expression -> STRING .

    GREATER         reduce using rule 108 (expression -> STRING .)
    LESS            reduce using rule 108 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 108 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 108 (expression -> STRING .)
    EQUAL           reduce using rule 108 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 108 (expression -> STRING .)
    THEN            reduce using rule 108 (expression -> STRING .)


state 100

    (103) boolean_value -> TRUE .

    THEN            reduce using rule 103 (boolean_value -> TRUE .)


state 101

    (104) boolean_value -> FALSE .

    THEN            reduce using rule 104 (boolean_value -> FALSE .)


state 102

    (109) variable -> LOCAL_VAR .

    GREATER         reduce using rule 109 (variable -> LOCAL_VAR .)
    LESS            reduce using rule 109 (variable -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 109 (variable -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 109 (variable -> LOCAL_VAR .)
    EQUAL           reduce using rule 109 (variable -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 109 (variable -> LOCAL_VAR .)
    THEN            reduce using rule 109 (variable -> LOCAL_VAR .)


state 103

    (110) variable -> INSTANCE_VAR .

    GREATER         reduce using rule 110 (variable -> INSTANCE_VAR .)
    LESS            reduce using rule 110 (variable -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 110 (variable -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 110 (variable -> INSTANCE_VAR .)
    EQUAL           reduce using rule 110 (variable -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 110 (variable -> INSTANCE_VAR .)
    THEN            reduce using rule 110 (variable -> INSTANCE_VAR .)


state 104

    (111) variable -> CLASS_VAR .

    GREATER         reduce using rule 111 (variable -> CLASS_VAR .)
    LESS            reduce using rule 111 (variable -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 111 (variable -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 111 (variable -> CLASS_VAR .)
    EQUAL           reduce using rule 111 (variable -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 111 (variable -> CLASS_VAR .)
    THEN            reduce using rule 111 (variable -> CLASS_VAR .)


state 105

    (112) variable -> GLOBAL_VAR .

    GREATER         reduce using rule 112 (variable -> GLOBAL_VAR .)
    LESS            reduce using rule 112 (variable -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 112 (variable -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 112 (variable -> GLOBAL_VAR .)
    EQUAL           reduce using rule 112 (variable -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 112 (variable -> GLOBAL_VAR .)
    THEN            reduce using rule 112 (variable -> GLOBAL_VAR .)


state 106

    (48) array_implicito -> PERCENTW LEFT_COR . values_space RIGHT_COR
    (49) array_implicito -> PERCENTW LEFT_COR . RIGHT_COR
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    RIGHT_COR       shift and go to state 174
    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values_space                   shift and go to state 173
    value                          shift and go to state 175
    num                            shift and go to state 51
    var                            shift and go to state 61

state 107

    (50) array_creation -> ARRAY LEFTPAR . array_explicito RIGHTPAR
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 27

    array_explicito                shift and go to state 176

state 108

    (51) newArray -> ARRAY DOT . NEW
    (52) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    NEW             shift and go to state 177


state 109

    (148) block_expression -> LBRACE expresion . RBRACE

    RBRACE          shift and go to state 178


state 110

    (150) block_expression -> LBRACE PIPE . LOCAL_VAR PIPE expresion RBRACE

    LOCAL_VAR       shift and go to state 179


state 111

    (121) expresion -> puts .

    RBRACE          reduce using rule 121 (expresion -> puts .)
    END             reduce using rule 121 (expresion -> puts .)
    ELSE            reduce using rule 121 (expresion -> puts .)


state 112

    (122) expresion -> gets .

    RBRACE          reduce using rule 122 (expresion -> gets .)
    END             reduce using rule 122 (expresion -> gets .)
    ELSE            reduce using rule 122 (expresion -> gets .)


state 113

    (123) expresion -> print_statement .

    RBRACE          reduce using rule 123 (expresion -> print_statement .)
    END             reduce using rule 123 (expresion -> print_statement .)
    ELSE            reduce using rule 123 (expresion -> print_statement .)


state 114

    (158) expresion -> condition_with_connectors .

    RBRACE          reduce using rule 158 (expresion -> condition_with_connectors .)
    END             reduce using rule 158 (expresion -> condition_with_connectors .)
    ELSE            reduce using rule 158 (expresion -> condition_with_connectors .)


state 115

    (40) puts -> PUT . values
    (95) print_statement -> PUT . LEFTPAR values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    LEFTPAR         shift and go to state 180
    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 59
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 116

    (92) condition_with_connectors -> condiciones . conectores condiciones
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

    conectores                     shift and go to state 181

state 117

    (149) block_expression -> DO expresion . END

    END             shift and go to state 182


state 118

    (151) block_expression -> DO PIPE . LOCAL_VAR PIPE expresion END

    LOCAL_VAR       shift and go to state 183


state 119

    (30) values -> value COMMA . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 60
    values                         shift and go to state 184
    num                            shift and go to state 51
    var                            shift and go to state 61

state 120

    (37) gets -> GETS DOT CHOMP . DOT TO_F
    (38) gets -> GETS DOT CHOMP . DOT TO_I
    (39) gets -> GETS DOT CHOMP .

    DOT             shift and go to state 185
    $end            reduce using rule 39 (gets -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 39 (gets -> GETS DOT CHOMP .)
    END             reduce using rule 39 (gets -> GETS DOT CHOMP .)
    END_LOWER       reduce using rule 39 (gets -> GETS DOT CHOMP .)
    NEWLINE         reduce using rule 39 (gets -> GETS DOT CHOMP .)
    ELSE            reduce using rule 39 (gets -> GETS DOT CHOMP .)


state 121

    (129) set_operations -> set_operations set_binary_operators set_expression .

    PLUS            reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    MINUS           reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    AMPERSAND       reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    PIPE            reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    CARET           reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    $end            reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    END_LOWER       reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)
    NEWLINE         reduce using rule 129 (set_operations -> set_operations set_binary_operators set_expression .)


state 122

    (93) method_call -> var LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 186


state 123

    (94) method_call -> var LEFTPAR RIGHTPAR .

    LBRACE          reduce using rule 94 (method_call -> var LEFTPAR RIGHTPAR .)
    DO              reduce using rule 94 (method_call -> var LEFTPAR RIGHTPAR .)
    $end            reduce using rule 94 (method_call -> var LEFTPAR RIGHTPAR .)
    END_LOWER       reduce using rule 94 (method_call -> var LEFTPAR RIGHTPAR .)
    NEWLINE         reduce using rule 94 (method_call -> var LEFTPAR RIGHTPAR .)


state 124

    (85) hash_access -> var LBRACE value . RBRACE

    RBRACE          shift and go to state 187


state 125

    (139) arithmetic_production -> LOCAL_VAR .
    (141) arithmetic_production -> LOCAL_VAR . arithmetic_operators arithmetic_production
    (78) concatenar_string -> LOCAL_VAR . PLUS STRING
    (79) concatenar_string -> LOCAL_VAR . PLUS LOCAL_VAR
    (31) var -> LOCAL_VAR .
    (142) arithmetic_operators -> . PLUS
    (143) arithmetic_operators -> . MINUS
    (144) arithmetic_operators -> . MULTIPLY
    (145) arithmetic_operators -> . DIVIDE
    (146) arithmetic_operators -> . MODULO
    (147) arithmetic_operators -> . EXPONENT

  ! reduce/reduce conflict for $end resolved using rule 31 (var -> LOCAL_VAR .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 31 (var -> LOCAL_VAR .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 31 (var -> LOCAL_VAR .)
    PLUS            shift and go to state 189
    GREATER         reduce using rule 31 (var -> LOCAL_VAR .)
    LESS            reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 31 (var -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)
    MINUS           shift and go to state 190
    MULTIPLY        shift and go to state 191
    DIVIDE          shift and go to state 192
    MODULO          shift and go to state 193
    EXPONENT        shift and go to state 194

  ! $end            [ reduce using rule 139 (arithmetic_production -> LOCAL_VAR .) ]
  ! END_LOWER       [ reduce using rule 139 (arithmetic_production -> LOCAL_VAR .) ]
  ! NEWLINE         [ reduce using rule 139 (arithmetic_production -> LOCAL_VAR .) ]

    arithmetic_operators           shift and go to state 188

state 126

    (154) proc_assignment -> LOCAL_VAR ASSIGN proc_expression .

    $end            reduce using rule 154 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    END_LOWER       reduce using rule 154 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    NEWLINE         reduce using rule 154 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)


state 127

    (119) declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .

    $end            reduce using rule 119 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)
    END_LOWER       reduce using rule 119 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)
    NEWLINE         reduce using rule 119 (declaraciones -> LOCAL_VAR ASSIGN arithmetic_production .)


state 128

    (81) hash_var -> LOCAL_VAR ASSIGN LBRACE . hash_values RBRACE
    (82) hash_var -> LOCAL_VAR ASSIGN LBRACE . RBRACE
    (83) hash_values -> . STRING HASH_ROCKET value
    (84) hash_values -> . STRING HASH_ROCKET value COMMA hash_values

    RBRACE          shift and go to state 196
    STRING          shift and go to state 197

    hash_values                    shift and go to state 195

state 129

    (87) variable_declaration -> LOCAL_VAR ASSIGN value .

    $end            reduce using rule 87 (variable_declaration -> LOCAL_VAR ASSIGN value .)
    END_LOWER       reduce using rule 87 (variable_declaration -> LOCAL_VAR ASSIGN value .)
    NEWLINE         reduce using rule 87 (variable_declaration -> LOCAL_VAR ASSIGN value .)


state 130

    (88) store_conditional_result -> LOCAL_VAR ASSIGN condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

    $end            reduce using rule 88 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    END_LOWER       reduce using rule 88 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    NEWLINE         reduce using rule 88 (store_conditional_result -> LOCAL_VAR ASSIGN condiciones .)
    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

    conectores                     shift and go to state 150

state 131

    (130) declare_data_structures -> LOCAL_VAR ASSIGN set_expression .

    $end            reduce using rule 130 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    END_LOWER       reduce using rule 130 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    NEWLINE         reduce using rule 130 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)


state 132

    (45) var_arreglo -> LOCAL_VAR ASSIGN array .

    LEFT_COR        reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    $end            reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    END_LOWER       reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)
    NEWLINE         reduce using rule 45 (var_arreglo -> LOCAL_VAR ASSIGN array .)


state 133

    (80) declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .

    $end            reduce using rule 80 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)
    END_LOWER       reduce using rule 80 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)
    NEWLINE         reduce using rule 80 (declaracion_concatenar_string -> LOCAL_VAR ASSIGN concatenar_string .)


state 134

    (153) proc_expression -> PROC . DOT NEW block_expression

    DOT             shift and go to state 198


state 135

    (138) arithmetic_production -> num .
    (140) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (22) value -> num .
    (64) condicion -> num . operComp num
    (66) condicion -> num . operComp var
    (142) arithmetic_operators -> . PLUS
    (143) arithmetic_operators -> . MINUS
    (144) arithmetic_operators -> . MULTIPLY
    (145) arithmetic_operators -> . DIVIDE
    (146) arithmetic_operators -> . MODULO
    (147) arithmetic_operators -> . EXPONENT
    (67) operComp -> . GREATER
    (68) operComp -> . LESS
    (69) operComp -> . GREATER_EQUAL
    (70) operComp -> . LESS_EQUAL
    (71) operComp -> . EQUAL
    (72) operComp -> . NOT_EQUAL
    (73) operComp -> . COMPARE

  ! reduce/reduce conflict for $end resolved using rule 22 (value -> num .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 22 (value -> num .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 22 (value -> num .)
    $end            reduce using rule 22 (value -> num .)
    END_LOWER       reduce using rule 22 (value -> num .)
    NEWLINE         reduce using rule 22 (value -> num .)
    PLUS            shift and go to state 200
    MINUS           shift and go to state 190
    MULTIPLY        shift and go to state 191
    DIVIDE          shift and go to state 192
    MODULO          shift and go to state 193
    EXPONENT        shift and go to state 194
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

  ! $end            [ reduce using rule 138 (arithmetic_production -> num .) ]
  ! END_LOWER       [ reduce using rule 138 (arithmetic_production -> num .) ]
  ! NEWLINE         [ reduce using rule 138 (arithmetic_production -> num .) ]

    arithmetic_operators           shift and go to state 199
    operComp                       shift and go to state 156

state 136

    (23) value -> var .
    (65) condicion -> var . operComp num
    (67) operComp -> . GREATER
    (68) operComp -> . LESS
    (69) operComp -> . GREATER_EQUAL
    (70) operComp -> . LESS_EQUAL
    (71) operComp -> . EQUAL
    (72) operComp -> . NOT_EQUAL
    (73) operComp -> . COMPARE

    $end            reduce using rule 23 (value -> var .)
    END_LOWER       reduce using rule 23 (value -> var .)
    NEWLINE         reduce using rule 23 (value -> var .)
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 164

state 137

    (24) value -> STRING .
    (76) concatenar_string -> STRING . PLUS STRING
    (77) concatenar_string -> STRING . PLUS LOCAL_VAR

    $end            reduce using rule 24 (value -> STRING .)
    END_LOWER       reduce using rule 24 (value -> STRING .)
    NEWLINE         reduce using rule 24 (value -> STRING .)
    PLUS            shift and go to state 201


state 138

    (155) proc_call -> LOCAL_VAR DOT CALL . LEFTPAR values RIGHTPAR

    LEFTPAR         shift and go to state 202


state 139

    (156) proc_call -> LOCAL_VAR DOT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 203
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 140

    (75) to_string -> LOCAL_VAR DOT TO_S .

    $end            reduce using rule 75 (to_string -> LOCAL_VAR DOT TO_S .)
    END_LOWER       reduce using rule 75 (to_string -> LOCAL_VAR DOT TO_S .)
    NEWLINE         reduce using rule 75 (to_string -> LOCAL_VAR DOT TO_S .)


state 141

    (157) proc_call -> LOCAL_VAR LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 204


state 142

    (46) array_explicito -> LEFT_COR values RIGHT_COR .

    $end            reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    LEFT_COR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    RIGHTPAR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)


state 143

    (54) acceder_arreglo -> var_arreglo LEFT_COR INTEGER . RIGHT_COR

    RIGHT_COR       shift and go to state 205


state 144

    (124) comparador -> value EQUAL value .

    $end            reduce using rule 124 (comparador -> value EQUAL value .)
    END_LOWER       reduce using rule 124 (comparador -> value EQUAL value .)
    NEWLINE         reduce using rule 124 (comparador -> value EQUAL value .)


state 145

    (125) comparador -> value COMPARE value .

    $end            reduce using rule 125 (comparador -> value COMPARE value .)
    END_LOWER       reduce using rule 125 (comparador -> value COMPARE value .)
    NEWLINE         reduce using rule 125 (comparador -> value COMPARE value .)


state 146

    (86) hash_operations -> hash_access ASSIGN value .

    $end            reduce using rule 86 (hash_operations -> hash_access ASSIGN value .)
    END_LOWER       reduce using rule 86 (hash_operations -> hash_access ASSIGN value .)
    NEWLINE         reduce using rule 86 (hash_operations -> hash_access ASSIGN value .)


state 147

    (126) set_expression -> SET DOT NEW . LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    LEFTPAR         shift and go to state 206


state 148

    (127) set_expression -> SET LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 207


state 149

    (55) ifStatement -> IF condiciones NEWLINE . codigo END_LOWER
    (56) ifStatement -> IF condiciones NEWLINE . codigo NEWLINE else_statement END_LOWER
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (12) codigo -> . comparador
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (13) estructurasDatos -> . array
    (14) estructurasDatos -> . acceder_arreglo
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . hash_var
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (93) method_call -> . var LEFTPAR values RIGHTPAR
    (94) method_call -> . var LEFTPAR RIGHTPAR
    (152) block_assignment -> . method_call block_expression
    (154) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (155) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (157) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (114) declaraciones -> . variable_declaration
    (115) declaraciones -> . store_conditional_result
    (116) declaraciones -> . declare_data_structures
    (117) declaraciones -> . var_arreglo
    (118) declaraciones -> . hash_var
    (119) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (120) declaraciones -> . declaracion_concatenar_string
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (75) to_string -> . LOCAL_VAR DOT TO_S
    (124) comparador -> . value EQUAL value
    (125) comparador -> . value COMPARE value
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (86) hash_operations -> . hash_access ASSIGN value
    (81) hash_var -> . LOCAL_VAR ASSIGN LBRACE hash_values RBRACE
    (82) hash_var -> . LOCAL_VAR ASSIGN LBRACE RBRACE
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR
    (128) set_operations -> . set_expression
    (129) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (91) while_statement -> . WHILE condiciones COLON codigo
    (136) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (137) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (87) variable_declaration -> . LOCAL_VAR ASSIGN value
    (88) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (89) declare_data_structures -> . var_arreglo
    (90) declare_data_structures -> . hash_var
    (130) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (80) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (85) hash_access -> . var LBRACE value RBRACE
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    PUT             shift and go to state 14
    GETS            shift and go to state 15
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    SET             shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    UNLESS          shift and go to state 46
    INSTANCE_VAR    shift and go to state 47
    CLASS_VAR       shift and go to state 48
    GLOBAL_VAR      shift and go to state 49
    CONSTANT        shift and go to state 50
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 54
    ARRAY           shift and go to state 55

    codigo                         shift and go to state 208
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    comparador                     shift and go to state 13
    array                          shift and go to state 16
    acceder_arreglo                shift and go to state 17
    hash_operations                shift and go to state 18
    hash_var                       shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    value                          shift and go to state 37
    array_explicito                shift and go to state 38
    array_implicito                shift and go to state 39
    array_creation                 shift and go to state 40
    newArray                       shift and go to state 41
    hash_access                    shift and go to state 42
    num                            shift and go to state 51

state 150

    (58) condiciones -> condiciones conectores . condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    condiciones                    shift and go to state 209
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 151

    (59) conectores -> AND .

    FLOAT           reduce using rule 59 (conectores -> AND .)
    INTEGER         reduce using rule 59 (conectores -> AND .)
    LOCAL_VAR       reduce using rule 59 (conectores -> AND .)
    INSTANCE_VAR    reduce using rule 59 (conectores -> AND .)
    CLASS_VAR       reduce using rule 59 (conectores -> AND .)
    GLOBAL_VAR      reduce using rule 59 (conectores -> AND .)


state 152

    (60) conectores -> OR .

    FLOAT           reduce using rule 60 (conectores -> OR .)
    INTEGER         reduce using rule 60 (conectores -> OR .)
    LOCAL_VAR       reduce using rule 60 (conectores -> OR .)
    INSTANCE_VAR    reduce using rule 60 (conectores -> OR .)
    CLASS_VAR       reduce using rule 60 (conectores -> OR .)
    GLOBAL_VAR      reduce using rule 60 (conectores -> OR .)


state 153

    (61) conectores -> AND_RESERVED .

    FLOAT           reduce using rule 61 (conectores -> AND_RESERVED .)
    INTEGER         reduce using rule 61 (conectores -> AND_RESERVED .)
    LOCAL_VAR       reduce using rule 61 (conectores -> AND_RESERVED .)
    INSTANCE_VAR    reduce using rule 61 (conectores -> AND_RESERVED .)
    CLASS_VAR       reduce using rule 61 (conectores -> AND_RESERVED .)
    GLOBAL_VAR      reduce using rule 61 (conectores -> AND_RESERVED .)


state 154

    (62) conectores -> OR_RESERVED .

    FLOAT           reduce using rule 62 (conectores -> OR_RESERVED .)
    INTEGER         reduce using rule 62 (conectores -> OR_RESERVED .)
    LOCAL_VAR       reduce using rule 62 (conectores -> OR_RESERVED .)
    INSTANCE_VAR    reduce using rule 62 (conectores -> OR_RESERVED .)
    CLASS_VAR       reduce using rule 62 (conectores -> OR_RESERVED .)
    GLOBAL_VAR      reduce using rule 62 (conectores -> OR_RESERVED .)


state 155

    (63) conectores -> EQUAL .

    FLOAT           reduce using rule 63 (conectores -> EQUAL .)
    INTEGER         reduce using rule 63 (conectores -> EQUAL .)
    LOCAL_VAR       reduce using rule 63 (conectores -> EQUAL .)
    INSTANCE_VAR    reduce using rule 63 (conectores -> EQUAL .)
    CLASS_VAR       reduce using rule 63 (conectores -> EQUAL .)
    GLOBAL_VAR      reduce using rule 63 (conectores -> EQUAL .)


state 156

    (64) condicion -> num operComp . num
    (66) condicion -> num operComp . var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    num                            shift and go to state 210
    var                            shift and go to state 211

state 157

    (67) operComp -> GREATER .

    FLOAT           reduce using rule 67 (operComp -> GREATER .)
    INTEGER         reduce using rule 67 (operComp -> GREATER .)
    LOCAL_VAR       reduce using rule 67 (operComp -> GREATER .)
    INSTANCE_VAR    reduce using rule 67 (operComp -> GREATER .)
    CLASS_VAR       reduce using rule 67 (operComp -> GREATER .)
    GLOBAL_VAR      reduce using rule 67 (operComp -> GREATER .)


state 158

    (68) operComp -> LESS .

    FLOAT           reduce using rule 68 (operComp -> LESS .)
    INTEGER         reduce using rule 68 (operComp -> LESS .)
    LOCAL_VAR       reduce using rule 68 (operComp -> LESS .)
    INSTANCE_VAR    reduce using rule 68 (operComp -> LESS .)
    CLASS_VAR       reduce using rule 68 (operComp -> LESS .)
    GLOBAL_VAR      reduce using rule 68 (operComp -> LESS .)


state 159

    (69) operComp -> GREATER_EQUAL .

    FLOAT           reduce using rule 69 (operComp -> GREATER_EQUAL .)
    INTEGER         reduce using rule 69 (operComp -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 69 (operComp -> GREATER_EQUAL .)
    INSTANCE_VAR    reduce using rule 69 (operComp -> GREATER_EQUAL .)
    CLASS_VAR       reduce using rule 69 (operComp -> GREATER_EQUAL .)
    GLOBAL_VAR      reduce using rule 69 (operComp -> GREATER_EQUAL .)


state 160

    (70) operComp -> LESS_EQUAL .

    FLOAT           reduce using rule 70 (operComp -> LESS_EQUAL .)
    INTEGER         reduce using rule 70 (operComp -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 70 (operComp -> LESS_EQUAL .)
    INSTANCE_VAR    reduce using rule 70 (operComp -> LESS_EQUAL .)
    CLASS_VAR       reduce using rule 70 (operComp -> LESS_EQUAL .)
    GLOBAL_VAR      reduce using rule 70 (operComp -> LESS_EQUAL .)


state 161

    (71) operComp -> EQUAL .

    FLOAT           reduce using rule 71 (operComp -> EQUAL .)
    INTEGER         reduce using rule 71 (operComp -> EQUAL .)
    LOCAL_VAR       reduce using rule 71 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 71 (operComp -> EQUAL .)
    CLASS_VAR       reduce using rule 71 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 71 (operComp -> EQUAL .)


state 162

    (72) operComp -> NOT_EQUAL .

    FLOAT           reduce using rule 72 (operComp -> NOT_EQUAL .)
    INTEGER         reduce using rule 72 (operComp -> NOT_EQUAL .)
    LOCAL_VAR       reduce using rule 72 (operComp -> NOT_EQUAL .)
    INSTANCE_VAR    reduce using rule 72 (operComp -> NOT_EQUAL .)
    CLASS_VAR       reduce using rule 72 (operComp -> NOT_EQUAL .)
    GLOBAL_VAR      reduce using rule 72 (operComp -> NOT_EQUAL .)


state 163

    (73) operComp -> COMPARE .

    FLOAT           reduce using rule 73 (operComp -> COMPARE .)
    INTEGER         reduce using rule 73 (operComp -> COMPARE .)
    LOCAL_VAR       reduce using rule 73 (operComp -> COMPARE .)
    INSTANCE_VAR    reduce using rule 73 (operComp -> COMPARE .)
    CLASS_VAR       reduce using rule 73 (operComp -> COMPARE .)
    GLOBAL_VAR      reduce using rule 73 (operComp -> COMPARE .)


state 164

    (65) condicion -> var operComp . num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64

    num                            shift and go to state 212

state 165

    (91) while_statement -> WHILE condiciones COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (12) codigo -> . comparador
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (13) estructurasDatos -> . array
    (14) estructurasDatos -> . acceder_arreglo
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . hash_var
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (93) method_call -> . var LEFTPAR values RIGHTPAR
    (94) method_call -> . var LEFTPAR RIGHTPAR
    (152) block_assignment -> . method_call block_expression
    (154) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (155) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (157) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (114) declaraciones -> . variable_declaration
    (115) declaraciones -> . store_conditional_result
    (116) declaraciones -> . declare_data_structures
    (117) declaraciones -> . var_arreglo
    (118) declaraciones -> . hash_var
    (119) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (120) declaraciones -> . declaracion_concatenar_string
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (75) to_string -> . LOCAL_VAR DOT TO_S
    (124) comparador -> . value EQUAL value
    (125) comparador -> . value COMPARE value
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (86) hash_operations -> . hash_access ASSIGN value
    (81) hash_var -> . LOCAL_VAR ASSIGN LBRACE hash_values RBRACE
    (82) hash_var -> . LOCAL_VAR ASSIGN LBRACE RBRACE
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR
    (128) set_operations -> . set_expression
    (129) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (91) while_statement -> . WHILE condiciones COLON codigo
    (136) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (137) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (87) variable_declaration -> . LOCAL_VAR ASSIGN value
    (88) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (89) declare_data_structures -> . var_arreglo
    (90) declare_data_structures -> . hash_var
    (130) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (80) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (85) hash_access -> . var LBRACE value RBRACE
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    PUT             shift and go to state 14
    GETS            shift and go to state 15
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    SET             shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    UNLESS          shift and go to state 46
    INSTANCE_VAR    shift and go to state 47
    CLASS_VAR       shift and go to state 48
    GLOBAL_VAR      shift and go to state 49
    CONSTANT        shift and go to state 50
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 54
    ARRAY           shift and go to state 55

    codigo                         shift and go to state 213
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    comparador                     shift and go to state 13
    array                          shift and go to state 16
    acceder_arreglo                shift and go to state 17
    hash_operations                shift and go to state 18
    hash_var                       shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    value                          shift and go to state 37
    array_explicito                shift and go to state 38
    array_implicito                shift and go to state 39
    array_creation                 shift and go to state 40
    newArray                       shift and go to state 41
    hash_access                    shift and go to state 42
    num                            shift and go to state 51

state 166

    (136) unless_expression -> UNLESS boolean_expression THEN . expresion END
    (137) unless_expression -> UNLESS boolean_expression THEN . expresion ELSE expresion END
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 214
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 167

    (96) boolean_expression -> expression GREATER . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 215
    variable                       shift and go to state 35

state 168

    (97) boolean_expression -> expression LESS . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 216
    variable                       shift and go to state 35

state 169

    (98) boolean_expression -> expression GREATER_EQUAL . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 217
    variable                       shift and go to state 35

state 170

    (99) boolean_expression -> expression LESS_EQUAL . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 218
    variable                       shift and go to state 35

state 171

    (100) boolean_expression -> expression EQUAL . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 219
    variable                       shift and go to state 35

state 172

    (101) boolean_expression -> expression NOT_EQUAL . expression
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT

    INTEGER         shift and go to state 97
    FLOAT           shift and go to state 98
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 50

    expression                     shift and go to state 220
    variable                       shift and go to state 35

state 173

    (48) array_implicito -> PERCENTW LEFT_COR values_space . RIGHT_COR

    RIGHT_COR       shift and go to state 221


state 174

    (49) array_implicito -> PERCENTW LEFT_COR RIGHT_COR .

    $end            reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)


state 175

    (27) values_space -> value . SPACE values_space
    (28) values_space -> value .

    SPACE           shift and go to state 222
    RIGHT_COR       reduce using rule 28 (values_space -> value .)


state 176

    (50) array_creation -> ARRAY LEFTPAR array_explicito . RIGHTPAR

    RIGHTPAR        shift and go to state 223


state 177

    (51) newArray -> ARRAY DOT NEW .
    (52) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER COMMA values RIGHTPAR

    $end            reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFT_COR        reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    END_LOWER       reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    NEWLINE         reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFTPAR         shift and go to state 224


state 178

    (148) block_expression -> LBRACE expresion RBRACE .

    $end            reduce using rule 148 (block_expression -> LBRACE expresion RBRACE .)
    END_LOWER       reduce using rule 148 (block_expression -> LBRACE expresion RBRACE .)
    NEWLINE         reduce using rule 148 (block_expression -> LBRACE expresion RBRACE .)


state 179

    (150) block_expression -> LBRACE PIPE LOCAL_VAR . PIPE expresion RBRACE

    PIPE            shift and go to state 225


state 180

    (95) print_statement -> PUT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 226
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 181

    (92) condition_with_connectors -> condiciones conectores . condiciones
    (58) condiciones -> condiciones conectores . condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    condiciones                    shift and go to state 227
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 182

    (149) block_expression -> DO expresion END .

    $end            reduce using rule 149 (block_expression -> DO expresion END .)
    END_LOWER       reduce using rule 149 (block_expression -> DO expresion END .)
    NEWLINE         reduce using rule 149 (block_expression -> DO expresion END .)


state 183

    (151) block_expression -> DO PIPE LOCAL_VAR . PIPE expresion END

    PIPE            shift and go to state 228


state 184

    (30) values -> value COMMA values .

    $end            reduce using rule 30 (values -> value COMMA values .)
    END_LOWER       reduce using rule 30 (values -> value COMMA values .)
    NEWLINE         reduce using rule 30 (values -> value COMMA values .)
    RIGHT_COR       reduce using rule 30 (values -> value COMMA values .)
    RIGHTPAR        reduce using rule 30 (values -> value COMMA values .)
    RBRACE          reduce using rule 30 (values -> value COMMA values .)
    END             reduce using rule 30 (values -> value COMMA values .)
    ELSE            reduce using rule 30 (values -> value COMMA values .)


state 185

    (37) gets -> GETS DOT CHOMP DOT . TO_F
    (38) gets -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 229
    TO_I            shift and go to state 230


state 186

    (93) method_call -> var LEFTPAR values RIGHTPAR .

    LBRACE          reduce using rule 93 (method_call -> var LEFTPAR values RIGHTPAR .)
    DO              reduce using rule 93 (method_call -> var LEFTPAR values RIGHTPAR .)
    $end            reduce using rule 93 (method_call -> var LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 93 (method_call -> var LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 93 (method_call -> var LEFTPAR values RIGHTPAR .)


state 187

    (85) hash_access -> var LBRACE value RBRACE .

    ASSIGN          reduce using rule 85 (hash_access -> var LBRACE value RBRACE .)


state 188

    (141) arithmetic_production -> LOCAL_VAR arithmetic_operators . arithmetic_production
    (138) arithmetic_production -> . num
    (139) arithmetic_production -> . LOCAL_VAR
    (140) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (141) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    LOCAL_VAR       shift and go to state 231
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64

    arithmetic_production          shift and go to state 232
    num                            shift and go to state 233

state 189

    (78) concatenar_string -> LOCAL_VAR PLUS . STRING
    (79) concatenar_string -> LOCAL_VAR PLUS . LOCAL_VAR
    (142) arithmetic_operators -> PLUS .

  ! shift/reduce conflict for LOCAL_VAR resolved as shift
    STRING          shift and go to state 235
    LOCAL_VAR       shift and go to state 234
    FLOAT           reduce using rule 142 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 142 (arithmetic_operators -> PLUS .)

  ! LOCAL_VAR       [ reduce using rule 142 (arithmetic_operators -> PLUS .) ]


state 190

    (143) arithmetic_operators -> MINUS .

    LOCAL_VAR       reduce using rule 143 (arithmetic_operators -> MINUS .)
    FLOAT           reduce using rule 143 (arithmetic_operators -> MINUS .)
    INTEGER         reduce using rule 143 (arithmetic_operators -> MINUS .)


state 191

    (144) arithmetic_operators -> MULTIPLY .

    LOCAL_VAR       reduce using rule 144 (arithmetic_operators -> MULTIPLY .)
    FLOAT           reduce using rule 144 (arithmetic_operators -> MULTIPLY .)
    INTEGER         reduce using rule 144 (arithmetic_operators -> MULTIPLY .)


state 192

    (145) arithmetic_operators -> DIVIDE .

    LOCAL_VAR       reduce using rule 145 (arithmetic_operators -> DIVIDE .)
    FLOAT           reduce using rule 145 (arithmetic_operators -> DIVIDE .)
    INTEGER         reduce using rule 145 (arithmetic_operators -> DIVIDE .)


state 193

    (146) arithmetic_operators -> MODULO .

    LOCAL_VAR       reduce using rule 146 (arithmetic_operators -> MODULO .)
    FLOAT           reduce using rule 146 (arithmetic_operators -> MODULO .)
    INTEGER         reduce using rule 146 (arithmetic_operators -> MODULO .)


state 194

    (147) arithmetic_operators -> EXPONENT .

    LOCAL_VAR       reduce using rule 147 (arithmetic_operators -> EXPONENT .)
    FLOAT           reduce using rule 147 (arithmetic_operators -> EXPONENT .)
    INTEGER         reduce using rule 147 (arithmetic_operators -> EXPONENT .)


state 195

    (81) hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values . RBRACE

    RBRACE          shift and go to state 236


state 196

    (82) hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE .

    $end            reduce using rule 82 (hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE .)
    END_LOWER       reduce using rule 82 (hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE .)
    NEWLINE         reduce using rule 82 (hash_var -> LOCAL_VAR ASSIGN LBRACE RBRACE .)


state 197

    (83) hash_values -> STRING . HASH_ROCKET value
    (84) hash_values -> STRING . HASH_ROCKET value COMMA hash_values

    HASH_ROCKET     shift and go to state 237


state 198

    (153) proc_expression -> PROC DOT . NEW block_expression

    NEW             shift and go to state 238


state 199

    (140) arithmetic_production -> num arithmetic_operators . arithmetic_production
    (138) arithmetic_production -> . num
    (139) arithmetic_production -> . LOCAL_VAR
    (140) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (141) arithmetic_production -> . LOCAL_VAR arithmetic_operators arithmetic_production
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    LOCAL_VAR       shift and go to state 231
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64

    num                            shift and go to state 233
    arithmetic_production          shift and go to state 239

state 200

    (142) arithmetic_operators -> PLUS .

    LOCAL_VAR       reduce using rule 142 (arithmetic_operators -> PLUS .)
    FLOAT           reduce using rule 142 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 142 (arithmetic_operators -> PLUS .)


state 201

    (76) concatenar_string -> STRING PLUS . STRING
    (77) concatenar_string -> STRING PLUS . LOCAL_VAR

    STRING          shift and go to state 240
    LOCAL_VAR       shift and go to state 241


state 202

    (155) proc_call -> LOCAL_VAR DOT CALL LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 242
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 203

    (156) proc_call -> LOCAL_VAR DOT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 243


state 204

    (157) proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .

    $end            reduce using rule 157 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 157 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 157 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)


state 205

    (54) acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .

    $end            reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    END_LOWER       reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    NEWLINE         reduce using rule 54 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)


state 206

    (126) set_expression -> SET DOT NEW LEFTPAR . LEFT_COR values RIGHT_COR RIGHTPAR

    LEFT_COR        shift and go to state 244


state 207

    (127) set_expression -> SET LEFT_COR values RIGHT_COR .

    $end            reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PLUS            reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    MINUS           reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    AMPERSAND       reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PIPE            reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    CARET           reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 127 (set_expression -> SET LEFT_COR values RIGHT_COR .)


state 208

    (55) ifStatement -> IF condiciones NEWLINE codigo . END_LOWER
    (56) ifStatement -> IF condiciones NEWLINE codigo . NEWLINE else_statement END_LOWER

    END_LOWER       shift and go to state 246
    NEWLINE         shift and go to state 245


state 209

    (58) condiciones -> condiciones conectores condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    NEWLINE         reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    COLON           reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    $end            reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    END_LOWER       reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    RBRACE          reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    END             reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    ELSE            reduce using rule 58 (condiciones -> condiciones conectores condiciones .)
    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

  ! AND             [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! EQUAL           [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 150

state 210

    (64) condicion -> num operComp num .

    NEWLINE         reduce using rule 64 (condicion -> num operComp num .)
    AND             reduce using rule 64 (condicion -> num operComp num .)
    OR              reduce using rule 64 (condicion -> num operComp num .)
    AND_RESERVED    reduce using rule 64 (condicion -> num operComp num .)
    OR_RESERVED     reduce using rule 64 (condicion -> num operComp num .)
    EQUAL           reduce using rule 64 (condicion -> num operComp num .)
    COLON           reduce using rule 64 (condicion -> num operComp num .)
    $end            reduce using rule 64 (condicion -> num operComp num .)
    END_LOWER       reduce using rule 64 (condicion -> num operComp num .)
    RBRACE          reduce using rule 64 (condicion -> num operComp num .)
    END             reduce using rule 64 (condicion -> num operComp num .)
    ELSE            reduce using rule 64 (condicion -> num operComp num .)


state 211

    (66) condicion -> num operComp var .

    NEWLINE         reduce using rule 66 (condicion -> num operComp var .)
    AND             reduce using rule 66 (condicion -> num operComp var .)
    OR              reduce using rule 66 (condicion -> num operComp var .)
    AND_RESERVED    reduce using rule 66 (condicion -> num operComp var .)
    OR_RESERVED     reduce using rule 66 (condicion -> num operComp var .)
    EQUAL           reduce using rule 66 (condicion -> num operComp var .)
    COLON           reduce using rule 66 (condicion -> num operComp var .)
    $end            reduce using rule 66 (condicion -> num operComp var .)
    END_LOWER       reduce using rule 66 (condicion -> num operComp var .)
    RBRACE          reduce using rule 66 (condicion -> num operComp var .)
    END             reduce using rule 66 (condicion -> num operComp var .)
    ELSE            reduce using rule 66 (condicion -> num operComp var .)


state 212

    (65) condicion -> var operComp num .

    NEWLINE         reduce using rule 65 (condicion -> var operComp num .)
    AND             reduce using rule 65 (condicion -> var operComp num .)
    OR              reduce using rule 65 (condicion -> var operComp num .)
    AND_RESERVED    reduce using rule 65 (condicion -> var operComp num .)
    OR_RESERVED     reduce using rule 65 (condicion -> var operComp num .)
    EQUAL           reduce using rule 65 (condicion -> var operComp num .)
    COLON           reduce using rule 65 (condicion -> var operComp num .)
    $end            reduce using rule 65 (condicion -> var operComp num .)
    END_LOWER       reduce using rule 65 (condicion -> var operComp num .)
    RBRACE          reduce using rule 65 (condicion -> var operComp num .)
    END             reduce using rule 65 (condicion -> var operComp num .)
    ELSE            reduce using rule 65 (condicion -> var operComp num .)


state 213

    (91) while_statement -> WHILE condiciones COLON codigo .

    $end            reduce using rule 91 (while_statement -> WHILE condiciones COLON codigo .)
    END_LOWER       reduce using rule 91 (while_statement -> WHILE condiciones COLON codigo .)
    NEWLINE         reduce using rule 91 (while_statement -> WHILE condiciones COLON codigo .)


state 214

    (136) unless_expression -> UNLESS boolean_expression THEN expresion . END
    (137) unless_expression -> UNLESS boolean_expression THEN expresion . ELSE expresion END

    END             shift and go to state 247
    ELSE            shift and go to state 248


state 215

    (96) boolean_expression -> expression GREATER expression .

    THEN            reduce using rule 96 (boolean_expression -> expression GREATER expression .)


state 216

    (97) boolean_expression -> expression LESS expression .

    THEN            reduce using rule 97 (boolean_expression -> expression LESS expression .)


state 217

    (98) boolean_expression -> expression GREATER_EQUAL expression .

    THEN            reduce using rule 98 (boolean_expression -> expression GREATER_EQUAL expression .)


state 218

    (99) boolean_expression -> expression LESS_EQUAL expression .

    THEN            reduce using rule 99 (boolean_expression -> expression LESS_EQUAL expression .)


state 219

    (100) boolean_expression -> expression EQUAL expression .

    THEN            reduce using rule 100 (boolean_expression -> expression EQUAL expression .)


state 220

    (101) boolean_expression -> expression NOT_EQUAL expression .

    THEN            reduce using rule 101 (boolean_expression -> expression NOT_EQUAL expression .)


state 221

    (48) array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .

    $end            reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    LEFT_COR        reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    END_LOWER       reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    NEWLINE         reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)


state 222

    (27) values_space -> value SPACE . values_space
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 175
    values_space                   shift and go to state 249
    num                            shift and go to state 51
    var                            shift and go to state 61

state 223

    (50) array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .

    $end            reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    LEFT_COR        reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    END_LOWER       reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    NEWLINE         reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)


state 224

    (52) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER COMMA values RIGHTPAR

    INTEGER         shift and go to state 250


state 225

    (150) block_expression -> LBRACE PIPE LOCAL_VAR PIPE . expresion RBRACE
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 251
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 226

    (95) print_statement -> PUT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 252


state 227

    (92) condition_with_connectors -> condiciones conectores condiciones .
    (58) condiciones -> condiciones conectores condiciones .
    (58) condiciones -> condiciones . conectores condiciones
    (59) conectores -> . AND
    (60) conectores -> . OR
    (61) conectores -> . AND_RESERVED
    (62) conectores -> . OR_RESERVED
    (63) conectores -> . EQUAL

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
    RBRACE          reduce using rule 92 (condition_with_connectors -> condiciones conectores condiciones .)
    END             reduce using rule 92 (condition_with_connectors -> condiciones conectores condiciones .)
    ELSE            reduce using rule 92 (condition_with_connectors -> condiciones conectores condiciones .)
    AND             shift and go to state 151
    OR              shift and go to state 152
    AND_RESERVED    shift and go to state 153
    OR_RESERVED     shift and go to state 154
    EQUAL           shift and go to state 155

  ! AND             [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]
  ! EQUAL           [ reduce using rule 58 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 150

state 228

    (151) block_expression -> DO PIPE LOCAL_VAR PIPE . expresion END
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 253
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 229

    (37) gets -> GETS DOT CHOMP DOT TO_F .

    $end            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    END_LOWER       reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    NEWLINE         reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)


state 230

    (38) gets -> GETS DOT CHOMP DOT TO_I .

    $end            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    END_LOWER       reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    NEWLINE         reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)


state 231

    (139) arithmetic_production -> LOCAL_VAR .
    (141) arithmetic_production -> LOCAL_VAR . arithmetic_operators arithmetic_production
    (142) arithmetic_operators -> . PLUS
    (143) arithmetic_operators -> . MINUS
    (144) arithmetic_operators -> . MULTIPLY
    (145) arithmetic_operators -> . DIVIDE
    (146) arithmetic_operators -> . MODULO
    (147) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 139 (arithmetic_production -> LOCAL_VAR .)
    END_LOWER       reduce using rule 139 (arithmetic_production -> LOCAL_VAR .)
    NEWLINE         reduce using rule 139 (arithmetic_production -> LOCAL_VAR .)
    PLUS            shift and go to state 200
    MINUS           shift and go to state 190
    MULTIPLY        shift and go to state 191
    DIVIDE          shift and go to state 192
    MODULO          shift and go to state 193
    EXPONENT        shift and go to state 194

    arithmetic_operators           shift and go to state 188

state 232

    (141) arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .

    $end            reduce using rule 141 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 141 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 141 (arithmetic_production -> LOCAL_VAR arithmetic_operators arithmetic_production .)


state 233

    (138) arithmetic_production -> num .
    (140) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (142) arithmetic_operators -> . PLUS
    (143) arithmetic_operators -> . MINUS
    (144) arithmetic_operators -> . MULTIPLY
    (145) arithmetic_operators -> . DIVIDE
    (146) arithmetic_operators -> . MODULO
    (147) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 138 (arithmetic_production -> num .)
    END_LOWER       reduce using rule 138 (arithmetic_production -> num .)
    NEWLINE         reduce using rule 138 (arithmetic_production -> num .)
    PLUS            shift and go to state 200
    MINUS           shift and go to state 190
    MULTIPLY        shift and go to state 191
    DIVIDE          shift and go to state 192
    MODULO          shift and go to state 193
    EXPONENT        shift and go to state 194

    arithmetic_operators           shift and go to state 199

state 234

    (79) concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .

    $end            reduce using rule 79 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)
    END_LOWER       reduce using rule 79 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)
    NEWLINE         reduce using rule 79 (concatenar_string -> LOCAL_VAR PLUS LOCAL_VAR .)


state 235

    (78) concatenar_string -> LOCAL_VAR PLUS STRING .

    $end            reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS STRING .)
    END_LOWER       reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS STRING .)
    NEWLINE         reduce using rule 78 (concatenar_string -> LOCAL_VAR PLUS STRING .)


state 236

    (81) hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE .

    $end            reduce using rule 81 (hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE .)
    END_LOWER       reduce using rule 81 (hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE .)
    NEWLINE         reduce using rule 81 (hash_var -> LOCAL_VAR ASSIGN LBRACE hash_values RBRACE .)


state 237

    (83) hash_values -> STRING HASH_ROCKET . value
    (84) hash_values -> STRING HASH_ROCKET . value COMMA hash_values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    value                          shift and go to state 254
    num                            shift and go to state 51
    var                            shift and go to state 61

state 238

    (153) proc_expression -> PROC DOT NEW . block_expression
    (148) block_expression -> . LBRACE expresion RBRACE
    (149) block_expression -> . DO expresion END
    (150) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (151) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    LBRACE          shift and go to state 57
    DO              shift and go to state 58

    block_expression               shift and go to state 255

state 239

    (140) arithmetic_production -> num arithmetic_operators arithmetic_production .

    $end            reduce using rule 140 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 140 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 140 (arithmetic_production -> num arithmetic_operators arithmetic_production .)


state 240

    (76) concatenar_string -> STRING PLUS STRING .

    $end            reduce using rule 76 (concatenar_string -> STRING PLUS STRING .)
    END_LOWER       reduce using rule 76 (concatenar_string -> STRING PLUS STRING .)
    NEWLINE         reduce using rule 76 (concatenar_string -> STRING PLUS STRING .)


state 241

    (77) concatenar_string -> STRING PLUS LOCAL_VAR .

    $end            reduce using rule 77 (concatenar_string -> STRING PLUS LOCAL_VAR .)
    END_LOWER       reduce using rule 77 (concatenar_string -> STRING PLUS LOCAL_VAR .)
    NEWLINE         reduce using rule 77 (concatenar_string -> STRING PLUS LOCAL_VAR .)


state 242

    (155) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 256


state 243

    (156) proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .

    $end            reduce using rule 156 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 156 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 156 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)


state 244

    (126) set_expression -> SET DOT NEW LEFTPAR LEFT_COR . values RIGHT_COR RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 257
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 245

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE . else_statement END_LOWER
    (74) else_statement -> . ELSE NEWLINE codigo

    ELSE            shift and go to state 259

    else_statement                 shift and go to state 258

state 246

    (55) ifStatement -> IF condiciones NEWLINE codigo END_LOWER .

    $end            reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    END_LOWER       reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    NEWLINE         reduce using rule 55 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)


state 247

    (136) unless_expression -> UNLESS boolean_expression THEN expresion END .

    $end            reduce using rule 136 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    END_LOWER       reduce using rule 136 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    NEWLINE         reduce using rule 136 (unless_expression -> UNLESS boolean_expression THEN expresion END .)


state 248

    (137) unless_expression -> UNLESS boolean_expression THEN expresion ELSE . expresion END
    (121) expresion -> . puts
    (122) expresion -> . gets
    (123) expresion -> . print_statement
    (158) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (95) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (92) condition_with_connectors -> . condiciones conectores condiciones
    (57) condiciones -> . condicion
    (58) condiciones -> . condiciones conectores condiciones
    (64) condicion -> . num operComp num
    (65) condicion -> . var operComp num
    (66) condicion -> . num operComp var
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    PUT             shift and go to state 115
    GETS            shift and go to state 15
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    expresion                      shift and go to state 260
    puts                           shift and go to state 111
    gets                           shift and go to state 112
    print_statement                shift and go to state 113
    condition_with_connectors      shift and go to state 114
    condiciones                    shift and go to state 116
    condicion                      shift and go to state 90
    num                            shift and go to state 91
    var                            shift and go to state 92

state 249

    (27) values_space -> value SPACE values_space .

    RIGHT_COR       reduce using rule 27 (values_space -> value SPACE values_space .)


state 250

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . COMMA values RIGHTPAR

    RIGHTPAR        shift and go to state 261
    COMMA           shift and go to state 262


state 251

    (150) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion . RBRACE

    RBRACE          shift and go to state 263


state 252

    (95) print_statement -> PUT LEFTPAR values RIGHTPAR .

    RBRACE          reduce using rule 95 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    END             reduce using rule 95 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 95 (print_statement -> PUT LEFTPAR values RIGHTPAR .)


state 253

    (151) block_expression -> DO PIPE LOCAL_VAR PIPE expresion . END

    END             shift and go to state 264


state 254

    (83) hash_values -> STRING HASH_ROCKET value .
    (84) hash_values -> STRING HASH_ROCKET value . COMMA hash_values

    RBRACE          reduce using rule 83 (hash_values -> STRING HASH_ROCKET value .)
    COMMA           shift and go to state 265


state 255

    (153) proc_expression -> PROC DOT NEW block_expression .

    $end            reduce using rule 153 (proc_expression -> PROC DOT NEW block_expression .)
    END_LOWER       reduce using rule 153 (proc_expression -> PROC DOT NEW block_expression .)
    NEWLINE         reduce using rule 153 (proc_expression -> PROC DOT NEW block_expression .)


state 256

    (155) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .

    $end            reduce using rule 155 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 155 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 155 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)


state 257

    (126) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values . RIGHT_COR RIGHTPAR

    RIGHT_COR       shift and go to state 266


state 258

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement . END_LOWER

    END_LOWER       shift and go to state 267


state 259

    (74) else_statement -> ELSE . NEWLINE codigo

    NEWLINE         shift and go to state 268


state 260

    (137) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion . END

    END             shift and go to state 269


state 261

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .

    $end            reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    LEFT_COR        reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    END_LOWER       reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    NEWLINE         reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)


state 262

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR

    STRING          shift and go to state 62
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    FLOAT           shift and go to state 63
    INTEGER         shift and go to state 64
    LOCAL_VAR       shift and go to state 65
    INSTANCE_VAR    shift and go to state 66
    CLASS_VAR       shift and go to state 67
    GLOBAL_VAR      shift and go to state 68

    values                         shift and go to state 270
    value                          shift and go to state 60
    num                            shift and go to state 51
    var                            shift and go to state 61

state 263

    (150) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .

    $end            reduce using rule 150 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    END_LOWER       reduce using rule 150 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    NEWLINE         reduce using rule 150 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)


state 264

    (151) block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .

    $end            reduce using rule 151 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    END_LOWER       reduce using rule 151 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    NEWLINE         reduce using rule 151 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)


state 265

    (84) hash_values -> STRING HASH_ROCKET value COMMA . hash_values
    (83) hash_values -> . STRING HASH_ROCKET value
    (84) hash_values -> . STRING HASH_ROCKET value COMMA hash_values

    STRING          shift and go to state 197

    hash_values                    shift and go to state 271

state 266

    (126) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR . RIGHTPAR

    RIGHTPAR        shift and go to state 272


state 267

    (56) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .

    $end            reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    END_LOWER       reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    NEWLINE         reduce using rule 56 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)


state 268

    (74) else_statement -> ELSE NEWLINE . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . expression
    (11) codigo -> . to_string
    (12) codigo -> . comparador
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (13) estructurasDatos -> . array
    (14) estructurasDatos -> . acceder_arreglo
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . hash_var
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (93) method_call -> . var LEFTPAR values RIGHTPAR
    (94) method_call -> . var LEFTPAR RIGHTPAR
    (152) block_assignment -> . method_call block_expression
    (154) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (155) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (156) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (157) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (114) declaraciones -> . variable_declaration
    (115) declaraciones -> . store_conditional_result
    (116) declaraciones -> . declare_data_structures
    (117) declaraciones -> . var_arreglo
    (118) declaraciones -> . hash_var
    (119) declaraciones -> . LOCAL_VAR ASSIGN arithmetic_production
    (120) declaraciones -> . declaracion_concatenar_string
    (105) expression -> . INTEGER
    (106) expression -> . FLOAT
    (107) expression -> . variable
    (108) expression -> . STRING
    (75) to_string -> . LOCAL_VAR DOT TO_S
    (124) comparador -> . value EQUAL value
    (125) comparador -> . value COMPARE value
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (54) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (86) hash_operations -> . hash_access ASSIGN value
    (81) hash_var -> . LOCAL_VAR ASSIGN LBRACE hash_values RBRACE
    (82) hash_var -> . LOCAL_VAR ASSIGN LBRACE RBRACE
    (126) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (127) set_expression -> . SET LEFT_COR values RIGHT_COR
    (128) set_operations -> . set_expression
    (129) set_operations -> . set_operations set_binary_operators set_expression
    (55) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (56) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (91) while_statement -> . WHILE condiciones COLON codigo
    (136) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (137) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (87) variable_declaration -> . LOCAL_VAR ASSIGN value
    (88) store_conditional_result -> . LOCAL_VAR ASSIGN condiciones
    (89) declare_data_structures -> . var_arreglo
    (90) declare_data_structures -> . hash_var
    (130) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) var_arreglo -> . LOCAL_VAR ASSIGN array
    (80) declaracion_concatenar_string -> . LOCAL_VAR ASSIGN concatenar_string
    (109) variable -> . LOCAL_VAR
    (110) variable -> . INSTANCE_VAR
    (111) variable -> . CLASS_VAR
    (112) variable -> . GLOBAL_VAR
    (113) variable -> . CONSTANT
    (22) value -> . num
    (23) value -> . var
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (85) hash_access -> . var LBRACE value RBRACE
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    PUT             shift and go to state 14
    GETS            shift and go to state 15
    LOCAL_VAR       shift and go to state 26
    INTEGER         shift and go to state 33
    FLOAT           shift and go to state 34
    STRING          shift and go to state 36
    SET             shift and go to state 43
    IF              shift and go to state 44
    WHILE           shift and go to state 45
    UNLESS          shift and go to state 46
    INSTANCE_VAR    shift and go to state 47
    CLASS_VAR       shift and go to state 48
    GLOBAL_VAR      shift and go to state 49
    CONSTANT        shift and go to state 50
    NIL             shift and go to state 52
    SYMBOL          shift and go to state 53
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 54
    ARRAY           shift and go to state 55

    codigo                         shift and go to state 273
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    expression                     shift and go to state 11
    to_string                      shift and go to state 12
    comparador                     shift and go to state 13
    array                          shift and go to state 16
    acceder_arreglo                shift and go to state 17
    hash_operations                shift and go to state 18
    hash_var                       shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    var_arreglo                    shift and go to state 31
    declaracion_concatenar_string  shift and go to state 32
    variable                       shift and go to state 35
    value                          shift and go to state 37
    array_explicito                shift and go to state 38
    array_implicito                shift and go to state 39
    array_creation                 shift and go to state 40
    newArray                       shift and go to state 41
    hash_access                    shift and go to state 42
    num                            shift and go to state 51

state 269

    (137) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .

    $end            reduce using rule 137 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    END_LOWER       reduce using rule 137 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    NEWLINE         reduce using rule 137 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)


state 270

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values . RIGHTPAR

    RIGHTPAR        shift and go to state 274


state 271

    (84) hash_values -> STRING HASH_ROCKET value COMMA hash_values .

    RBRACE          reduce using rule 84 (hash_values -> STRING HASH_ROCKET value COMMA hash_values .)


state 272

    (126) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .

    $end            reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PLUS            reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    MINUS           reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    AMPERSAND       reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PIPE            reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    CARET           reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    END_LOWER       reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    NEWLINE         reduce using rule 126 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)


state 273

    (74) else_statement -> ELSE NEWLINE codigo .

    END_LOWER       reduce using rule 74 (else_statement -> ELSE NEWLINE codigo .)


state 274

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .

    $end            reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    LEFT_COR        reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    END_LOWER       reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    NEWLINE         reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LOCAL_VAR in state 189 resolved as shift
WARNING: shift/reduce conflict for AND in state 209 resolved as shift
WARNING: shift/reduce conflict for OR in state 209 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 209 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 209 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 209 resolved as shift
WARNING: shift/reduce conflict for AND in state 227 resolved as shift
WARNING: shift/reduce conflict for OR in state 227 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 227 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 227 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 227 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (estructurasDatos -> hash_var)
WARNING: rejected rule (declaraciones -> hash_var) in state 19
WARNING: reduce/reduce conflict in state 19 resolved using rule (estructurasDatos -> hash_var)
WARNING: rejected rule (declare_data_structures -> hash_var) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (estructurasDatos -> set_expression)
WARNING: rejected rule (set_operations -> set_expression) in state 20
WARNING: reduce/reduce conflict in state 31 resolved using rule (declare_data_structures -> var_arreglo)
WARNING: rejected rule (declaraciones -> var_arreglo) in state 31
WARNING: reduce/reduce conflict in state 125 resolved using rule (var -> LOCAL_VAR)
WARNING: rejected rule (arithmetic_production -> LOCAL_VAR) in state 125
WARNING: reduce/reduce conflict in state 135 resolved using rule (value -> num)
WARNING: rejected rule (arithmetic_production -> num) in state 135
WARNING: Rule (declaraciones -> hash_var) is never reduced
WARNING: Rule (declare_data_structures -> hash_var) is never reduced
WARNING: Rule (declaraciones -> var_arreglo) is never reduced
