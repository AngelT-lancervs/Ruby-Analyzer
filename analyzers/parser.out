Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BEGIN
    BIN_INTEGER
    BOOLEAN
    BREAK
    CASE
    CASE_EQUAL
    CLASS
    DEF
    DEFINED
    DIVIDE_ASSIGN
    DOUBLE_QUOTE
    ELSIF
    EXPONENT_ASSIGN
    FOR
    HEX_INTEGER
    IN
    MINUS_ASSIGN
    MODULE
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NEWLINE
    NOT
    OCT_INTEGER
    PLUS_ASSIGN
    RANGEEX
    RANGEIN
    REDO
    RETURN
    SELF
    TAB
    UNTIL
    WHEN

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> puts
Rule 2     codigo -> gets
Rule 3     codigo -> estructurasDatos
Rule 4     codigo -> estructurasControl
Rule 5     codigo -> method_call
Rule 6     codigo -> block_assignment
Rule 7     codigo -> proc_assignment
Rule 8     codigo -> proc_call
Rule 9     codigo -> declaraciones
Rule 10    estructurasDatos -> array
Rule 11    estructurasDatos -> var_arreglo
Rule 12    estructurasDatos -> acceder_arreglo
Rule 13    estructurasDatos -> hash_declaration
Rule 14    estructurasDatos -> hash_access
Rule 15    estructurasDatos -> hash_operations
Rule 16    estructurasDatos -> set_expression
Rule 17    estructurasDatos -> set_operations
Rule 18    estructurasControl -> ifStatement
Rule 19    estructurasControl -> while_statement
Rule 20    estructurasControl -> unless_expression
Rule 21    value -> var
Rule 22    value -> num
Rule 23    value -> STRING
Rule 24    value -> NIL
Rule 25    value -> SYMBOL
Rule 26    values_space -> value SPACE values_space
Rule 27    values_space -> value
Rule 28    values -> value
Rule 29    values -> value COMMA values
Rule 30    var -> LOCAL_VAR
Rule 31    var -> INSTANCE_VAR
Rule 32    var -> CLASS_VAR
Rule 33    var -> GLOBAL_VAR
Rule 34    var -> CONSTANT
Rule 35    num -> FLOAT
Rule 36    num -> INTEGER
Rule 37    gets -> GETS DOT CHOMP DOT TO_F
Rule 38    gets -> GETS DOT CHOMP DOT TO_I
Rule 39    gets -> GETS DOT CHOMP
Rule 40    puts -> PUT values
Rule 41    array -> array_explicito
Rule 42    array -> array_implicito
Rule 43    array -> array_creation
Rule 44    array -> newArray
Rule 45    array_explicito -> LEFT_COR values RIGHT_COR
Rule 46    array_explicito -> LEFT_COR RIGHT_COR
Rule 47    array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR
Rule 48    array_implicito -> PERCENTW LEFT_COR RIGHT_COR
Rule 49    array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR
Rule 50    newArray -> ARRAY DOT NEW
Rule 51    newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
Rule 52    newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
Rule 53    var_arreglo -> var
Rule 54    var_arreglo -> var ASSIGN array
Rule 55    acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR
Rule 56    ifStatement -> IF condiciones COLON codigo
Rule 57    ifStatement -> IF condiciones COLON codigo else_statement
Rule 58    condiciones -> condicion
Rule 59    condiciones -> condiciones conectores condiciones
Rule 60    conectores -> AND
Rule 61    conectores -> OR
Rule 62    condicion -> num operComp num
Rule 63    operComp -> GREATER
Rule 64    operComp -> LESS
Rule 65    operComp -> GREATER_EQUAL
Rule 66    operComp -> LESS_EQUAL
Rule 67    operComp -> EQUAL
Rule 68    operComp -> NOT_EQUAL
Rule 69    operComp -> COMPARE
Rule 70    else_statement -> ELSE COLON codigo
Rule 71    hash_declaration -> HASH LEFT_COR values RIGHT_COR
Rule 72    hash_declaration -> HASH LEFT_COR RIGHT_COR
Rule 73    hash_access -> var LEFT_COR value RIGHT_COR
Rule 74    hash_operations -> hash_access ASSIGN value
Rule 75    variable_declaration -> var ASSIGN value
Rule 76    store_conditional_result -> var ASSIGN ifStatement
Rule 77    declare_data_structures -> variable_declaration
Rule 78    declare_data_structures -> array
Rule 79    declare_data_structures -> hash_declaration
Rule 80    while_statement -> WHILE condiciones COLON codigo
Rule 81    condition_with_connectors -> condiciones conectores condiciones
Rule 82    method_call -> var LEFTPAR values RIGHTPAR
Rule 83    method_call -> var LEFTPAR RIGHTPAR
Rule 84    print_statement -> PUT LEFTPAR values RIGHTPAR
Rule 85    boolean_expression -> expression GREATER expression
Rule 86    boolean_expression -> expression LESS expression
Rule 87    boolean_expression -> expression GREATER_EQUAL expression
Rule 88    boolean_expression -> expression LESS_EQUAL expression
Rule 89    boolean_expression -> expression EQUAL expression
Rule 90    boolean_expression -> expression NOT_EQUAL expression
Rule 91    boolean_expression -> boolean_value
Rule 92    boolean_value -> TRUE
Rule 93    boolean_value -> FALSE
Rule 94    expression -> INTEGER
Rule 95    expression -> FLOAT
Rule 96    expression -> variable
Rule 97    expression -> STRING
Rule 98    variable -> LOCAL_VAR
Rule 99    variable -> INSTANCE_VAR
Rule 100   variable -> CLASS_VAR
Rule 101   variable -> GLOBAL_VAR
Rule 102   variable -> CONSTANT
Rule 103   declaraciones -> variable_declaration
Rule 104   declaraciones -> store_conditional_result
Rule 105   declaraciones -> declare_data_structures
Rule 106   expresion -> puts
Rule 107   expresion -> gets
Rule 108   expresion -> print_statement
Rule 109   set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
Rule 110   set_expression -> SET LEFT_COR values RIGHT_COR
Rule 111   set_operations -> set_expression
Rule 112   set_operations -> set_operations set_binary_operators set_expression
Rule 113   declare_data_structures -> LOCAL_VAR ASSIGN set_expression
Rule 114   set_binary_operators -> PLUS
Rule 115   set_binary_operators -> MINUS
Rule 116   set_binary_operators -> AMPERSAND
Rule 117   set_binary_operators -> PIPE
Rule 118   set_binary_operators -> CARET
Rule 119   unless_expression -> UNLESS boolean_expression THEN expresion END
Rule 120   unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END
Rule 121   expresion -> arithmetic_production
Rule 122   arithmetic_production -> num
Rule 123   arithmetic_production -> arithmetic_production arithmetic_operators num
Rule 124   arithmetic_operators -> PLUS
Rule 125   arithmetic_operators -> MINUS
Rule 126   arithmetic_operators -> MULTIPLY
Rule 127   arithmetic_operators -> DIVIDE
Rule 128   arithmetic_operators -> MODULO
Rule 129   arithmetic_operators -> EXPONENT
Rule 130   block_expression -> LBRACE expresion RBRACE
Rule 131   block_expression -> DO expresion END
Rule 132   block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
Rule 133   block_expression -> DO PIPE LOCAL_VAR PIPE expresion END
Rule 134   block_assignment -> method_call block_expression
Rule 135   proc_expression -> PROC DOT NEW block_expression
Rule 136   proc_assignment -> LOCAL_VAR ASSIGN proc_expression
Rule 137   proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
Rule 138   proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR
Rule 139   proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR
Rule 140   expresion -> condition_with_connectors

Terminals, with rules where they appear

AMPERSAND            : 116
AND                  : 60
ARRAY                : 49 50 51 52
ASSIGN               : 54 74 75 76 113 136
BACKSLASH            : 
BEGIN                : 
BIN_INTEGER          : 
BOOLEAN              : 
BREAK                : 
CALL                 : 137
CARET                : 118
CASE                 : 
CASE_EQUAL           : 
CHOMP                : 37 38 39
CLASS                : 
CLASS_VAR            : 32 100
COLON                : 56 57 70 80
COMMA                : 29 52
COMPARE              : 69
CONSTANT             : 34 102
DEF                  : 
DEFINED              : 
DIVIDE               : 127
DIVIDE_ASSIGN        : 
DO                   : 131 133
DOT                  : 37 37 38 38 39 50 51 52 109 135 137 138
DOUBLE_QUOTE         : 
ELSE                 : 70 120
ELSIF                : 
END                  : 119 120 131 133
EQUAL                : 67 89
EXPONENT             : 129
EXPONENT_ASSIGN      : 
FALSE                : 93
FLOAT                : 35 95
FOR                  : 
GETS                 : 37 38 39
GLOBAL_VAR           : 33 101
GREATER              : 63 85
GREATER_EQUAL        : 65 87
HASH                 : 71 72
HEX_INTEGER          : 
IF                   : 56 57
IN                   : 
INSTANCE_VAR         : 31 99
INTEGER              : 36 51 52 55 94
LBRACE               : 130 132
LEFTPAR              : 49 51 52 82 83 84 109 137 138
LEFT_COR             : 45 46 47 48 55 71 72 73 109 110 139
LESS                 : 64 86
LESS_EQUAL           : 66 88
LOCAL_VAR            : 30 98 113 132 133 136 137 138 139
MINUS                : 115 125
MINUS_ASSIGN         : 
MODULE               : 
MODULO               : 128
MODULO_ASSIGN        : 
MULTIPLY             : 126
MULTIPLY_ASSIGN      : 
NEW                  : 50 51 52 109 135
NEWLINE              : 
NIL                  : 24
NOT                  : 
NOT_EQUAL            : 68 90
OCT_INTEGER          : 
OR                   : 61
PERCENTW             : 47 48
PIPE                 : 117 132 132 133 133
PLUS                 : 114 124
PLUS_ASSIGN          : 
PROC                 : 135
PUT                  : 40 84
RANGEEX              : 
RANGEIN              : 
RBRACE               : 130 132
REDO                 : 
RETURN               : 
RIGHTPAR             : 49 51 52 82 83 84 109 137 138
RIGHT_COR            : 45 46 47 48 55 71 72 73 109 110 139
SELF                 : 
SET                  : 109 110
SPACE                : 26
STRING               : 23 97
SYMBOL               : 25
TAB                  : 
THEN                 : 119 120
TO_F                 : 37
TO_I                 : 38
TRUE                 : 92
UNLESS               : 119 120
UNTIL                : 
WHEN                 : 
WHILE                : 80
error                : 

Nonterminals, with rules where they appear

acceder_arreglo      : 12
arithmetic_operators : 123
arithmetic_production : 121 123
array                : 10 54 78
array_creation       : 43
array_explicito      : 41 49
array_implicito      : 42
block_assignment     : 6
block_expression     : 134 135
boolean_expression   : 119 120
boolean_value        : 91
codigo               : 56 57 70 80 0
condicion            : 58
condiciones          : 56 57 59 59 80 81 81
condition_with_connectors : 140
conectores           : 59 81
declaraciones        : 9
declare_data_structures : 105
else_statement       : 57
estructurasControl   : 4
estructurasDatos     : 3
expresion            : 119 120 120 130 131 132 133
expression           : 85 85 86 86 87 87 88 88 89 89 90 90
gets                 : 2 107
hash_access          : 14 74
hash_declaration     : 13 79
hash_operations      : 15
ifStatement          : 18 76
method_call          : 5 134
newArray             : 44
num                  : 22 62 62 122 123
operComp             : 62
print_statement      : 108
proc_assignment      : 7
proc_call            : 8
proc_expression      : 136
puts                 : 1 106
set_binary_operators : 112
set_expression       : 16 111 112 113
set_operations       : 17 112
store_conditional_result : 104
unless_expression    : 20
value                : 26 27 28 29 73 74 75
values               : 29 40 45 52 71 82 84 109 110 137 138 139
values_space         : 26 47
var                  : 21 53 54 73 75 76 82 83
var_arreglo          : 11 55
variable             : 96
variable_declaration : 77 103
while_statement      : 19

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (10) estructurasDatos -> . array
    (11) estructurasDatos -> . var_arreglo
    (12) estructurasDatos -> . acceder_arreglo
    (13) estructurasDatos -> . hash_declaration
    (14) estructurasDatos -> . hash_access
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . set_expression
    (17) estructurasDatos -> . set_operations
    (18) estructurasControl -> . ifStatement
    (19) estructurasControl -> . while_statement
    (20) estructurasControl -> . unless_expression
    (82) method_call -> . var LEFTPAR values RIGHTPAR
    (83) method_call -> . var LEFTPAR RIGHTPAR
    (134) block_assignment -> . method_call block_expression
    (136) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (137) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (139) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (103) declaraciones -> . variable_declaration
    (104) declaraciones -> . store_conditional_result
    (105) declaraciones -> . declare_data_structures
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (53) var_arreglo -> . var
    (54) var_arreglo -> . var ASSIGN array
    (55) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (71) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (72) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (73) hash_access -> . var LEFT_COR value RIGHT_COR
    (74) hash_operations -> . hash_access ASSIGN value
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR
    (111) set_operations -> . set_expression
    (112) set_operations -> . set_operations set_binary_operators set_expression
    (56) ifStatement -> . IF condiciones COLON codigo
    (57) ifStatement -> . IF condiciones COLON codigo else_statement
    (80) while_statement -> . WHILE condiciones COLON codigo
    (119) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (120) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (75) variable_declaration -> . var ASSIGN value
    (76) store_conditional_result -> . var ASSIGN ifStatement
    (77) declare_data_structures -> . variable_declaration
    (78) declare_data_structures -> . array
    (79) declare_data_structures -> . hash_declaration
    (113) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR
    (47) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (49) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> . ARRAY DOT NEW
    (51) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 11
    GETS            shift and go to state 12
    LOCAL_VAR       shift and go to state 25
    HASH            shift and go to state 34
    SET             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    UNLESS          shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    LEFT_COR        shift and go to state 26
    PERCENTW        shift and go to state 43
    ARRAY           shift and go to state 44

    codigo                         shift and go to state 1
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    array                          shift and go to state 13
    var_arreglo                    shift and go to state 14
    acceder_arreglo                shift and go to state 15
    hash_declaration               shift and go to state 16
    hash_access                    shift and go to state 17
    hash_operations                shift and go to state 18
    set_expression                 shift and go to state 19
    set_operations                 shift and go to state 20
    ifStatement                    shift and go to state 21
    while_statement                shift and go to state 22
    unless_expression              shift and go to state 23
    var                            shift and go to state 24
    variable_declaration           shift and go to state 27
    store_conditional_result       shift and go to state 28
    declare_data_structures        shift and go to state 29
    array_explicito                shift and go to state 30
    array_implicito                shift and go to state 31
    array_creation                 shift and go to state 32
    newArray                       shift and go to state 33

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> puts .

    $end            reduce using rule 1 (codigo -> puts .)
    ELSE            reduce using rule 1 (codigo -> puts .)


state 3

    (2) codigo -> gets .

    $end            reduce using rule 2 (codigo -> gets .)
    ELSE            reduce using rule 2 (codigo -> gets .)


state 4

    (3) codigo -> estructurasDatos .

    $end            reduce using rule 3 (codigo -> estructurasDatos .)
    ELSE            reduce using rule 3 (codigo -> estructurasDatos .)


state 5

    (4) codigo -> estructurasControl .

    $end            reduce using rule 4 (codigo -> estructurasControl .)
    ELSE            reduce using rule 4 (codigo -> estructurasControl .)


state 6

    (5) codigo -> method_call .
    (134) block_assignment -> method_call . block_expression
    (130) block_expression -> . LBRACE expresion RBRACE
    (131) block_expression -> . DO expresion END
    (132) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (133) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    $end            reduce using rule 5 (codigo -> method_call .)
    ELSE            reduce using rule 5 (codigo -> method_call .)
    LBRACE          shift and go to state 46
    DO              shift and go to state 47

    block_expression               shift and go to state 45

state 7

    (6) codigo -> block_assignment .

    $end            reduce using rule 6 (codigo -> block_assignment .)
    ELSE            reduce using rule 6 (codigo -> block_assignment .)


state 8

    (7) codigo -> proc_assignment .

    $end            reduce using rule 7 (codigo -> proc_assignment .)
    ELSE            reduce using rule 7 (codigo -> proc_assignment .)


state 9

    (8) codigo -> proc_call .

    $end            reduce using rule 8 (codigo -> proc_call .)
    ELSE            reduce using rule 8 (codigo -> proc_call .)


state 10

    (9) codigo -> declaraciones .

    $end            reduce using rule 9 (codigo -> declaraciones .)
    ELSE            reduce using rule 9 (codigo -> declaraciones .)


state 11

    (40) puts -> PUT . values
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 48
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 12

    (37) gets -> GETS . DOT CHOMP DOT TO_F
    (38) gets -> GETS . DOT CHOMP DOT TO_I
    (39) gets -> GETS . DOT CHOMP

    DOT             shift and go to state 58


state 13

    (10) estructurasDatos -> array .
    (78) declare_data_structures -> array .

  ! reduce/reduce conflict for $end resolved using rule 10 (estructurasDatos -> array .)
  ! reduce/reduce conflict for ELSE resolved using rule 10 (estructurasDatos -> array .)
    $end            reduce using rule 10 (estructurasDatos -> array .)
    ELSE            reduce using rule 10 (estructurasDatos -> array .)

  ! $end            [ reduce using rule 78 (declare_data_structures -> array .) ]
  ! ELSE            [ reduce using rule 78 (declare_data_structures -> array .) ]


state 14

    (11) estructurasDatos -> var_arreglo .
    (55) acceder_arreglo -> var_arreglo . LEFT_COR INTEGER RIGHT_COR

    $end            reduce using rule 11 (estructurasDatos -> var_arreglo .)
    ELSE            reduce using rule 11 (estructurasDatos -> var_arreglo .)
    LEFT_COR        shift and go to state 59


state 15

    (12) estructurasDatos -> acceder_arreglo .

    $end            reduce using rule 12 (estructurasDatos -> acceder_arreglo .)
    ELSE            reduce using rule 12 (estructurasDatos -> acceder_arreglo .)


state 16

    (13) estructurasDatos -> hash_declaration .
    (79) declare_data_structures -> hash_declaration .

  ! reduce/reduce conflict for $end resolved using rule 13 (estructurasDatos -> hash_declaration .)
  ! reduce/reduce conflict for ELSE resolved using rule 13 (estructurasDatos -> hash_declaration .)
    $end            reduce using rule 13 (estructurasDatos -> hash_declaration .)
    ELSE            reduce using rule 13 (estructurasDatos -> hash_declaration .)

  ! $end            [ reduce using rule 79 (declare_data_structures -> hash_declaration .) ]
  ! ELSE            [ reduce using rule 79 (declare_data_structures -> hash_declaration .) ]


state 17

    (14) estructurasDatos -> hash_access .
    (74) hash_operations -> hash_access . ASSIGN value

    $end            reduce using rule 14 (estructurasDatos -> hash_access .)
    ELSE            reduce using rule 14 (estructurasDatos -> hash_access .)
    ASSIGN          shift and go to state 60


state 18

    (15) estructurasDatos -> hash_operations .

    $end            reduce using rule 15 (estructurasDatos -> hash_operations .)
    ELSE            reduce using rule 15 (estructurasDatos -> hash_operations .)


state 19

    (16) estructurasDatos -> set_expression .
    (111) set_operations -> set_expression .

  ! reduce/reduce conflict for $end resolved using rule 16 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for ELSE resolved using rule 16 (estructurasDatos -> set_expression .)
    $end            reduce using rule 16 (estructurasDatos -> set_expression .)
    ELSE            reduce using rule 16 (estructurasDatos -> set_expression .)
    PLUS            reduce using rule 111 (set_operations -> set_expression .)
    MINUS           reduce using rule 111 (set_operations -> set_expression .)
    AMPERSAND       reduce using rule 111 (set_operations -> set_expression .)
    PIPE            reduce using rule 111 (set_operations -> set_expression .)
    CARET           reduce using rule 111 (set_operations -> set_expression .)

  ! $end            [ reduce using rule 111 (set_operations -> set_expression .) ]
  ! ELSE            [ reduce using rule 111 (set_operations -> set_expression .) ]


state 20

    (17) estructurasDatos -> set_operations .
    (112) set_operations -> set_operations . set_binary_operators set_expression
    (114) set_binary_operators -> . PLUS
    (115) set_binary_operators -> . MINUS
    (116) set_binary_operators -> . AMPERSAND
    (117) set_binary_operators -> . PIPE
    (118) set_binary_operators -> . CARET

    $end            reduce using rule 17 (estructurasDatos -> set_operations .)
    ELSE            reduce using rule 17 (estructurasDatos -> set_operations .)
    PLUS            shift and go to state 62
    MINUS           shift and go to state 63
    AMPERSAND       shift and go to state 64
    PIPE            shift and go to state 65
    CARET           shift and go to state 66

    set_binary_operators           shift and go to state 61

state 21

    (18) estructurasControl -> ifStatement .

    $end            reduce using rule 18 (estructurasControl -> ifStatement .)
    ELSE            reduce using rule 18 (estructurasControl -> ifStatement .)


state 22

    (19) estructurasControl -> while_statement .

    $end            reduce using rule 19 (estructurasControl -> while_statement .)
    ELSE            reduce using rule 19 (estructurasControl -> while_statement .)


state 23

    (20) estructurasControl -> unless_expression .

    $end            reduce using rule 20 (estructurasControl -> unless_expression .)
    ELSE            reduce using rule 20 (estructurasControl -> unless_expression .)


state 24

    (82) method_call -> var . LEFTPAR values RIGHTPAR
    (83) method_call -> var . LEFTPAR RIGHTPAR
    (53) var_arreglo -> var .
    (54) var_arreglo -> var . ASSIGN array
    (73) hash_access -> var . LEFT_COR value RIGHT_COR
    (75) variable_declaration -> var . ASSIGN value
    (76) store_conditional_result -> var . ASSIGN ifStatement

  ! shift/reduce conflict for LEFT_COR resolved as shift
    LEFTPAR         shift and go to state 67
    $end            reduce using rule 53 (var_arreglo -> var .)
    ELSE            reduce using rule 53 (var_arreglo -> var .)
    ASSIGN          shift and go to state 68
    LEFT_COR        shift and go to state 69

  ! LEFT_COR        [ reduce using rule 53 (var_arreglo -> var .) ]


state 25

    (136) proc_assignment -> LOCAL_VAR . ASSIGN proc_expression
    (137) proc_call -> LOCAL_VAR . DOT CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> LOCAL_VAR . DOT LEFTPAR values RIGHTPAR
    (139) proc_call -> LOCAL_VAR . LEFT_COR values RIGHT_COR
    (30) var -> LOCAL_VAR .
    (113) declare_data_structures -> LOCAL_VAR . ASSIGN set_expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LEFT_COR resolved as shift
    ASSIGN          shift and go to state 70
    DOT             shift and go to state 71
    LEFT_COR        shift and go to state 72
    LEFTPAR         reduce using rule 30 (var -> LOCAL_VAR .)
    $end            reduce using rule 30 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 30 (var -> LOCAL_VAR .)

  ! ASSIGN          [ reduce using rule 30 (var -> LOCAL_VAR .) ]
  ! LEFT_COR        [ reduce using rule 30 (var -> LOCAL_VAR .) ]


state 26

    (45) array_explicito -> LEFT_COR . values RIGHT_COR
    (46) array_explicito -> LEFT_COR . RIGHT_COR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    RIGHT_COR       shift and go to state 74
    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 73
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 27

    (103) declaraciones -> variable_declaration .
    (77) declare_data_structures -> variable_declaration .

  ! reduce/reduce conflict for $end resolved using rule 77 (declare_data_structures -> variable_declaration .)
  ! reduce/reduce conflict for ELSE resolved using rule 77 (declare_data_structures -> variable_declaration .)
    $end            reduce using rule 77 (declare_data_structures -> variable_declaration .)
    ELSE            reduce using rule 77 (declare_data_structures -> variable_declaration .)

  ! $end            [ reduce using rule 103 (declaraciones -> variable_declaration .) ]
  ! ELSE            [ reduce using rule 103 (declaraciones -> variable_declaration .) ]


state 28

    (104) declaraciones -> store_conditional_result .

    $end            reduce using rule 104 (declaraciones -> store_conditional_result .)
    ELSE            reduce using rule 104 (declaraciones -> store_conditional_result .)


state 29

    (105) declaraciones -> declare_data_structures .

    $end            reduce using rule 105 (declaraciones -> declare_data_structures .)
    ELSE            reduce using rule 105 (declaraciones -> declare_data_structures .)


state 30

    (41) array -> array_explicito .

    $end            reduce using rule 41 (array -> array_explicito .)
    LEFT_COR        reduce using rule 41 (array -> array_explicito .)
    ELSE            reduce using rule 41 (array -> array_explicito .)


state 31

    (42) array -> array_implicito .

    $end            reduce using rule 42 (array -> array_implicito .)
    LEFT_COR        reduce using rule 42 (array -> array_implicito .)
    ELSE            reduce using rule 42 (array -> array_implicito .)


state 32

    (43) array -> array_creation .

    $end            reduce using rule 43 (array -> array_creation .)
    LEFT_COR        reduce using rule 43 (array -> array_creation .)
    ELSE            reduce using rule 43 (array -> array_creation .)


state 33

    (44) array -> newArray .

    $end            reduce using rule 44 (array -> newArray .)
    LEFT_COR        reduce using rule 44 (array -> newArray .)
    ELSE            reduce using rule 44 (array -> newArray .)


state 34

    (71) hash_declaration -> HASH . LEFT_COR values RIGHT_COR
    (72) hash_declaration -> HASH . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 75


state 35

    (109) set_expression -> SET . DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> SET . LEFT_COR values RIGHT_COR

    DOT             shift and go to state 76
    LEFT_COR        shift and go to state 77


state 36

    (56) ifStatement -> IF . condiciones COLON codigo
    (57) ifStatement -> IF . condiciones COLON codigo else_statement
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    condiciones                    shift and go to state 78
    condicion                      shift and go to state 79
    num                            shift and go to state 80

state 37

    (80) while_statement -> WHILE . condiciones COLON codigo
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    condiciones                    shift and go to state 81
    condicion                      shift and go to state 79
    num                            shift and go to state 80

state 38

    (119) unless_expression -> UNLESS . boolean_expression THEN expresion END
    (120) unless_expression -> UNLESS . boolean_expression THEN expresion ELSE expresion END
    (85) boolean_expression -> . expression GREATER expression
    (86) boolean_expression -> . expression LESS expression
    (87) boolean_expression -> . expression GREATER_EQUAL expression
    (88) boolean_expression -> . expression LESS_EQUAL expression
    (89) boolean_expression -> . expression EQUAL expression
    (90) boolean_expression -> . expression NOT_EQUAL expression
    (91) boolean_expression -> . boolean_value
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (92) boolean_value -> . TRUE
    (93) boolean_value -> . FALSE
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    boolean_expression             shift and go to state 82
    expression                     shift and go to state 83
    boolean_value                  shift and go to state 84
    variable                       shift and go to state 87

state 39

    (31) var -> INSTANCE_VAR .

    LEFTPAR         reduce using rule 31 (var -> INSTANCE_VAR .)
    ASSIGN          reduce using rule 31 (var -> INSTANCE_VAR .)
    LEFT_COR        reduce using rule 31 (var -> INSTANCE_VAR .)
    $end            reduce using rule 31 (var -> INSTANCE_VAR .)
    COMMA           reduce using rule 31 (var -> INSTANCE_VAR .)
    ELSE            reduce using rule 31 (var -> INSTANCE_VAR .)
    RIGHT_COR       reduce using rule 31 (var -> INSTANCE_VAR .)
    RIGHTPAR        reduce using rule 31 (var -> INSTANCE_VAR .)
    SPACE           reduce using rule 31 (var -> INSTANCE_VAR .)
    RBRACE          reduce using rule 31 (var -> INSTANCE_VAR .)
    END             reduce using rule 31 (var -> INSTANCE_VAR .)


state 40

    (32) var -> CLASS_VAR .

    LEFTPAR         reduce using rule 32 (var -> CLASS_VAR .)
    ASSIGN          reduce using rule 32 (var -> CLASS_VAR .)
    LEFT_COR        reduce using rule 32 (var -> CLASS_VAR .)
    $end            reduce using rule 32 (var -> CLASS_VAR .)
    COMMA           reduce using rule 32 (var -> CLASS_VAR .)
    ELSE            reduce using rule 32 (var -> CLASS_VAR .)
    RIGHT_COR       reduce using rule 32 (var -> CLASS_VAR .)
    RIGHTPAR        reduce using rule 32 (var -> CLASS_VAR .)
    SPACE           reduce using rule 32 (var -> CLASS_VAR .)
    RBRACE          reduce using rule 32 (var -> CLASS_VAR .)
    END             reduce using rule 32 (var -> CLASS_VAR .)


state 41

    (33) var -> GLOBAL_VAR .

    LEFTPAR         reduce using rule 33 (var -> GLOBAL_VAR .)
    ASSIGN          reduce using rule 33 (var -> GLOBAL_VAR .)
    LEFT_COR        reduce using rule 33 (var -> GLOBAL_VAR .)
    $end            reduce using rule 33 (var -> GLOBAL_VAR .)
    COMMA           reduce using rule 33 (var -> GLOBAL_VAR .)
    ELSE            reduce using rule 33 (var -> GLOBAL_VAR .)
    RIGHT_COR       reduce using rule 33 (var -> GLOBAL_VAR .)
    RIGHTPAR        reduce using rule 33 (var -> GLOBAL_VAR .)
    SPACE           reduce using rule 33 (var -> GLOBAL_VAR .)
    RBRACE          reduce using rule 33 (var -> GLOBAL_VAR .)
    END             reduce using rule 33 (var -> GLOBAL_VAR .)


state 42

    (34) var -> CONSTANT .

    LEFTPAR         reduce using rule 34 (var -> CONSTANT .)
    ASSIGN          reduce using rule 34 (var -> CONSTANT .)
    LEFT_COR        reduce using rule 34 (var -> CONSTANT .)
    $end            reduce using rule 34 (var -> CONSTANT .)
    COMMA           reduce using rule 34 (var -> CONSTANT .)
    ELSE            reduce using rule 34 (var -> CONSTANT .)
    RIGHT_COR       reduce using rule 34 (var -> CONSTANT .)
    RIGHTPAR        reduce using rule 34 (var -> CONSTANT .)
    SPACE           reduce using rule 34 (var -> CONSTANT .)
    RBRACE          reduce using rule 34 (var -> CONSTANT .)
    END             reduce using rule 34 (var -> CONSTANT .)


state 43

    (47) array_implicito -> PERCENTW . LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> PERCENTW . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 96


state 44

    (49) array_creation -> ARRAY . LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> ARRAY . DOT NEW
    (51) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFTPAR         shift and go to state 97
    DOT             shift and go to state 98


state 45

    (134) block_assignment -> method_call block_expression .

    $end            reduce using rule 134 (block_assignment -> method_call block_expression .)
    ELSE            reduce using rule 134 (block_assignment -> method_call block_expression .)


state 46

    (130) block_expression -> LBRACE . expresion RBRACE
    (132) block_expression -> LBRACE . PIPE LOCAL_VAR PIPE expresion RBRACE
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PIPE            shift and go to state 100
    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 99
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 47

    (131) block_expression -> DO . expresion END
    (133) block_expression -> DO . PIPE LOCAL_VAR PIPE expresion END
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PIPE            shift and go to state 110
    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 109
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 48

    (40) puts -> PUT values .

    $end            reduce using rule 40 (puts -> PUT values .)
    RBRACE          reduce using rule 40 (puts -> PUT values .)
    END             reduce using rule 40 (puts -> PUT values .)
    ELSE            reduce using rule 40 (puts -> PUT values .)


state 49

    (28) values -> value .
    (29) values -> value . COMMA values

    $end            reduce using rule 28 (values -> value .)
    ELSE            reduce using rule 28 (values -> value .)
    RIGHT_COR       reduce using rule 28 (values -> value .)
    RIGHTPAR        reduce using rule 28 (values -> value .)
    RBRACE          reduce using rule 28 (values -> value .)
    END             reduce using rule 28 (values -> value .)
    COMMA           shift and go to state 111


state 50

    (21) value -> var .

    COMMA           reduce using rule 21 (value -> var .)
    $end            reduce using rule 21 (value -> var .)
    ELSE            reduce using rule 21 (value -> var .)
    RIGHT_COR       reduce using rule 21 (value -> var .)
    RIGHTPAR        reduce using rule 21 (value -> var .)
    SPACE           reduce using rule 21 (value -> var .)
    RBRACE          reduce using rule 21 (value -> var .)
    END             reduce using rule 21 (value -> var .)


state 51

    (22) value -> num .

    COMMA           reduce using rule 22 (value -> num .)
    $end            reduce using rule 22 (value -> num .)
    ELSE            reduce using rule 22 (value -> num .)
    RIGHT_COR       reduce using rule 22 (value -> num .)
    RIGHTPAR        reduce using rule 22 (value -> num .)
    SPACE           reduce using rule 22 (value -> num .)
    RBRACE          reduce using rule 22 (value -> num .)
    END             reduce using rule 22 (value -> num .)


state 52

    (23) value -> STRING .

    COMMA           reduce using rule 23 (value -> STRING .)
    $end            reduce using rule 23 (value -> STRING .)
    ELSE            reduce using rule 23 (value -> STRING .)
    RIGHT_COR       reduce using rule 23 (value -> STRING .)
    RIGHTPAR        reduce using rule 23 (value -> STRING .)
    SPACE           reduce using rule 23 (value -> STRING .)
    RBRACE          reduce using rule 23 (value -> STRING .)
    END             reduce using rule 23 (value -> STRING .)


state 53

    (24) value -> NIL .

    COMMA           reduce using rule 24 (value -> NIL .)
    $end            reduce using rule 24 (value -> NIL .)
    ELSE            reduce using rule 24 (value -> NIL .)
    RIGHT_COR       reduce using rule 24 (value -> NIL .)
    RIGHTPAR        reduce using rule 24 (value -> NIL .)
    SPACE           reduce using rule 24 (value -> NIL .)
    RBRACE          reduce using rule 24 (value -> NIL .)
    END             reduce using rule 24 (value -> NIL .)


state 54

    (25) value -> SYMBOL .

    COMMA           reduce using rule 25 (value -> SYMBOL .)
    $end            reduce using rule 25 (value -> SYMBOL .)
    ELSE            reduce using rule 25 (value -> SYMBOL .)
    RIGHT_COR       reduce using rule 25 (value -> SYMBOL .)
    RIGHTPAR        reduce using rule 25 (value -> SYMBOL .)
    SPACE           reduce using rule 25 (value -> SYMBOL .)
    RBRACE          reduce using rule 25 (value -> SYMBOL .)
    END             reduce using rule 25 (value -> SYMBOL .)


state 55

    (30) var -> LOCAL_VAR .

    COMMA           reduce using rule 30 (var -> LOCAL_VAR .)
    $end            reduce using rule 30 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 30 (var -> LOCAL_VAR .)
    RIGHT_COR       reduce using rule 30 (var -> LOCAL_VAR .)
    RIGHTPAR        reduce using rule 30 (var -> LOCAL_VAR .)
    SPACE           reduce using rule 30 (var -> LOCAL_VAR .)
    RBRACE          reduce using rule 30 (var -> LOCAL_VAR .)
    END             reduce using rule 30 (var -> LOCAL_VAR .)


state 56

    (35) num -> FLOAT .

    COMMA           reduce using rule 35 (num -> FLOAT .)
    $end            reduce using rule 35 (num -> FLOAT .)
    ELSE            reduce using rule 35 (num -> FLOAT .)
    RIGHT_COR       reduce using rule 35 (num -> FLOAT .)
    GREATER         reduce using rule 35 (num -> FLOAT .)
    LESS            reduce using rule 35 (num -> FLOAT .)
    GREATER_EQUAL   reduce using rule 35 (num -> FLOAT .)
    LESS_EQUAL      reduce using rule 35 (num -> FLOAT .)
    EQUAL           reduce using rule 35 (num -> FLOAT .)
    NOT_EQUAL       reduce using rule 35 (num -> FLOAT .)
    COMPARE         reduce using rule 35 (num -> FLOAT .)
    PLUS            reduce using rule 35 (num -> FLOAT .)
    MINUS           reduce using rule 35 (num -> FLOAT .)
    MULTIPLY        reduce using rule 35 (num -> FLOAT .)
    DIVIDE          reduce using rule 35 (num -> FLOAT .)
    MODULO          reduce using rule 35 (num -> FLOAT .)
    EXPONENT        reduce using rule 35 (num -> FLOAT .)
    RBRACE          reduce using rule 35 (num -> FLOAT .)
    END             reduce using rule 35 (num -> FLOAT .)
    RIGHTPAR        reduce using rule 35 (num -> FLOAT .)
    SPACE           reduce using rule 35 (num -> FLOAT .)
    COLON           reduce using rule 35 (num -> FLOAT .)
    AND             reduce using rule 35 (num -> FLOAT .)
    OR              reduce using rule 35 (num -> FLOAT .)


state 57

    (36) num -> INTEGER .

    COMMA           reduce using rule 36 (num -> INTEGER .)
    $end            reduce using rule 36 (num -> INTEGER .)
    ELSE            reduce using rule 36 (num -> INTEGER .)
    RIGHT_COR       reduce using rule 36 (num -> INTEGER .)
    GREATER         reduce using rule 36 (num -> INTEGER .)
    LESS            reduce using rule 36 (num -> INTEGER .)
    GREATER_EQUAL   reduce using rule 36 (num -> INTEGER .)
    LESS_EQUAL      reduce using rule 36 (num -> INTEGER .)
    EQUAL           reduce using rule 36 (num -> INTEGER .)
    NOT_EQUAL       reduce using rule 36 (num -> INTEGER .)
    COMPARE         reduce using rule 36 (num -> INTEGER .)
    PLUS            reduce using rule 36 (num -> INTEGER .)
    MINUS           reduce using rule 36 (num -> INTEGER .)
    MULTIPLY        reduce using rule 36 (num -> INTEGER .)
    DIVIDE          reduce using rule 36 (num -> INTEGER .)
    MODULO          reduce using rule 36 (num -> INTEGER .)
    EXPONENT        reduce using rule 36 (num -> INTEGER .)
    RBRACE          reduce using rule 36 (num -> INTEGER .)
    END             reduce using rule 36 (num -> INTEGER .)
    RIGHTPAR        reduce using rule 36 (num -> INTEGER .)
    SPACE           reduce using rule 36 (num -> INTEGER .)
    COLON           reduce using rule 36 (num -> INTEGER .)
    AND             reduce using rule 36 (num -> INTEGER .)
    OR              reduce using rule 36 (num -> INTEGER .)


state 58

    (37) gets -> GETS DOT . CHOMP DOT TO_F
    (38) gets -> GETS DOT . CHOMP DOT TO_I
    (39) gets -> GETS DOT . CHOMP

    CHOMP           shift and go to state 112


state 59

    (55) acceder_arreglo -> var_arreglo LEFT_COR . INTEGER RIGHT_COR

    INTEGER         shift and go to state 113


state 60

    (74) hash_operations -> hash_access ASSIGN . value
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    value                          shift and go to state 114
    var                            shift and go to state 50
    num                            shift and go to state 51

state 61

    (112) set_operations -> set_operations set_binary_operators . set_expression
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR

    SET             shift and go to state 35

    set_expression                 shift and go to state 115

state 62

    (114) set_binary_operators -> PLUS .

    SET             reduce using rule 114 (set_binary_operators -> PLUS .)


state 63

    (115) set_binary_operators -> MINUS .

    SET             reduce using rule 115 (set_binary_operators -> MINUS .)


state 64

    (116) set_binary_operators -> AMPERSAND .

    SET             reduce using rule 116 (set_binary_operators -> AMPERSAND .)


state 65

    (117) set_binary_operators -> PIPE .

    SET             reduce using rule 117 (set_binary_operators -> PIPE .)


state 66

    (118) set_binary_operators -> CARET .

    SET             reduce using rule 118 (set_binary_operators -> CARET .)


state 67

    (82) method_call -> var LEFTPAR . values RIGHTPAR
    (83) method_call -> var LEFTPAR . RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    RIGHTPAR        shift and go to state 117
    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    var                            shift and go to state 50
    values                         shift and go to state 116
    value                          shift and go to state 49
    num                            shift and go to state 51

state 68

    (54) var_arreglo -> var ASSIGN . array
    (75) variable_declaration -> var ASSIGN . value
    (76) store_conditional_result -> var ASSIGN . ifStatement
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (56) ifStatement -> . IF condiciones COLON codigo
    (57) ifStatement -> . IF condiciones COLON codigo else_statement
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR
    (47) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (49) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> . ARRAY DOT NEW
    (51) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    IF              shift and go to state 36
    LEFT_COR        shift and go to state 26
    PERCENTW        shift and go to state 43
    ARRAY           shift and go to state 44
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    var                            shift and go to state 50
    array                          shift and go to state 118
    value                          shift and go to state 119
    ifStatement                    shift and go to state 120
    array_explicito                shift and go to state 30
    array_implicito                shift and go to state 31
    array_creation                 shift and go to state 32
    newArray                       shift and go to state 33
    num                            shift and go to state 51

state 69

    (73) hash_access -> var LEFT_COR . value RIGHT_COR
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    var                            shift and go to state 50
    value                          shift and go to state 121
    num                            shift and go to state 51

state 70

    (136) proc_assignment -> LOCAL_VAR ASSIGN . proc_expression
    (113) declare_data_structures -> LOCAL_VAR ASSIGN . set_expression
    (135) proc_expression -> . PROC DOT NEW block_expression
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR

    PROC            shift and go to state 124
    SET             shift and go to state 35

    proc_expression                shift and go to state 122
    set_expression                 shift and go to state 123

state 71

    (137) proc_call -> LOCAL_VAR DOT . CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> LOCAL_VAR DOT . LEFTPAR values RIGHTPAR

    CALL            shift and go to state 125
    LEFTPAR         shift and go to state 126


state 72

    (139) proc_call -> LOCAL_VAR LEFT_COR . values RIGHT_COR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 127
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 73

    (45) array_explicito -> LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 128


state 74

    (46) array_explicito -> LEFT_COR RIGHT_COR .

    $end            reduce using rule 46 (array_explicito -> LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 46 (array_explicito -> LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 46 (array_explicito -> LEFT_COR RIGHT_COR .)
    RIGHTPAR        reduce using rule 46 (array_explicito -> LEFT_COR RIGHT_COR .)


state 75

    (71) hash_declaration -> HASH LEFT_COR . values RIGHT_COR
    (72) hash_declaration -> HASH LEFT_COR . RIGHT_COR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    RIGHT_COR       shift and go to state 130
    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 129
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 76

    (109) set_expression -> SET DOT . NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    NEW             shift and go to state 131


state 77

    (110) set_expression -> SET LEFT_COR . values RIGHT_COR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 132
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 78

    (56) ifStatement -> IF condiciones . COLON codigo
    (57) ifStatement -> IF condiciones . COLON codigo else_statement
    (59) condiciones -> condiciones . conectores condiciones
    (60) conectores -> . AND
    (61) conectores -> . OR

    COLON           shift and go to state 133
    AND             shift and go to state 135
    OR              shift and go to state 136

    conectores                     shift and go to state 134

state 79

    (58) condiciones -> condicion .

    COLON           reduce using rule 58 (condiciones -> condicion .)
    AND             reduce using rule 58 (condiciones -> condicion .)
    OR              reduce using rule 58 (condiciones -> condicion .)
    RBRACE          reduce using rule 58 (condiciones -> condicion .)
    END             reduce using rule 58 (condiciones -> condicion .)
    ELSE            reduce using rule 58 (condiciones -> condicion .)


state 80

    (62) condicion -> num . operComp num
    (63) operComp -> . GREATER
    (64) operComp -> . LESS
    (65) operComp -> . GREATER_EQUAL
    (66) operComp -> . LESS_EQUAL
    (67) operComp -> . EQUAL
    (68) operComp -> . NOT_EQUAL
    (69) operComp -> . COMPARE

    GREATER         shift and go to state 138
    LESS            shift and go to state 139
    GREATER_EQUAL   shift and go to state 140
    LESS_EQUAL      shift and go to state 141
    EQUAL           shift and go to state 142
    NOT_EQUAL       shift and go to state 143
    COMPARE         shift and go to state 144

    operComp                       shift and go to state 137

state 81

    (80) while_statement -> WHILE condiciones . COLON codigo
    (59) condiciones -> condiciones . conectores condiciones
    (60) conectores -> . AND
    (61) conectores -> . OR

    COLON           shift and go to state 145
    AND             shift and go to state 135
    OR              shift and go to state 136

    conectores                     shift and go to state 134

state 82

    (119) unless_expression -> UNLESS boolean_expression . THEN expresion END
    (120) unless_expression -> UNLESS boolean_expression . THEN expresion ELSE expresion END

    THEN            shift and go to state 146


state 83

    (85) boolean_expression -> expression . GREATER expression
    (86) boolean_expression -> expression . LESS expression
    (87) boolean_expression -> expression . GREATER_EQUAL expression
    (88) boolean_expression -> expression . LESS_EQUAL expression
    (89) boolean_expression -> expression . EQUAL expression
    (90) boolean_expression -> expression . NOT_EQUAL expression

    GREATER         shift and go to state 147
    LESS            shift and go to state 148
    GREATER_EQUAL   shift and go to state 149
    LESS_EQUAL      shift and go to state 150
    EQUAL           shift and go to state 151
    NOT_EQUAL       shift and go to state 152


state 84

    (91) boolean_expression -> boolean_value .

    THEN            reduce using rule 91 (boolean_expression -> boolean_value .)


state 85

    (94) expression -> INTEGER .

    GREATER         reduce using rule 94 (expression -> INTEGER .)
    LESS            reduce using rule 94 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 94 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 94 (expression -> INTEGER .)
    EQUAL           reduce using rule 94 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 94 (expression -> INTEGER .)
    THEN            reduce using rule 94 (expression -> INTEGER .)


state 86

    (95) expression -> FLOAT .

    GREATER         reduce using rule 95 (expression -> FLOAT .)
    LESS            reduce using rule 95 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 95 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 95 (expression -> FLOAT .)
    EQUAL           reduce using rule 95 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 95 (expression -> FLOAT .)
    THEN            reduce using rule 95 (expression -> FLOAT .)


state 87

    (96) expression -> variable .

    GREATER         reduce using rule 96 (expression -> variable .)
    LESS            reduce using rule 96 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 96 (expression -> variable .)
    LESS_EQUAL      reduce using rule 96 (expression -> variable .)
    EQUAL           reduce using rule 96 (expression -> variable .)
    NOT_EQUAL       reduce using rule 96 (expression -> variable .)
    THEN            reduce using rule 96 (expression -> variable .)


state 88

    (97) expression -> STRING .

    GREATER         reduce using rule 97 (expression -> STRING .)
    LESS            reduce using rule 97 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 97 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 97 (expression -> STRING .)
    EQUAL           reduce using rule 97 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 97 (expression -> STRING .)
    THEN            reduce using rule 97 (expression -> STRING .)


state 89

    (92) boolean_value -> TRUE .

    THEN            reduce using rule 92 (boolean_value -> TRUE .)


state 90

    (93) boolean_value -> FALSE .

    THEN            reduce using rule 93 (boolean_value -> FALSE .)


state 91

    (98) variable -> LOCAL_VAR .

    GREATER         reduce using rule 98 (variable -> LOCAL_VAR .)
    LESS            reduce using rule 98 (variable -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 98 (variable -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 98 (variable -> LOCAL_VAR .)
    EQUAL           reduce using rule 98 (variable -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 98 (variable -> LOCAL_VAR .)
    THEN            reduce using rule 98 (variable -> LOCAL_VAR .)


state 92

    (99) variable -> INSTANCE_VAR .

    GREATER         reduce using rule 99 (variable -> INSTANCE_VAR .)
    LESS            reduce using rule 99 (variable -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 99 (variable -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 99 (variable -> INSTANCE_VAR .)
    EQUAL           reduce using rule 99 (variable -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 99 (variable -> INSTANCE_VAR .)
    THEN            reduce using rule 99 (variable -> INSTANCE_VAR .)


state 93

    (100) variable -> CLASS_VAR .

    GREATER         reduce using rule 100 (variable -> CLASS_VAR .)
    LESS            reduce using rule 100 (variable -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 100 (variable -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 100 (variable -> CLASS_VAR .)
    EQUAL           reduce using rule 100 (variable -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 100 (variable -> CLASS_VAR .)
    THEN            reduce using rule 100 (variable -> CLASS_VAR .)


state 94

    (101) variable -> GLOBAL_VAR .

    GREATER         reduce using rule 101 (variable -> GLOBAL_VAR .)
    LESS            reduce using rule 101 (variable -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 101 (variable -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 101 (variable -> GLOBAL_VAR .)
    EQUAL           reduce using rule 101 (variable -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 101 (variable -> GLOBAL_VAR .)
    THEN            reduce using rule 101 (variable -> GLOBAL_VAR .)


state 95

    (102) variable -> CONSTANT .

    GREATER         reduce using rule 102 (variable -> CONSTANT .)
    LESS            reduce using rule 102 (variable -> CONSTANT .)
    GREATER_EQUAL   reduce using rule 102 (variable -> CONSTANT .)
    LESS_EQUAL      reduce using rule 102 (variable -> CONSTANT .)
    EQUAL           reduce using rule 102 (variable -> CONSTANT .)
    NOT_EQUAL       reduce using rule 102 (variable -> CONSTANT .)
    THEN            reduce using rule 102 (variable -> CONSTANT .)


state 96

    (47) array_implicito -> PERCENTW LEFT_COR . values_space RIGHT_COR
    (48) array_implicito -> PERCENTW LEFT_COR . RIGHT_COR
    (26) values_space -> . value SPACE values_space
    (27) values_space -> . value
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    RIGHT_COR       shift and go to state 154
    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values_space                   shift and go to state 153
    value                          shift and go to state 155
    var                            shift and go to state 50
    num                            shift and go to state 51

state 97

    (49) array_creation -> ARRAY LEFTPAR . array_explicito RIGHTPAR
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 26

    array_explicito                shift and go to state 156

state 98

    (50) newArray -> ARRAY DOT . NEW
    (51) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    NEW             shift and go to state 157


state 99

    (130) block_expression -> LBRACE expresion . RBRACE

    RBRACE          shift and go to state 158


state 100

    (132) block_expression -> LBRACE PIPE . LOCAL_VAR PIPE expresion RBRACE

    LOCAL_VAR       shift and go to state 159


state 101

    (106) expresion -> puts .

    RBRACE          reduce using rule 106 (expresion -> puts .)
    END             reduce using rule 106 (expresion -> puts .)
    ELSE            reduce using rule 106 (expresion -> puts .)


state 102

    (107) expresion -> gets .

    RBRACE          reduce using rule 107 (expresion -> gets .)
    END             reduce using rule 107 (expresion -> gets .)
    ELSE            reduce using rule 107 (expresion -> gets .)


state 103

    (108) expresion -> print_statement .

    RBRACE          reduce using rule 108 (expresion -> print_statement .)
    END             reduce using rule 108 (expresion -> print_statement .)
    ELSE            reduce using rule 108 (expresion -> print_statement .)


state 104

    (121) expresion -> arithmetic_production .
    (123) arithmetic_production -> arithmetic_production . arithmetic_operators num
    (124) arithmetic_operators -> . PLUS
    (125) arithmetic_operators -> . MINUS
    (126) arithmetic_operators -> . MULTIPLY
    (127) arithmetic_operators -> . DIVIDE
    (128) arithmetic_operators -> . MODULO
    (129) arithmetic_operators -> . EXPONENT

    RBRACE          reduce using rule 121 (expresion -> arithmetic_production .)
    END             reduce using rule 121 (expresion -> arithmetic_production .)
    ELSE            reduce using rule 121 (expresion -> arithmetic_production .)
    PLUS            shift and go to state 161
    MINUS           shift and go to state 162
    MULTIPLY        shift and go to state 163
    DIVIDE          shift and go to state 164
    MODULO          shift and go to state 165
    EXPONENT        shift and go to state 166

    arithmetic_operators           shift and go to state 160

state 105

    (140) expresion -> condition_with_connectors .

    RBRACE          reduce using rule 140 (expresion -> condition_with_connectors .)
    END             reduce using rule 140 (expresion -> condition_with_connectors .)
    ELSE            reduce using rule 140 (expresion -> condition_with_connectors .)


state 106

    (40) puts -> PUT . values
    (84) print_statement -> PUT . LEFTPAR values RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    LEFTPAR         shift and go to state 167
    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 48
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 107

    (122) arithmetic_production -> num .
    (62) condicion -> num . operComp num
    (63) operComp -> . GREATER
    (64) operComp -> . LESS
    (65) operComp -> . GREATER_EQUAL
    (66) operComp -> . LESS_EQUAL
    (67) operComp -> . EQUAL
    (68) operComp -> . NOT_EQUAL
    (69) operComp -> . COMPARE

    PLUS            reduce using rule 122 (arithmetic_production -> num .)
    MINUS           reduce using rule 122 (arithmetic_production -> num .)
    MULTIPLY        reduce using rule 122 (arithmetic_production -> num .)
    DIVIDE          reduce using rule 122 (arithmetic_production -> num .)
    MODULO          reduce using rule 122 (arithmetic_production -> num .)
    EXPONENT        reduce using rule 122 (arithmetic_production -> num .)
    RBRACE          reduce using rule 122 (arithmetic_production -> num .)
    END             reduce using rule 122 (arithmetic_production -> num .)
    ELSE            reduce using rule 122 (arithmetic_production -> num .)
    GREATER         shift and go to state 138
    LESS            shift and go to state 139
    GREATER_EQUAL   shift and go to state 140
    LESS_EQUAL      shift and go to state 141
    EQUAL           shift and go to state 142
    NOT_EQUAL       shift and go to state 143
    COMPARE         shift and go to state 144

    operComp                       shift and go to state 137

state 108

    (81) condition_with_connectors -> condiciones . conectores condiciones
    (59) condiciones -> condiciones . conectores condiciones
    (60) conectores -> . AND
    (61) conectores -> . OR

    AND             shift and go to state 135
    OR              shift and go to state 136

    conectores                     shift and go to state 168

state 109

    (131) block_expression -> DO expresion . END

    END             shift and go to state 169


state 110

    (133) block_expression -> DO PIPE . LOCAL_VAR PIPE expresion END

    LOCAL_VAR       shift and go to state 170


state 111

    (29) values -> value COMMA . values
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    value                          shift and go to state 49
    values                         shift and go to state 171
    var                            shift and go to state 50
    num                            shift and go to state 51

state 112

    (37) gets -> GETS DOT CHOMP . DOT TO_F
    (38) gets -> GETS DOT CHOMP . DOT TO_I
    (39) gets -> GETS DOT CHOMP .

    DOT             shift and go to state 172
    $end            reduce using rule 39 (gets -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 39 (gets -> GETS DOT CHOMP .)
    END             reduce using rule 39 (gets -> GETS DOT CHOMP .)
    ELSE            reduce using rule 39 (gets -> GETS DOT CHOMP .)


state 113

    (55) acceder_arreglo -> var_arreglo LEFT_COR INTEGER . RIGHT_COR

    RIGHT_COR       shift and go to state 173


state 114

    (74) hash_operations -> hash_access ASSIGN value .

    $end            reduce using rule 74 (hash_operations -> hash_access ASSIGN value .)
    ELSE            reduce using rule 74 (hash_operations -> hash_access ASSIGN value .)


state 115

    (112) set_operations -> set_operations set_binary_operators set_expression .

    PLUS            reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    MINUS           reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    AMPERSAND       reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    PIPE            reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    CARET           reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    $end            reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)
    ELSE            reduce using rule 112 (set_operations -> set_operations set_binary_operators set_expression .)


state 116

    (82) method_call -> var LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 174


state 117

    (83) method_call -> var LEFTPAR RIGHTPAR .

    LBRACE          reduce using rule 83 (method_call -> var LEFTPAR RIGHTPAR .)
    DO              reduce using rule 83 (method_call -> var LEFTPAR RIGHTPAR .)
    $end            reduce using rule 83 (method_call -> var LEFTPAR RIGHTPAR .)
    ELSE            reduce using rule 83 (method_call -> var LEFTPAR RIGHTPAR .)


state 118

    (54) var_arreglo -> var ASSIGN array .

    LEFT_COR        reduce using rule 54 (var_arreglo -> var ASSIGN array .)
    $end            reduce using rule 54 (var_arreglo -> var ASSIGN array .)
    ELSE            reduce using rule 54 (var_arreglo -> var ASSIGN array .)


state 119

    (75) variable_declaration -> var ASSIGN value .

    $end            reduce using rule 75 (variable_declaration -> var ASSIGN value .)
    ELSE            reduce using rule 75 (variable_declaration -> var ASSIGN value .)


state 120

    (76) store_conditional_result -> var ASSIGN ifStatement .

    $end            reduce using rule 76 (store_conditional_result -> var ASSIGN ifStatement .)
    ELSE            reduce using rule 76 (store_conditional_result -> var ASSIGN ifStatement .)


state 121

    (73) hash_access -> var LEFT_COR value . RIGHT_COR

    RIGHT_COR       shift and go to state 175


state 122

    (136) proc_assignment -> LOCAL_VAR ASSIGN proc_expression .

    $end            reduce using rule 136 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    ELSE            reduce using rule 136 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)


state 123

    (113) declare_data_structures -> LOCAL_VAR ASSIGN set_expression .

    $end            reduce using rule 113 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    ELSE            reduce using rule 113 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)


state 124

    (135) proc_expression -> PROC . DOT NEW block_expression

    DOT             shift and go to state 176


state 125

    (137) proc_call -> LOCAL_VAR DOT CALL . LEFTPAR values RIGHTPAR

    LEFTPAR         shift and go to state 177


state 126

    (138) proc_call -> LOCAL_VAR DOT LEFTPAR . values RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 178
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 127

    (139) proc_call -> LOCAL_VAR LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 179


state 128

    (45) array_explicito -> LEFT_COR values RIGHT_COR .

    $end            reduce using rule 45 (array_explicito -> LEFT_COR values RIGHT_COR .)
    LEFT_COR        reduce using rule 45 (array_explicito -> LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 45 (array_explicito -> LEFT_COR values RIGHT_COR .)
    RIGHTPAR        reduce using rule 45 (array_explicito -> LEFT_COR values RIGHT_COR .)


state 129

    (71) hash_declaration -> HASH LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 180


state 130

    (72) hash_declaration -> HASH LEFT_COR RIGHT_COR .

    $end            reduce using rule 72 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 72 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)


state 131

    (109) set_expression -> SET DOT NEW . LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    LEFTPAR         shift and go to state 181


state 132

    (110) set_expression -> SET LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 182


state 133

    (56) ifStatement -> IF condiciones COLON . codigo
    (57) ifStatement -> IF condiciones COLON . codigo else_statement
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (10) estructurasDatos -> . array
    (11) estructurasDatos -> . var_arreglo
    (12) estructurasDatos -> . acceder_arreglo
    (13) estructurasDatos -> . hash_declaration
    (14) estructurasDatos -> . hash_access
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . set_expression
    (17) estructurasDatos -> . set_operations
    (18) estructurasControl -> . ifStatement
    (19) estructurasControl -> . while_statement
    (20) estructurasControl -> . unless_expression
    (82) method_call -> . var LEFTPAR values RIGHTPAR
    (83) method_call -> . var LEFTPAR RIGHTPAR
    (134) block_assignment -> . method_call block_expression
    (136) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (137) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (139) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (103) declaraciones -> . variable_declaration
    (104) declaraciones -> . store_conditional_result
    (105) declaraciones -> . declare_data_structures
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (53) var_arreglo -> . var
    (54) var_arreglo -> . var ASSIGN array
    (55) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (71) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (72) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (73) hash_access -> . var LEFT_COR value RIGHT_COR
    (74) hash_operations -> . hash_access ASSIGN value
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR
    (111) set_operations -> . set_expression
    (112) set_operations -> . set_operations set_binary_operators set_expression
    (56) ifStatement -> . IF condiciones COLON codigo
    (57) ifStatement -> . IF condiciones COLON codigo else_statement
    (80) while_statement -> . WHILE condiciones COLON codigo
    (119) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (120) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (75) variable_declaration -> . var ASSIGN value
    (76) store_conditional_result -> . var ASSIGN ifStatement
    (77) declare_data_structures -> . variable_declaration
    (78) declare_data_structures -> . array
    (79) declare_data_structures -> . hash_declaration
    (113) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR
    (47) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (49) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> . ARRAY DOT NEW
    (51) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 11
    GETS            shift and go to state 12
    LOCAL_VAR       shift and go to state 25
    HASH            shift and go to state 34
    SET             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    UNLESS          shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    LEFT_COR        shift and go to state 26
    PERCENTW        shift and go to state 43
    ARRAY           shift and go to state 44

    codigo                         shift and go to state 183
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    array                          shift and go to state 13
    var_arreglo                    shift and go to state 14
    acceder_arreglo                shift and go to state 15
    hash_declaration               shift and go to state 16
    hash_access                    shift and go to state 17
    hash_operations                shift and go to state 18
    set_expression                 shift and go to state 19
    set_operations                 shift and go to state 20
    ifStatement                    shift and go to state 21
    while_statement                shift and go to state 22
    unless_expression              shift and go to state 23
    var                            shift and go to state 24
    variable_declaration           shift and go to state 27
    store_conditional_result       shift and go to state 28
    declare_data_structures        shift and go to state 29
    array_explicito                shift and go to state 30
    array_implicito                shift and go to state 31
    array_creation                 shift and go to state 32
    newArray                       shift and go to state 33

state 134

    (59) condiciones -> condiciones conectores . condiciones
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    condiciones                    shift and go to state 184
    condicion                      shift and go to state 79
    num                            shift and go to state 80

state 135

    (60) conectores -> AND .

    FLOAT           reduce using rule 60 (conectores -> AND .)
    INTEGER         reduce using rule 60 (conectores -> AND .)


state 136

    (61) conectores -> OR .

    FLOAT           reduce using rule 61 (conectores -> OR .)
    INTEGER         reduce using rule 61 (conectores -> OR .)


state 137

    (62) condicion -> num operComp . num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    num                            shift and go to state 185

state 138

    (63) operComp -> GREATER .

    FLOAT           reduce using rule 63 (operComp -> GREATER .)
    INTEGER         reduce using rule 63 (operComp -> GREATER .)


state 139

    (64) operComp -> LESS .

    FLOAT           reduce using rule 64 (operComp -> LESS .)
    INTEGER         reduce using rule 64 (operComp -> LESS .)


state 140

    (65) operComp -> GREATER_EQUAL .

    FLOAT           reduce using rule 65 (operComp -> GREATER_EQUAL .)
    INTEGER         reduce using rule 65 (operComp -> GREATER_EQUAL .)


state 141

    (66) operComp -> LESS_EQUAL .

    FLOAT           reduce using rule 66 (operComp -> LESS_EQUAL .)
    INTEGER         reduce using rule 66 (operComp -> LESS_EQUAL .)


state 142

    (67) operComp -> EQUAL .

    FLOAT           reduce using rule 67 (operComp -> EQUAL .)
    INTEGER         reduce using rule 67 (operComp -> EQUAL .)


state 143

    (68) operComp -> NOT_EQUAL .

    FLOAT           reduce using rule 68 (operComp -> NOT_EQUAL .)
    INTEGER         reduce using rule 68 (operComp -> NOT_EQUAL .)


state 144

    (69) operComp -> COMPARE .

    FLOAT           reduce using rule 69 (operComp -> COMPARE .)
    INTEGER         reduce using rule 69 (operComp -> COMPARE .)


state 145

    (80) while_statement -> WHILE condiciones COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (10) estructurasDatos -> . array
    (11) estructurasDatos -> . var_arreglo
    (12) estructurasDatos -> . acceder_arreglo
    (13) estructurasDatos -> . hash_declaration
    (14) estructurasDatos -> . hash_access
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . set_expression
    (17) estructurasDatos -> . set_operations
    (18) estructurasControl -> . ifStatement
    (19) estructurasControl -> . while_statement
    (20) estructurasControl -> . unless_expression
    (82) method_call -> . var LEFTPAR values RIGHTPAR
    (83) method_call -> . var LEFTPAR RIGHTPAR
    (134) block_assignment -> . method_call block_expression
    (136) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (137) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (139) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (103) declaraciones -> . variable_declaration
    (104) declaraciones -> . store_conditional_result
    (105) declaraciones -> . declare_data_structures
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (53) var_arreglo -> . var
    (54) var_arreglo -> . var ASSIGN array
    (55) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (71) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (72) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (73) hash_access -> . var LEFT_COR value RIGHT_COR
    (74) hash_operations -> . hash_access ASSIGN value
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR
    (111) set_operations -> . set_expression
    (112) set_operations -> . set_operations set_binary_operators set_expression
    (56) ifStatement -> . IF condiciones COLON codigo
    (57) ifStatement -> . IF condiciones COLON codigo else_statement
    (80) while_statement -> . WHILE condiciones COLON codigo
    (119) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (120) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (75) variable_declaration -> . var ASSIGN value
    (76) store_conditional_result -> . var ASSIGN ifStatement
    (77) declare_data_structures -> . variable_declaration
    (78) declare_data_structures -> . array
    (79) declare_data_structures -> . hash_declaration
    (113) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR
    (47) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (49) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> . ARRAY DOT NEW
    (51) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 11
    GETS            shift and go to state 12
    LOCAL_VAR       shift and go to state 25
    HASH            shift and go to state 34
    SET             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    UNLESS          shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    LEFT_COR        shift and go to state 26
    PERCENTW        shift and go to state 43
    ARRAY           shift and go to state 44

    codigo                         shift and go to state 186
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    array                          shift and go to state 13
    var_arreglo                    shift and go to state 14
    acceder_arreglo                shift and go to state 15
    hash_declaration               shift and go to state 16
    hash_access                    shift and go to state 17
    hash_operations                shift and go to state 18
    set_expression                 shift and go to state 19
    set_operations                 shift and go to state 20
    ifStatement                    shift and go to state 21
    while_statement                shift and go to state 22
    unless_expression              shift and go to state 23
    var                            shift and go to state 24
    variable_declaration           shift and go to state 27
    store_conditional_result       shift and go to state 28
    declare_data_structures        shift and go to state 29
    array_explicito                shift and go to state 30
    array_implicito                shift and go to state 31
    array_creation                 shift and go to state 32
    newArray                       shift and go to state 33

state 146

    (119) unless_expression -> UNLESS boolean_expression THEN . expresion END
    (120) unless_expression -> UNLESS boolean_expression THEN . expresion ELSE expresion END
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 187
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 147

    (85) boolean_expression -> expression GREATER . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 188
    variable                       shift and go to state 87

state 148

    (86) boolean_expression -> expression LESS . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 189
    variable                       shift and go to state 87

state 149

    (87) boolean_expression -> expression GREATER_EQUAL . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 190
    variable                       shift and go to state 87

state 150

    (88) boolean_expression -> expression LESS_EQUAL . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 191
    variable                       shift and go to state 87

state 151

    (89) boolean_expression -> expression EQUAL . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 192
    variable                       shift and go to state 87

state 152

    (90) boolean_expression -> expression NOT_EQUAL . expression
    (94) expression -> . INTEGER
    (95) expression -> . FLOAT
    (96) expression -> . variable
    (97) expression -> . STRING
    (98) variable -> . LOCAL_VAR
    (99) variable -> . INSTANCE_VAR
    (100) variable -> . CLASS_VAR
    (101) variable -> . GLOBAL_VAR
    (102) variable -> . CONSTANT

    INTEGER         shift and go to state 85
    FLOAT           shift and go to state 86
    STRING          shift and go to state 88
    LOCAL_VAR       shift and go to state 91
    INSTANCE_VAR    shift and go to state 92
    CLASS_VAR       shift and go to state 93
    GLOBAL_VAR      shift and go to state 94
    CONSTANT        shift and go to state 95

    expression                     shift and go to state 193
    variable                       shift and go to state 87

state 153

    (47) array_implicito -> PERCENTW LEFT_COR values_space . RIGHT_COR

    RIGHT_COR       shift and go to state 194


state 154

    (48) array_implicito -> PERCENTW LEFT_COR RIGHT_COR .

    $end            reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)


state 155

    (26) values_space -> value . SPACE values_space
    (27) values_space -> value .

    SPACE           shift and go to state 195
    RIGHT_COR       reduce using rule 27 (values_space -> value .)


state 156

    (49) array_creation -> ARRAY LEFTPAR array_explicito . RIGHTPAR

    RIGHTPAR        shift and go to state 196


state 157

    (50) newArray -> ARRAY DOT NEW .
    (51) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER COMMA values RIGHTPAR

    $end            reduce using rule 50 (newArray -> ARRAY DOT NEW .)
    LEFT_COR        reduce using rule 50 (newArray -> ARRAY DOT NEW .)
    ELSE            reduce using rule 50 (newArray -> ARRAY DOT NEW .)
    LEFTPAR         shift and go to state 197


state 158

    (130) block_expression -> LBRACE expresion RBRACE .

    $end            reduce using rule 130 (block_expression -> LBRACE expresion RBRACE .)
    ELSE            reduce using rule 130 (block_expression -> LBRACE expresion RBRACE .)


state 159

    (132) block_expression -> LBRACE PIPE LOCAL_VAR . PIPE expresion RBRACE

    PIPE            shift and go to state 198


state 160

    (123) arithmetic_production -> arithmetic_production arithmetic_operators . num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    num                            shift and go to state 199

state 161

    (124) arithmetic_operators -> PLUS .

    FLOAT           reduce using rule 124 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 124 (arithmetic_operators -> PLUS .)


state 162

    (125) arithmetic_operators -> MINUS .

    FLOAT           reduce using rule 125 (arithmetic_operators -> MINUS .)
    INTEGER         reduce using rule 125 (arithmetic_operators -> MINUS .)


state 163

    (126) arithmetic_operators -> MULTIPLY .

    FLOAT           reduce using rule 126 (arithmetic_operators -> MULTIPLY .)
    INTEGER         reduce using rule 126 (arithmetic_operators -> MULTIPLY .)


state 164

    (127) arithmetic_operators -> DIVIDE .

    FLOAT           reduce using rule 127 (arithmetic_operators -> DIVIDE .)
    INTEGER         reduce using rule 127 (arithmetic_operators -> DIVIDE .)


state 165

    (128) arithmetic_operators -> MODULO .

    FLOAT           reduce using rule 128 (arithmetic_operators -> MODULO .)
    INTEGER         reduce using rule 128 (arithmetic_operators -> MODULO .)


state 166

    (129) arithmetic_operators -> EXPONENT .

    FLOAT           reduce using rule 129 (arithmetic_operators -> EXPONENT .)
    INTEGER         reduce using rule 129 (arithmetic_operators -> EXPONENT .)


state 167

    (84) print_statement -> PUT LEFTPAR . values RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 200
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 168

    (81) condition_with_connectors -> condiciones conectores . condiciones
    (59) condiciones -> condiciones conectores . condiciones
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    condiciones                    shift and go to state 201
    condicion                      shift and go to state 79
    num                            shift and go to state 80

state 169

    (131) block_expression -> DO expresion END .

    $end            reduce using rule 131 (block_expression -> DO expresion END .)
    ELSE            reduce using rule 131 (block_expression -> DO expresion END .)


state 170

    (133) block_expression -> DO PIPE LOCAL_VAR . PIPE expresion END

    PIPE            shift and go to state 202


state 171

    (29) values -> value COMMA values .

    $end            reduce using rule 29 (values -> value COMMA values .)
    ELSE            reduce using rule 29 (values -> value COMMA values .)
    RIGHT_COR       reduce using rule 29 (values -> value COMMA values .)
    RIGHTPAR        reduce using rule 29 (values -> value COMMA values .)
    RBRACE          reduce using rule 29 (values -> value COMMA values .)
    END             reduce using rule 29 (values -> value COMMA values .)


state 172

    (37) gets -> GETS DOT CHOMP DOT . TO_F
    (38) gets -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 203
    TO_I            shift and go to state 204


state 173

    (55) acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .

    $end            reduce using rule 55 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    ELSE            reduce using rule 55 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)


state 174

    (82) method_call -> var LEFTPAR values RIGHTPAR .

    LBRACE          reduce using rule 82 (method_call -> var LEFTPAR values RIGHTPAR .)
    DO              reduce using rule 82 (method_call -> var LEFTPAR values RIGHTPAR .)
    $end            reduce using rule 82 (method_call -> var LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 82 (method_call -> var LEFTPAR values RIGHTPAR .)


state 175

    (73) hash_access -> var LEFT_COR value RIGHT_COR .

    ASSIGN          reduce using rule 73 (hash_access -> var LEFT_COR value RIGHT_COR .)
    $end            reduce using rule 73 (hash_access -> var LEFT_COR value RIGHT_COR .)
    ELSE            reduce using rule 73 (hash_access -> var LEFT_COR value RIGHT_COR .)


state 176

    (135) proc_expression -> PROC DOT . NEW block_expression

    NEW             shift and go to state 205


state 177

    (137) proc_call -> LOCAL_VAR DOT CALL LEFTPAR . values RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 206
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 178

    (138) proc_call -> LOCAL_VAR DOT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 207


state 179

    (139) proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .

    $end            reduce using rule 139 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 139 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)


state 180

    (71) hash_declaration -> HASH LEFT_COR values RIGHT_COR .

    $end            reduce using rule 71 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 71 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)


state 181

    (109) set_expression -> SET DOT NEW LEFTPAR . LEFT_COR values RIGHT_COR RIGHTPAR

    LEFT_COR        shift and go to state 208


state 182

    (110) set_expression -> SET LEFT_COR values RIGHT_COR .

    $end            reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PLUS            reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    MINUS           reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    AMPERSAND       reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PIPE            reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    CARET           reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 110 (set_expression -> SET LEFT_COR values RIGHT_COR .)


state 183

    (56) ifStatement -> IF condiciones COLON codigo .
    (57) ifStatement -> IF condiciones COLON codigo . else_statement
    (70) else_statement -> . ELSE COLON codigo

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 56 (ifStatement -> IF condiciones COLON codigo .)
    ELSE            shift and go to state 210

  ! ELSE            [ reduce using rule 56 (ifStatement -> IF condiciones COLON codigo .) ]

    else_statement                 shift and go to state 209

state 184

    (59) condiciones -> condiciones conectores condiciones .
    (59) condiciones -> condiciones . conectores condiciones
    (60) conectores -> . AND
    (61) conectores -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 59 (condiciones -> condiciones conectores condiciones .)
    RBRACE          reduce using rule 59 (condiciones -> condiciones conectores condiciones .)
    END             reduce using rule 59 (condiciones -> condiciones conectores condiciones .)
    ELSE            reduce using rule 59 (condiciones -> condiciones conectores condiciones .)
    AND             shift and go to state 135
    OR              shift and go to state 136

  ! AND             [ reduce using rule 59 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 59 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 134

state 185

    (62) condicion -> num operComp num .

    COLON           reduce using rule 62 (condicion -> num operComp num .)
    AND             reduce using rule 62 (condicion -> num operComp num .)
    OR              reduce using rule 62 (condicion -> num operComp num .)
    RBRACE          reduce using rule 62 (condicion -> num operComp num .)
    END             reduce using rule 62 (condicion -> num operComp num .)
    ELSE            reduce using rule 62 (condicion -> num operComp num .)


state 186

    (80) while_statement -> WHILE condiciones COLON codigo .

    $end            reduce using rule 80 (while_statement -> WHILE condiciones COLON codigo .)
    ELSE            reduce using rule 80 (while_statement -> WHILE condiciones COLON codigo .)


state 187

    (119) unless_expression -> UNLESS boolean_expression THEN expresion . END
    (120) unless_expression -> UNLESS boolean_expression THEN expresion . ELSE expresion END

    END             shift and go to state 211
    ELSE            shift and go to state 212


state 188

    (85) boolean_expression -> expression GREATER expression .

    THEN            reduce using rule 85 (boolean_expression -> expression GREATER expression .)


state 189

    (86) boolean_expression -> expression LESS expression .

    THEN            reduce using rule 86 (boolean_expression -> expression LESS expression .)


state 190

    (87) boolean_expression -> expression GREATER_EQUAL expression .

    THEN            reduce using rule 87 (boolean_expression -> expression GREATER_EQUAL expression .)


state 191

    (88) boolean_expression -> expression LESS_EQUAL expression .

    THEN            reduce using rule 88 (boolean_expression -> expression LESS_EQUAL expression .)


state 192

    (89) boolean_expression -> expression EQUAL expression .

    THEN            reduce using rule 89 (boolean_expression -> expression EQUAL expression .)


state 193

    (90) boolean_expression -> expression NOT_EQUAL expression .

    THEN            reduce using rule 90 (boolean_expression -> expression NOT_EQUAL expression .)


state 194

    (47) array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .

    $end            reduce using rule 47 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    LEFT_COR        reduce using rule 47 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    ELSE            reduce using rule 47 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)


state 195

    (26) values_space -> value SPACE . values_space
    (26) values_space -> . value SPACE values_space
    (27) values_space -> . value
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    value                          shift and go to state 155
    values_space                   shift and go to state 213
    var                            shift and go to state 50
    num                            shift and go to state 51

state 196

    (49) array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .

    $end            reduce using rule 49 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    LEFT_COR        reduce using rule 49 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    ELSE            reduce using rule 49 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)


state 197

    (51) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER RIGHTPAR
    (52) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER COMMA values RIGHTPAR

    INTEGER         shift and go to state 214


state 198

    (132) block_expression -> LBRACE PIPE LOCAL_VAR PIPE . expresion RBRACE
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 215
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 199

    (123) arithmetic_production -> arithmetic_production arithmetic_operators num .

    PLUS            reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    MINUS           reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    MULTIPLY        reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    DIVIDE          reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    MODULO          reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    EXPONENT        reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    RBRACE          reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    END             reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)
    ELSE            reduce using rule 123 (arithmetic_production -> arithmetic_production arithmetic_operators num .)


state 200

    (84) print_statement -> PUT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 216


state 201

    (81) condition_with_connectors -> condiciones conectores condiciones .
    (59) condiciones -> condiciones conectores condiciones .
    (59) condiciones -> condiciones . conectores condiciones
    (60) conectores -> . AND
    (61) conectores -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACE          reduce using rule 81 (condition_with_connectors -> condiciones conectores condiciones .)
    END             reduce using rule 81 (condition_with_connectors -> condiciones conectores condiciones .)
    ELSE            reduce using rule 81 (condition_with_connectors -> condiciones conectores condiciones .)
    AND             shift and go to state 135
    OR              shift and go to state 136

  ! AND             [ reduce using rule 59 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 59 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 134

state 202

    (133) block_expression -> DO PIPE LOCAL_VAR PIPE . expresion END
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 217
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 203

    (37) gets -> GETS DOT CHOMP DOT TO_F .

    $end            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 37 (gets -> GETS DOT CHOMP DOT TO_F .)


state 204

    (38) gets -> GETS DOT CHOMP DOT TO_I .

    $end            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_I .)


state 205

    (135) proc_expression -> PROC DOT NEW . block_expression
    (130) block_expression -> . LBRACE expresion RBRACE
    (131) block_expression -> . DO expresion END
    (132) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (133) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    LBRACE          shift and go to state 46
    DO              shift and go to state 47

    block_expression               shift and go to state 218

state 206

    (137) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 219


state 207

    (138) proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .

    $end            reduce using rule 138 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 138 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)


state 208

    (109) set_expression -> SET DOT NEW LEFTPAR LEFT_COR . values RIGHT_COR RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 220
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 209

    (57) ifStatement -> IF condiciones COLON codigo else_statement .

    $end            reduce using rule 57 (ifStatement -> IF condiciones COLON codigo else_statement .)
    ELSE            reduce using rule 57 (ifStatement -> IF condiciones COLON codigo else_statement .)


state 210

    (70) else_statement -> ELSE . COLON codigo

    COLON           shift and go to state 221


state 211

    (119) unless_expression -> UNLESS boolean_expression THEN expresion END .

    $end            reduce using rule 119 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    ELSE            reduce using rule 119 (unless_expression -> UNLESS boolean_expression THEN expresion END .)


state 212

    (120) unless_expression -> UNLESS boolean_expression THEN expresion ELSE . expresion END
    (106) expresion -> . puts
    (107) expresion -> . gets
    (108) expresion -> . print_statement
    (121) expresion -> . arithmetic_production
    (140) expresion -> . condition_with_connectors
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (84) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (122) arithmetic_production -> . num
    (123) arithmetic_production -> . arithmetic_production arithmetic_operators num
    (81) condition_with_connectors -> . condiciones conectores condiciones
    (35) num -> . FLOAT
    (36) num -> . INTEGER
    (58) condiciones -> . condicion
    (59) condiciones -> . condiciones conectores condiciones
    (62) condicion -> . num operComp num

    PUT             shift and go to state 106
    GETS            shift and go to state 12
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    expresion                      shift and go to state 222
    puts                           shift and go to state 101
    gets                           shift and go to state 102
    print_statement                shift and go to state 103
    arithmetic_production          shift and go to state 104
    condition_with_connectors      shift and go to state 105
    num                            shift and go to state 107
    condiciones                    shift and go to state 108
    condicion                      shift and go to state 79

state 213

    (26) values_space -> value SPACE values_space .

    RIGHT_COR       reduce using rule 26 (values_space -> value SPACE values_space .)


state 214

    (51) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . RIGHTPAR
    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . COMMA values RIGHTPAR

    RIGHTPAR        shift and go to state 223
    COMMA           shift and go to state 224


state 215

    (132) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion . RBRACE

    RBRACE          shift and go to state 225


state 216

    (84) print_statement -> PUT LEFTPAR values RIGHTPAR .

    RBRACE          reduce using rule 84 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    END             reduce using rule 84 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 84 (print_statement -> PUT LEFTPAR values RIGHTPAR .)


state 217

    (133) block_expression -> DO PIPE LOCAL_VAR PIPE expresion . END

    END             shift and go to state 226


state 218

    (135) proc_expression -> PROC DOT NEW block_expression .

    $end            reduce using rule 135 (proc_expression -> PROC DOT NEW block_expression .)
    ELSE            reduce using rule 135 (proc_expression -> PROC DOT NEW block_expression .)


state 219

    (137) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .

    $end            reduce using rule 137 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 137 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)


state 220

    (109) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values . RIGHT_COR RIGHTPAR

    RIGHT_COR       shift and go to state 227


state 221

    (70) else_statement -> ELSE COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (40) puts -> . PUT values
    (37) gets -> . GETS DOT CHOMP DOT TO_F
    (38) gets -> . GETS DOT CHOMP DOT TO_I
    (39) gets -> . GETS DOT CHOMP
    (10) estructurasDatos -> . array
    (11) estructurasDatos -> . var_arreglo
    (12) estructurasDatos -> . acceder_arreglo
    (13) estructurasDatos -> . hash_declaration
    (14) estructurasDatos -> . hash_access
    (15) estructurasDatos -> . hash_operations
    (16) estructurasDatos -> . set_expression
    (17) estructurasDatos -> . set_operations
    (18) estructurasControl -> . ifStatement
    (19) estructurasControl -> . while_statement
    (20) estructurasControl -> . unless_expression
    (82) method_call -> . var LEFTPAR values RIGHTPAR
    (83) method_call -> . var LEFTPAR RIGHTPAR
    (134) block_assignment -> . method_call block_expression
    (136) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (137) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (138) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (139) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (103) declaraciones -> . variable_declaration
    (104) declaraciones -> . store_conditional_result
    (105) declaraciones -> . declare_data_structures
    (41) array -> . array_explicito
    (42) array -> . array_implicito
    (43) array -> . array_creation
    (44) array -> . newArray
    (53) var_arreglo -> . var
    (54) var_arreglo -> . var ASSIGN array
    (55) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (71) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (72) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (73) hash_access -> . var LEFT_COR value RIGHT_COR
    (74) hash_operations -> . hash_access ASSIGN value
    (109) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (110) set_expression -> . SET LEFT_COR values RIGHT_COR
    (111) set_operations -> . set_expression
    (112) set_operations -> . set_operations set_binary_operators set_expression
    (56) ifStatement -> . IF condiciones COLON codigo
    (57) ifStatement -> . IF condiciones COLON codigo else_statement
    (80) while_statement -> . WHILE condiciones COLON codigo
    (119) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (120) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (75) variable_declaration -> . var ASSIGN value
    (76) store_conditional_result -> . var ASSIGN ifStatement
    (77) declare_data_structures -> . variable_declaration
    (78) declare_data_structures -> . array
    (79) declare_data_structures -> . hash_declaration
    (113) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (45) array_explicito -> . LEFT_COR values RIGHT_COR
    (46) array_explicito -> . LEFT_COR RIGHT_COR
    (47) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (49) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (50) newArray -> . ARRAY DOT NEW
    (51) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 11
    GETS            shift and go to state 12
    LOCAL_VAR       shift and go to state 25
    HASH            shift and go to state 34
    SET             shift and go to state 35
    IF              shift and go to state 36
    WHILE           shift and go to state 37
    UNLESS          shift and go to state 38
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    LEFT_COR        shift and go to state 26
    PERCENTW        shift and go to state 43
    ARRAY           shift and go to state 44

    codigo                         shift and go to state 228
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    array                          shift and go to state 13
    var_arreglo                    shift and go to state 14
    acceder_arreglo                shift and go to state 15
    hash_declaration               shift and go to state 16
    hash_access                    shift and go to state 17
    hash_operations                shift and go to state 18
    set_expression                 shift and go to state 19
    set_operations                 shift and go to state 20
    ifStatement                    shift and go to state 21
    while_statement                shift and go to state 22
    unless_expression              shift and go to state 23
    var                            shift and go to state 24
    variable_declaration           shift and go to state 27
    store_conditional_result       shift and go to state 28
    declare_data_structures        shift and go to state 29
    array_explicito                shift and go to state 30
    array_implicito                shift and go to state 31
    array_creation                 shift and go to state 32
    newArray                       shift and go to state 33

state 222

    (120) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion . END

    END             shift and go to state 229


state 223

    (51) newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .

    $end            reduce using rule 51 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    LEFT_COR        reduce using rule 51 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    ELSE            reduce using rule 51 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)


state 224

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA . values RIGHTPAR
    (28) values -> . value
    (29) values -> . value COMMA values
    (21) value -> . var
    (22) value -> . num
    (23) value -> . STRING
    (24) value -> . NIL
    (25) value -> . SYMBOL
    (30) var -> . LOCAL_VAR
    (31) var -> . INSTANCE_VAR
    (32) var -> . CLASS_VAR
    (33) var -> . GLOBAL_VAR
    (34) var -> . CONSTANT
    (35) num -> . FLOAT
    (36) num -> . INTEGER

    STRING          shift and go to state 52
    NIL             shift and go to state 53
    SYMBOL          shift and go to state 54
    LOCAL_VAR       shift and go to state 55
    INSTANCE_VAR    shift and go to state 39
    CLASS_VAR       shift and go to state 40
    GLOBAL_VAR      shift and go to state 41
    CONSTANT        shift and go to state 42
    FLOAT           shift and go to state 56
    INTEGER         shift and go to state 57

    values                         shift and go to state 230
    value                          shift and go to state 49
    var                            shift and go to state 50
    num                            shift and go to state 51

state 225

    (132) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .

    $end            reduce using rule 132 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    ELSE            reduce using rule 132 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)


state 226

    (133) block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .

    $end            reduce using rule 133 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    ELSE            reduce using rule 133 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)


state 227

    (109) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR . RIGHTPAR

    RIGHTPAR        shift and go to state 231


state 228

    (70) else_statement -> ELSE COLON codigo .

    ELSE            reduce using rule 70 (else_statement -> ELSE COLON codigo .)
    $end            reduce using rule 70 (else_statement -> ELSE COLON codigo .)


state 229

    (120) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .

    $end            reduce using rule 120 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    ELSE            reduce using rule 120 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)


state 230

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values . RIGHTPAR

    RIGHTPAR        shift and go to state 232


state 231

    (109) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .

    $end            reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PLUS            reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    MINUS           reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    AMPERSAND       reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PIPE            reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    CARET           reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    ELSE            reduce using rule 109 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)


state 232

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .

    $end            reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    LEFT_COR        reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    ELSE            reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_COR in state 24 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 25 resolved as shift
WARNING: shift/reduce conflict for LEFT_COR in state 25 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 183 resolved as shift
WARNING: shift/reduce conflict for AND in state 184 resolved as shift
WARNING: shift/reduce conflict for OR in state 184 resolved as shift
WARNING: shift/reduce conflict for AND in state 201 resolved as shift
WARNING: shift/reduce conflict for OR in state 201 resolved as shift
WARNING: reduce/reduce conflict in state 13 resolved using rule (estructurasDatos -> array)
WARNING: rejected rule (declare_data_structures -> array) in state 13
WARNING: reduce/reduce conflict in state 16 resolved using rule (estructurasDatos -> hash_declaration)
WARNING: rejected rule (declare_data_structures -> hash_declaration) in state 16
WARNING: reduce/reduce conflict in state 19 resolved using rule (estructurasDatos -> set_expression)
WARNING: rejected rule (set_operations -> set_expression) in state 19
WARNING: reduce/reduce conflict in state 27 resolved using rule (declare_data_structures -> variable_declaration)
WARNING: rejected rule (declaraciones -> variable_declaration) in state 27
WARNING: Rule (declare_data_structures -> array) is never reduced
WARNING: Rule (declare_data_structures -> hash_declaration) is never reduced
WARNING: Rule (declaraciones -> variable_declaration) is never reduced
