Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BEGIN
    BIN_INTEGER
    BOOLEAN
    BREAK
    CASE
    CASE_EQUAL
    CLASS
    DEF
    DEFINED
    DIVIDE_ASSIGN
    DOUBLE_QUOTE
    ELSIF
    EXPONENT_ASSIGN
    FOR
    HEX_INTEGER
    IN
    MINUS_ASSIGN
    MODULE
    MODULO_ASSIGN
    MULTIPLY_ASSIGN
    NOT
    OCT_INTEGER
    PLUS_ASSIGN
    RANGEEX
    RANGEIN
    REDO
    RETURN
    SELF
    TAB
    UNTIL
    WHEN

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> puts
Rule 2     codigo -> gets
Rule 3     codigo -> estructurasDatos
Rule 4     codigo -> estructurasControl
Rule 5     codigo -> method_call
Rule 6     codigo -> block_assignment
Rule 7     codigo -> proc_assignment
Rule 8     codigo -> proc_call
Rule 9     codigo -> declaraciones
Rule 10    codigo -> arithmetic_production
Rule 11    estructurasDatos -> array
Rule 12    estructurasDatos -> var_arreglo
Rule 13    estructurasDatos -> acceder_arreglo
Rule 14    estructurasDatos -> hash_declaration
Rule 15    estructurasDatos -> hash_access
Rule 16    estructurasDatos -> hash_operations
Rule 17    estructurasDatos -> set_expression
Rule 18    estructurasDatos -> set_operations
Rule 19    estructurasControl -> ifStatement
Rule 20    estructurasControl -> while_statement
Rule 21    estructurasControl -> unless_expression
Rule 22    value -> var
Rule 23    value -> num
Rule 24    value -> STRING
Rule 25    value -> NIL
Rule 26    value -> SYMBOL
Rule 27    values_space -> value SPACE values_space
Rule 28    values_space -> value
Rule 29    values -> value
Rule 30    values -> value COMMA values
Rule 31    var -> LOCAL_VAR
Rule 32    var -> INSTANCE_VAR
Rule 33    var -> CLASS_VAR
Rule 34    var -> GLOBAL_VAR
Rule 35    var -> CONSTANT
Rule 36    num -> FLOAT
Rule 37    num -> INTEGER
Rule 38    gets -> GETS DOT CHOMP DOT TO_F
Rule 39    gets -> GETS DOT CHOMP DOT TO_I
Rule 40    gets -> GETS DOT CHOMP
Rule 41    puts -> PUT values
Rule 42    array -> array_explicito
Rule 43    array -> array_implicito
Rule 44    array -> array_creation
Rule 45    array -> newArray
Rule 46    array_explicito -> LEFT_COR values RIGHT_COR
Rule 47    array_explicito -> LEFT_COR RIGHT_COR
Rule 48    array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR
Rule 49    array_implicito -> PERCENTW LEFT_COR RIGHT_COR
Rule 50    array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR
Rule 51    newArray -> ARRAY DOT NEW
Rule 52    newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
Rule 53    newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
Rule 54    var_arreglo -> var
Rule 55    var_arreglo -> var ASSIGN array
Rule 56    acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR
Rule 57    ifStatement -> IF condiciones NEWLINE codigo END_LOWER
Rule 58    ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
Rule 59    condiciones -> condicion
Rule 60    condiciones -> condiciones conectores condiciones
Rule 61    conectores -> AND
Rule 62    conectores -> OR
Rule 63    conectores -> AND_RESERVED
Rule 64    conectores -> OR_RESERVED
Rule 65    condicion -> num operComp num
Rule 66    condicion -> var operComp num
Rule 67    condicion -> num operComp var
Rule 68    operComp -> GREATER
Rule 69    operComp -> LESS
Rule 70    operComp -> GREATER_EQUAL
Rule 71    operComp -> LESS_EQUAL
Rule 72    operComp -> EQUAL
Rule 73    operComp -> NOT_EQUAL
Rule 74    operComp -> COMPARE
Rule 75    else_statement -> ELSE NEWLINE codigo
Rule 76    hash_declaration -> HASH LEFT_COR values RIGHT_COR
Rule 77    hash_declaration -> HASH LEFT_COR RIGHT_COR
Rule 78    hash_access -> var LEFT_COR value RIGHT_COR
Rule 79    hash_operations -> hash_access ASSIGN value
Rule 80    variable_declaration -> var ASSIGN value
Rule 81    store_conditional_result -> var ASSIGN condiciones
Rule 82    declare_data_structures -> variable_declaration
Rule 83    declare_data_structures -> array
Rule 84    declare_data_structures -> hash_declaration
Rule 85    while_statement -> WHILE condiciones COLON codigo
Rule 86    condition_with_connectors -> condiciones conectores condiciones
Rule 87    method_call -> var LEFTPAR values RIGHTPAR
Rule 88    method_call -> var LEFTPAR RIGHTPAR
Rule 89    print_statement -> PUT LEFTPAR values RIGHTPAR
Rule 90    boolean_expression -> expression GREATER expression
Rule 91    boolean_expression -> expression LESS expression
Rule 92    boolean_expression -> expression GREATER_EQUAL expression
Rule 93    boolean_expression -> expression LESS_EQUAL expression
Rule 94    boolean_expression -> expression EQUAL expression
Rule 95    boolean_expression -> expression NOT_EQUAL expression
Rule 96    boolean_expression -> boolean_value
Rule 97    boolean_value -> TRUE
Rule 98    boolean_value -> FALSE
Rule 99    expression -> INTEGER
Rule 100   expression -> FLOAT
Rule 101   expression -> variable
Rule 102   expression -> STRING
Rule 103   variable -> LOCAL_VAR
Rule 104   variable -> INSTANCE_VAR
Rule 105   variable -> CLASS_VAR
Rule 106   variable -> GLOBAL_VAR
Rule 107   variable -> CONSTANT
Rule 108   declaraciones -> variable_declaration
Rule 109   declaraciones -> store_conditional_result
Rule 110   declaraciones -> declare_data_structures
Rule 111   expresion -> puts
Rule 112   expresion -> gets
Rule 113   expresion -> print_statement
Rule 114   set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
Rule 115   set_expression -> SET LEFT_COR values RIGHT_COR
Rule 116   set_operations -> set_expression
Rule 117   set_operations -> set_operations set_binary_operators set_expression
Rule 118   declare_data_structures -> LOCAL_VAR ASSIGN set_expression
Rule 119   set_binary_operators -> PLUS
Rule 120   set_binary_operators -> MINUS
Rule 121   set_binary_operators -> AMPERSAND
Rule 122   set_binary_operators -> PIPE
Rule 123   set_binary_operators -> CARET
Rule 124   unless_expression -> UNLESS boolean_expression THEN expresion END
Rule 125   unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END
Rule 126   expresion -> arithmetic_production
Rule 127   arithmetic_production -> num
Rule 128   arithmetic_production -> var
Rule 129   arithmetic_production -> num arithmetic_operators arithmetic_production
Rule 130   arithmetic_production -> var arithmetic_operators arithmetic_production
Rule 131   arithmetic_operators -> PLUS
Rule 132   arithmetic_operators -> MINUS
Rule 133   arithmetic_operators -> MULTIPLY
Rule 134   arithmetic_operators -> DIVIDE
Rule 135   arithmetic_operators -> MODULO
Rule 136   arithmetic_operators -> EXPONENT
Rule 137   block_expression -> LBRACE expresion RBRACE
Rule 138   block_expression -> DO expresion END
Rule 139   block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
Rule 140   block_expression -> DO PIPE LOCAL_VAR PIPE expresion END
Rule 141   block_assignment -> method_call block_expression
Rule 142   proc_expression -> PROC DOT NEW block_expression
Rule 143   proc_assignment -> LOCAL_VAR ASSIGN proc_expression
Rule 144   proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
Rule 145   proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR
Rule 146   proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR
Rule 147   expresion -> condition_with_connectors

Terminals, with rules where they appear

AMPERSAND            : 121
AND                  : 61
AND_RESERVED         : 63
ARRAY                : 50 51 52 53
ASSIGN               : 55 79 80 81 118 143
BACKSLASH            : 
BEGIN                : 
BIN_INTEGER          : 
BOOLEAN              : 
BREAK                : 
CALL                 : 144
CARET                : 123
CASE                 : 
CASE_EQUAL           : 
CHOMP                : 38 39 40
CLASS                : 
CLASS_VAR            : 33 105
COLON                : 85
COMMA                : 30 53
COMPARE              : 74
CONSTANT             : 35 107
DEF                  : 
DEFINED              : 
DIVIDE               : 134
DIVIDE_ASSIGN        : 
DO                   : 138 140
DOT                  : 38 38 39 39 40 51 52 53 114 142 144 145
DOUBLE_QUOTE         : 
ELSE                 : 75 125
ELSIF                : 
END                  : 124 125 138 140
END_LOWER            : 57 58
EQUAL                : 72 94
EXPONENT             : 136
EXPONENT_ASSIGN      : 
FALSE                : 98
FLOAT                : 36 100
FOR                  : 
GETS                 : 38 39 40
GLOBAL_VAR           : 34 106
GREATER              : 68 90
GREATER_EQUAL        : 70 92
HASH                 : 76 77
HEX_INTEGER          : 
IF                   : 57 58
IN                   : 
INSTANCE_VAR         : 32 104
INTEGER              : 37 52 53 56 99
LBRACE               : 137 139
LEFTPAR              : 50 52 53 87 88 89 114 144 145
LEFT_COR             : 46 47 48 49 56 76 77 78 114 115 146
LESS                 : 69 91
LESS_EQUAL           : 71 93
LOCAL_VAR            : 31 103 118 139 140 143 144 145 146
MINUS                : 120 132
MINUS_ASSIGN         : 
MODULE               : 
MODULO               : 135
MODULO_ASSIGN        : 
MULTIPLY             : 133
MULTIPLY_ASSIGN      : 
NEW                  : 51 52 53 114 142
NEWLINE              : 57 58 58 75
NIL                  : 25
NOT                  : 
NOT_EQUAL            : 73 95
OCT_INTEGER          : 
OR                   : 62
OR_RESERVED          : 64
PERCENTW             : 48 49
PIPE                 : 122 139 139 140 140
PLUS                 : 119 131
PLUS_ASSIGN          : 
PROC                 : 142
PUT                  : 41 89
RANGEEX              : 
RANGEIN              : 
RBRACE               : 137 139
REDO                 : 
RETURN               : 
RIGHTPAR             : 50 52 53 87 88 89 114 144 145
RIGHT_COR            : 46 47 48 49 56 76 77 78 114 115 146
SELF                 : 
SET                  : 114 115
SPACE                : 27
STRING               : 24 102
SYMBOL               : 26
TAB                  : 
THEN                 : 124 125
TO_F                 : 38
TO_I                 : 39
TRUE                 : 97
UNLESS               : 124 125
UNTIL                : 
WHEN                 : 
WHILE                : 85
error                : 

Nonterminals, with rules where they appear

acceder_arreglo      : 13
arithmetic_operators : 129 130
arithmetic_production : 10 126 129 130
array                : 11 55 83
array_creation       : 44
array_explicito      : 42 50
array_implicito      : 43
block_assignment     : 6
block_expression     : 141 142
boolean_expression   : 124 125
boolean_value        : 96
codigo               : 57 58 75 85 0
condicion            : 59
condiciones          : 57 58 60 60 81 85 86 86
condition_with_connectors : 147
conectores           : 60 86
declaraciones        : 9
declare_data_structures : 110
else_statement       : 58
estructurasControl   : 4
estructurasDatos     : 3
expresion            : 124 125 125 137 138 139 140
expression           : 90 90 91 91 92 92 93 93 94 94 95 95
gets                 : 2 112
hash_access          : 15 79
hash_declaration     : 14 84
hash_operations      : 16
ifStatement          : 19
method_call          : 5 141
newArray             : 45
num                  : 23 65 65 66 67 127 129
operComp             : 65 66 67
print_statement      : 113
proc_assignment      : 7
proc_call            : 8
proc_expression      : 143
puts                 : 1 111
set_binary_operators : 117
set_expression       : 17 116 117 118
set_operations       : 18 117
store_conditional_result : 109
unless_expression    : 21
value                : 27 28 29 30 78 79 80
values               : 30 41 46 53 76 87 89 114 115 144 145 146
values_space         : 27 48
var                  : 22 54 55 66 67 78 80 81 87 88 128 130
var_arreglo          : 12 56
variable             : 101
variable_declaration : 82 108
while_statement      : 20

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . arithmetic_production
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (11) estructurasDatos -> . array
    (12) estructurasDatos -> . var_arreglo
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (87) method_call -> . var LEFTPAR values RIGHTPAR
    (88) method_call -> . var LEFTPAR RIGHTPAR
    (141) block_assignment -> . method_call block_expression
    (143) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (144) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (146) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (108) declaraciones -> . variable_declaration
    (109) declaraciones -> . store_conditional_result
    (110) declaraciones -> . declare_data_structures
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (42) array -> . array_explicito
    (43) array -> . array_implicito
    (44) array -> . array_creation
    (45) array -> . newArray
    (54) var_arreglo -> . var
    (55) var_arreglo -> . var ASSIGN array
    (56) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (76) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (77) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (78) hash_access -> . var LEFT_COR value RIGHT_COR
    (79) hash_operations -> . hash_access ASSIGN value
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR
    (116) set_operations -> . set_expression
    (117) set_operations -> . set_operations set_binary_operators set_expression
    (57) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (58) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (85) while_statement -> . WHILE condiciones COLON codigo
    (124) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (125) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (80) variable_declaration -> . var ASSIGN value
    (81) store_conditional_result -> . var ASSIGN condiciones
    (82) declare_data_structures -> . variable_declaration
    (83) declare_data_structures -> . array
    (84) declare_data_structures -> . hash_declaration
    (118) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 12
    GETS            shift and go to state 13
    LOCAL_VAR       shift and go to state 26
    HASH            shift and go to state 37
    SET             shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    UNLESS          shift and go to state 41
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 47
    ARRAY           shift and go to state 48

    codigo                         shift and go to state 1
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    arithmetic_production          shift and go to state 11
    array                          shift and go to state 14
    var_arreglo                    shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    num                            shift and go to state 31
    array_explicito                shift and go to state 32
    array_implicito                shift and go to state 33
    array_creation                 shift and go to state 34
    newArray                       shift and go to state 35

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> puts .

    $end            reduce using rule 1 (codigo -> puts .)
    END_LOWER       reduce using rule 1 (codigo -> puts .)
    NEWLINE         reduce using rule 1 (codigo -> puts .)


state 3

    (2) codigo -> gets .

    $end            reduce using rule 2 (codigo -> gets .)
    END_LOWER       reduce using rule 2 (codigo -> gets .)
    NEWLINE         reduce using rule 2 (codigo -> gets .)


state 4

    (3) codigo -> estructurasDatos .

    $end            reduce using rule 3 (codigo -> estructurasDatos .)
    END_LOWER       reduce using rule 3 (codigo -> estructurasDatos .)
    NEWLINE         reduce using rule 3 (codigo -> estructurasDatos .)


state 5

    (4) codigo -> estructurasControl .

    $end            reduce using rule 4 (codigo -> estructurasControl .)
    END_LOWER       reduce using rule 4 (codigo -> estructurasControl .)
    NEWLINE         reduce using rule 4 (codigo -> estructurasControl .)


state 6

    (5) codigo -> method_call .
    (141) block_assignment -> method_call . block_expression
    (137) block_expression -> . LBRACE expresion RBRACE
    (138) block_expression -> . DO expresion END
    (139) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (140) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    $end            reduce using rule 5 (codigo -> method_call .)
    END_LOWER       reduce using rule 5 (codigo -> method_call .)
    NEWLINE         reduce using rule 5 (codigo -> method_call .)
    LBRACE          shift and go to state 50
    DO              shift and go to state 51

    block_expression               shift and go to state 49

state 7

    (6) codigo -> block_assignment .

    $end            reduce using rule 6 (codigo -> block_assignment .)
    END_LOWER       reduce using rule 6 (codigo -> block_assignment .)
    NEWLINE         reduce using rule 6 (codigo -> block_assignment .)


state 8

    (7) codigo -> proc_assignment .

    $end            reduce using rule 7 (codigo -> proc_assignment .)
    END_LOWER       reduce using rule 7 (codigo -> proc_assignment .)
    NEWLINE         reduce using rule 7 (codigo -> proc_assignment .)


state 9

    (8) codigo -> proc_call .

    $end            reduce using rule 8 (codigo -> proc_call .)
    END_LOWER       reduce using rule 8 (codigo -> proc_call .)
    NEWLINE         reduce using rule 8 (codigo -> proc_call .)


state 10

    (9) codigo -> declaraciones .

    $end            reduce using rule 9 (codigo -> declaraciones .)
    END_LOWER       reduce using rule 9 (codigo -> declaraciones .)
    NEWLINE         reduce using rule 9 (codigo -> declaraciones .)


state 11

    (10) codigo -> arithmetic_production .

    $end            reduce using rule 10 (codigo -> arithmetic_production .)
    END_LOWER       reduce using rule 10 (codigo -> arithmetic_production .)
    NEWLINE         reduce using rule 10 (codigo -> arithmetic_production .)


state 12

    (41) puts -> PUT . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 52
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 13

    (38) gets -> GETS . DOT CHOMP DOT TO_F
    (39) gets -> GETS . DOT CHOMP DOT TO_I
    (40) gets -> GETS . DOT CHOMP

    DOT             shift and go to state 60


state 14

    (11) estructurasDatos -> array .
    (83) declare_data_structures -> array .

  ! reduce/reduce conflict for $end resolved using rule 11 (estructurasDatos -> array .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 11 (estructurasDatos -> array .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 11 (estructurasDatos -> array .)
    $end            reduce using rule 11 (estructurasDatos -> array .)
    END_LOWER       reduce using rule 11 (estructurasDatos -> array .)
    NEWLINE         reduce using rule 11 (estructurasDatos -> array .)

  ! $end            [ reduce using rule 83 (declare_data_structures -> array .) ]
  ! END_LOWER       [ reduce using rule 83 (declare_data_structures -> array .) ]
  ! NEWLINE         [ reduce using rule 83 (declare_data_structures -> array .) ]


state 15

    (12) estructurasDatos -> var_arreglo .
    (56) acceder_arreglo -> var_arreglo . LEFT_COR INTEGER RIGHT_COR

    $end            reduce using rule 12 (estructurasDatos -> var_arreglo .)
    END_LOWER       reduce using rule 12 (estructurasDatos -> var_arreglo .)
    NEWLINE         reduce using rule 12 (estructurasDatos -> var_arreglo .)
    LEFT_COR        shift and go to state 61


state 16

    (13) estructurasDatos -> acceder_arreglo .

    $end            reduce using rule 13 (estructurasDatos -> acceder_arreglo .)
    END_LOWER       reduce using rule 13 (estructurasDatos -> acceder_arreglo .)
    NEWLINE         reduce using rule 13 (estructurasDatos -> acceder_arreglo .)


state 17

    (14) estructurasDatos -> hash_declaration .
    (84) declare_data_structures -> hash_declaration .

  ! reduce/reduce conflict for $end resolved using rule 14 (estructurasDatos -> hash_declaration .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 14 (estructurasDatos -> hash_declaration .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 14 (estructurasDatos -> hash_declaration .)
    $end            reduce using rule 14 (estructurasDatos -> hash_declaration .)
    END_LOWER       reduce using rule 14 (estructurasDatos -> hash_declaration .)
    NEWLINE         reduce using rule 14 (estructurasDatos -> hash_declaration .)

  ! $end            [ reduce using rule 84 (declare_data_structures -> hash_declaration .) ]
  ! END_LOWER       [ reduce using rule 84 (declare_data_structures -> hash_declaration .) ]
  ! NEWLINE         [ reduce using rule 84 (declare_data_structures -> hash_declaration .) ]


state 18

    (15) estructurasDatos -> hash_access .
    (79) hash_operations -> hash_access . ASSIGN value

    $end            reduce using rule 15 (estructurasDatos -> hash_access .)
    END_LOWER       reduce using rule 15 (estructurasDatos -> hash_access .)
    NEWLINE         reduce using rule 15 (estructurasDatos -> hash_access .)
    ASSIGN          shift and go to state 62


state 19

    (16) estructurasDatos -> hash_operations .

    $end            reduce using rule 16 (estructurasDatos -> hash_operations .)
    END_LOWER       reduce using rule 16 (estructurasDatos -> hash_operations .)
    NEWLINE         reduce using rule 16 (estructurasDatos -> hash_operations .)


state 20

    (17) estructurasDatos -> set_expression .
    (116) set_operations -> set_expression .

  ! reduce/reduce conflict for $end resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 17 (estructurasDatos -> set_expression .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 17 (estructurasDatos -> set_expression .)
    $end            reduce using rule 17 (estructurasDatos -> set_expression .)
    END_LOWER       reduce using rule 17 (estructurasDatos -> set_expression .)
    NEWLINE         reduce using rule 17 (estructurasDatos -> set_expression .)
    PLUS            reduce using rule 116 (set_operations -> set_expression .)
    MINUS           reduce using rule 116 (set_operations -> set_expression .)
    AMPERSAND       reduce using rule 116 (set_operations -> set_expression .)
    PIPE            reduce using rule 116 (set_operations -> set_expression .)
    CARET           reduce using rule 116 (set_operations -> set_expression .)

  ! $end            [ reduce using rule 116 (set_operations -> set_expression .) ]
  ! END_LOWER       [ reduce using rule 116 (set_operations -> set_expression .) ]
  ! NEWLINE         [ reduce using rule 116 (set_operations -> set_expression .) ]


state 21

    (18) estructurasDatos -> set_operations .
    (117) set_operations -> set_operations . set_binary_operators set_expression
    (119) set_binary_operators -> . PLUS
    (120) set_binary_operators -> . MINUS
    (121) set_binary_operators -> . AMPERSAND
    (122) set_binary_operators -> . PIPE
    (123) set_binary_operators -> . CARET

    $end            reduce using rule 18 (estructurasDatos -> set_operations .)
    END_LOWER       reduce using rule 18 (estructurasDatos -> set_operations .)
    NEWLINE         reduce using rule 18 (estructurasDatos -> set_operations .)
    PLUS            shift and go to state 64
    MINUS           shift and go to state 65
    AMPERSAND       shift and go to state 66
    PIPE            shift and go to state 67
    CARET           shift and go to state 68

    set_binary_operators           shift and go to state 63

state 22

    (19) estructurasControl -> ifStatement .

    $end            reduce using rule 19 (estructurasControl -> ifStatement .)
    END_LOWER       reduce using rule 19 (estructurasControl -> ifStatement .)
    NEWLINE         reduce using rule 19 (estructurasControl -> ifStatement .)


state 23

    (20) estructurasControl -> while_statement .

    $end            reduce using rule 20 (estructurasControl -> while_statement .)
    END_LOWER       reduce using rule 20 (estructurasControl -> while_statement .)
    NEWLINE         reduce using rule 20 (estructurasControl -> while_statement .)


state 24

    (21) estructurasControl -> unless_expression .

    $end            reduce using rule 21 (estructurasControl -> unless_expression .)
    END_LOWER       reduce using rule 21 (estructurasControl -> unless_expression .)
    NEWLINE         reduce using rule 21 (estructurasControl -> unless_expression .)


state 25

    (87) method_call -> var . LEFTPAR values RIGHTPAR
    (88) method_call -> var . LEFTPAR RIGHTPAR
    (128) arithmetic_production -> var .
    (130) arithmetic_production -> var . arithmetic_operators arithmetic_production
    (54) var_arreglo -> var .
    (55) var_arreglo -> var . ASSIGN array
    (78) hash_access -> var . LEFT_COR value RIGHT_COR
    (80) variable_declaration -> var . ASSIGN value
    (81) store_conditional_result -> var . ASSIGN condiciones
    (131) arithmetic_operators -> . PLUS
    (132) arithmetic_operators -> . MINUS
    (133) arithmetic_operators -> . MULTIPLY
    (134) arithmetic_operators -> . DIVIDE
    (135) arithmetic_operators -> . MODULO
    (136) arithmetic_operators -> . EXPONENT

  ! reduce/reduce conflict for $end resolved using rule 54 (var_arreglo -> var .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 54 (var_arreglo -> var .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 54 (var_arreglo -> var .)
  ! shift/reduce conflict for LEFT_COR resolved as shift
    LEFTPAR         shift and go to state 69
    $end            reduce using rule 54 (var_arreglo -> var .)
    END_LOWER       reduce using rule 54 (var_arreglo -> var .)
    NEWLINE         reduce using rule 54 (var_arreglo -> var .)
    ASSIGN          shift and go to state 71
    LEFT_COR        shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EXPONENT        shift and go to state 78

  ! $end            [ reduce using rule 128 (arithmetic_production -> var .) ]
  ! END_LOWER       [ reduce using rule 128 (arithmetic_production -> var .) ]
  ! NEWLINE         [ reduce using rule 128 (arithmetic_production -> var .) ]
  ! LEFT_COR        [ reduce using rule 54 (var_arreglo -> var .) ]

    arithmetic_operators           shift and go to state 70

state 26

    (143) proc_assignment -> LOCAL_VAR . ASSIGN proc_expression
    (144) proc_call -> LOCAL_VAR . DOT CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> LOCAL_VAR . DOT LEFTPAR values RIGHTPAR
    (146) proc_call -> LOCAL_VAR . LEFT_COR values RIGHT_COR
    (31) var -> LOCAL_VAR .
    (118) declare_data_structures -> LOCAL_VAR . ASSIGN set_expression

  ! shift/reduce conflict for ASSIGN resolved as shift
  ! shift/reduce conflict for LEFT_COR resolved as shift
    ASSIGN          shift and go to state 79
    DOT             shift and go to state 80
    LEFT_COR        shift and go to state 81
    LEFTPAR         reduce using rule 31 (var -> LOCAL_VAR .)
    PLUS            reduce using rule 31 (var -> LOCAL_VAR .)
    MINUS           reduce using rule 31 (var -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 31 (var -> LOCAL_VAR .)
    DIVIDE          reduce using rule 31 (var -> LOCAL_VAR .)
    MODULO          reduce using rule 31 (var -> LOCAL_VAR .)
    EXPONENT        reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)

  ! ASSIGN          [ reduce using rule 31 (var -> LOCAL_VAR .) ]
  ! LEFT_COR        [ reduce using rule 31 (var -> LOCAL_VAR .) ]


state 27

    (46) array_explicito -> LEFT_COR . values RIGHT_COR
    (47) array_explicito -> LEFT_COR . RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    RIGHT_COR       shift and go to state 83
    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 82
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 28

    (108) declaraciones -> variable_declaration .
    (82) declare_data_structures -> variable_declaration .

  ! reduce/reduce conflict for $end resolved using rule 82 (declare_data_structures -> variable_declaration .)
  ! reduce/reduce conflict for END_LOWER resolved using rule 82 (declare_data_structures -> variable_declaration .)
  ! reduce/reduce conflict for NEWLINE resolved using rule 82 (declare_data_structures -> variable_declaration .)
    $end            reduce using rule 82 (declare_data_structures -> variable_declaration .)
    END_LOWER       reduce using rule 82 (declare_data_structures -> variable_declaration .)
    NEWLINE         reduce using rule 82 (declare_data_structures -> variable_declaration .)

  ! $end            [ reduce using rule 108 (declaraciones -> variable_declaration .) ]
  ! END_LOWER       [ reduce using rule 108 (declaraciones -> variable_declaration .) ]
  ! NEWLINE         [ reduce using rule 108 (declaraciones -> variable_declaration .) ]


state 29

    (109) declaraciones -> store_conditional_result .

    $end            reduce using rule 109 (declaraciones -> store_conditional_result .)
    END_LOWER       reduce using rule 109 (declaraciones -> store_conditional_result .)
    NEWLINE         reduce using rule 109 (declaraciones -> store_conditional_result .)


state 30

    (110) declaraciones -> declare_data_structures .

    $end            reduce using rule 110 (declaraciones -> declare_data_structures .)
    END_LOWER       reduce using rule 110 (declaraciones -> declare_data_structures .)
    NEWLINE         reduce using rule 110 (declaraciones -> declare_data_structures .)


state 31

    (127) arithmetic_production -> num .
    (129) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (131) arithmetic_operators -> . PLUS
    (132) arithmetic_operators -> . MINUS
    (133) arithmetic_operators -> . MULTIPLY
    (134) arithmetic_operators -> . DIVIDE
    (135) arithmetic_operators -> . MODULO
    (136) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 127 (arithmetic_production -> num .)
    RBRACE          reduce using rule 127 (arithmetic_production -> num .)
    END             reduce using rule 127 (arithmetic_production -> num .)
    END_LOWER       reduce using rule 127 (arithmetic_production -> num .)
    NEWLINE         reduce using rule 127 (arithmetic_production -> num .)
    ELSE            reduce using rule 127 (arithmetic_production -> num .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EXPONENT        shift and go to state 78

    arithmetic_operators           shift and go to state 84

state 32

    (42) array -> array_explicito .

    $end            reduce using rule 42 (array -> array_explicito .)
    LEFT_COR        reduce using rule 42 (array -> array_explicito .)
    END_LOWER       reduce using rule 42 (array -> array_explicito .)
    NEWLINE         reduce using rule 42 (array -> array_explicito .)


state 33

    (43) array -> array_implicito .

    $end            reduce using rule 43 (array -> array_implicito .)
    LEFT_COR        reduce using rule 43 (array -> array_implicito .)
    END_LOWER       reduce using rule 43 (array -> array_implicito .)
    NEWLINE         reduce using rule 43 (array -> array_implicito .)


state 34

    (44) array -> array_creation .

    $end            reduce using rule 44 (array -> array_creation .)
    LEFT_COR        reduce using rule 44 (array -> array_creation .)
    END_LOWER       reduce using rule 44 (array -> array_creation .)
    NEWLINE         reduce using rule 44 (array -> array_creation .)


state 35

    (45) array -> newArray .

    $end            reduce using rule 45 (array -> newArray .)
    LEFT_COR        reduce using rule 45 (array -> newArray .)
    END_LOWER       reduce using rule 45 (array -> newArray .)
    NEWLINE         reduce using rule 45 (array -> newArray .)


state 36

    (37) num -> INTEGER .

    PLUS            reduce using rule 37 (num -> INTEGER .)
    MINUS           reduce using rule 37 (num -> INTEGER .)
    MULTIPLY        reduce using rule 37 (num -> INTEGER .)
    DIVIDE          reduce using rule 37 (num -> INTEGER .)
    MODULO          reduce using rule 37 (num -> INTEGER .)
    EXPONENT        reduce using rule 37 (num -> INTEGER .)
    $end            reduce using rule 37 (num -> INTEGER .)
    COMMA           reduce using rule 37 (num -> INTEGER .)
    END_LOWER       reduce using rule 37 (num -> INTEGER .)
    NEWLINE         reduce using rule 37 (num -> INTEGER .)
    RIGHT_COR       reduce using rule 37 (num -> INTEGER .)
    GREATER         reduce using rule 37 (num -> INTEGER .)
    LESS            reduce using rule 37 (num -> INTEGER .)
    GREATER_EQUAL   reduce using rule 37 (num -> INTEGER .)
    LESS_EQUAL      reduce using rule 37 (num -> INTEGER .)
    EQUAL           reduce using rule 37 (num -> INTEGER .)
    NOT_EQUAL       reduce using rule 37 (num -> INTEGER .)
    COMPARE         reduce using rule 37 (num -> INTEGER .)
    RBRACE          reduce using rule 37 (num -> INTEGER .)
    END             reduce using rule 37 (num -> INTEGER .)
    RIGHTPAR        reduce using rule 37 (num -> INTEGER .)
    ELSE            reduce using rule 37 (num -> INTEGER .)
    SPACE           reduce using rule 37 (num -> INTEGER .)
    AND             reduce using rule 37 (num -> INTEGER .)
    OR              reduce using rule 37 (num -> INTEGER .)
    AND_RESERVED    reduce using rule 37 (num -> INTEGER .)
    OR_RESERVED     reduce using rule 37 (num -> INTEGER .)
    COLON           reduce using rule 37 (num -> INTEGER .)


state 37

    (76) hash_declaration -> HASH . LEFT_COR values RIGHT_COR
    (77) hash_declaration -> HASH . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 85


state 38

    (114) set_expression -> SET . DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> SET . LEFT_COR values RIGHT_COR

    DOT             shift and go to state 86
    LEFT_COR        shift and go to state 87


state 39

    (57) ifStatement -> IF . condiciones NEWLINE codigo END_LOWER
    (58) ifStatement -> IF . condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    condiciones                    shift and go to state 88
    condicion                      shift and go to state 89
    num                            shift and go to state 90
    var                            shift and go to state 91

state 40

    (85) while_statement -> WHILE . condiciones COLON codigo
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    condiciones                    shift and go to state 92
    condicion                      shift and go to state 89
    num                            shift and go to state 90
    var                            shift and go to state 91

state 41

    (124) unless_expression -> UNLESS . boolean_expression THEN expresion END
    (125) unless_expression -> UNLESS . boolean_expression THEN expresion ELSE expresion END
    (90) boolean_expression -> . expression GREATER expression
    (91) boolean_expression -> . expression LESS expression
    (92) boolean_expression -> . expression GREATER_EQUAL expression
    (93) boolean_expression -> . expression LESS_EQUAL expression
    (94) boolean_expression -> . expression EQUAL expression
    (95) boolean_expression -> . expression NOT_EQUAL expression
    (96) boolean_expression -> . boolean_value
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (97) boolean_value -> . TRUE
    (98) boolean_value -> . FALSE
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    TRUE            shift and go to state 100
    FALSE           shift and go to state 101
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    boolean_expression             shift and go to state 93
    expression                     shift and go to state 94
    boolean_value                  shift and go to state 95
    variable                       shift and go to state 98

state 42

    (32) var -> INSTANCE_VAR .

    LEFTPAR         reduce using rule 32 (var -> INSTANCE_VAR .)
    ASSIGN          reduce using rule 32 (var -> INSTANCE_VAR .)
    LEFT_COR        reduce using rule 32 (var -> INSTANCE_VAR .)
    PLUS            reduce using rule 32 (var -> INSTANCE_VAR .)
    MINUS           reduce using rule 32 (var -> INSTANCE_VAR .)
    MULTIPLY        reduce using rule 32 (var -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 32 (var -> INSTANCE_VAR .)
    MODULO          reduce using rule 32 (var -> INSTANCE_VAR .)
    EXPONENT        reduce using rule 32 (var -> INSTANCE_VAR .)
    $end            reduce using rule 32 (var -> INSTANCE_VAR .)
    COMMA           reduce using rule 32 (var -> INSTANCE_VAR .)
    END_LOWER       reduce using rule 32 (var -> INSTANCE_VAR .)
    NEWLINE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHT_COR       reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER         reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS            reduce using rule 32 (var -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 32 (var -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 32 (var -> INSTANCE_VAR .)
    EQUAL           reduce using rule 32 (var -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 32 (var -> INSTANCE_VAR .)
    COMPARE         reduce using rule 32 (var -> INSTANCE_VAR .)
    RBRACE          reduce using rule 32 (var -> INSTANCE_VAR .)
    END             reduce using rule 32 (var -> INSTANCE_VAR .)
    RIGHTPAR        reduce using rule 32 (var -> INSTANCE_VAR .)
    ELSE            reduce using rule 32 (var -> INSTANCE_VAR .)
    SPACE           reduce using rule 32 (var -> INSTANCE_VAR .)
    AND             reduce using rule 32 (var -> INSTANCE_VAR .)
    OR              reduce using rule 32 (var -> INSTANCE_VAR .)
    AND_RESERVED    reduce using rule 32 (var -> INSTANCE_VAR .)
    OR_RESERVED     reduce using rule 32 (var -> INSTANCE_VAR .)
    COLON           reduce using rule 32 (var -> INSTANCE_VAR .)


state 43

    (33) var -> CLASS_VAR .

    LEFTPAR         reduce using rule 33 (var -> CLASS_VAR .)
    ASSIGN          reduce using rule 33 (var -> CLASS_VAR .)
    LEFT_COR        reduce using rule 33 (var -> CLASS_VAR .)
    PLUS            reduce using rule 33 (var -> CLASS_VAR .)
    MINUS           reduce using rule 33 (var -> CLASS_VAR .)
    MULTIPLY        reduce using rule 33 (var -> CLASS_VAR .)
    DIVIDE          reduce using rule 33 (var -> CLASS_VAR .)
    MODULO          reduce using rule 33 (var -> CLASS_VAR .)
    EXPONENT        reduce using rule 33 (var -> CLASS_VAR .)
    $end            reduce using rule 33 (var -> CLASS_VAR .)
    COMMA           reduce using rule 33 (var -> CLASS_VAR .)
    END_LOWER       reduce using rule 33 (var -> CLASS_VAR .)
    NEWLINE         reduce using rule 33 (var -> CLASS_VAR .)
    RIGHT_COR       reduce using rule 33 (var -> CLASS_VAR .)
    GREATER         reduce using rule 33 (var -> CLASS_VAR .)
    LESS            reduce using rule 33 (var -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 33 (var -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 33 (var -> CLASS_VAR .)
    EQUAL           reduce using rule 33 (var -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 33 (var -> CLASS_VAR .)
    COMPARE         reduce using rule 33 (var -> CLASS_VAR .)
    RBRACE          reduce using rule 33 (var -> CLASS_VAR .)
    END             reduce using rule 33 (var -> CLASS_VAR .)
    RIGHTPAR        reduce using rule 33 (var -> CLASS_VAR .)
    ELSE            reduce using rule 33 (var -> CLASS_VAR .)
    SPACE           reduce using rule 33 (var -> CLASS_VAR .)
    AND             reduce using rule 33 (var -> CLASS_VAR .)
    OR              reduce using rule 33 (var -> CLASS_VAR .)
    AND_RESERVED    reduce using rule 33 (var -> CLASS_VAR .)
    OR_RESERVED     reduce using rule 33 (var -> CLASS_VAR .)
    COLON           reduce using rule 33 (var -> CLASS_VAR .)


state 44

    (34) var -> GLOBAL_VAR .

    LEFTPAR         reduce using rule 34 (var -> GLOBAL_VAR .)
    ASSIGN          reduce using rule 34 (var -> GLOBAL_VAR .)
    LEFT_COR        reduce using rule 34 (var -> GLOBAL_VAR .)
    PLUS            reduce using rule 34 (var -> GLOBAL_VAR .)
    MINUS           reduce using rule 34 (var -> GLOBAL_VAR .)
    MULTIPLY        reduce using rule 34 (var -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 34 (var -> GLOBAL_VAR .)
    MODULO          reduce using rule 34 (var -> GLOBAL_VAR .)
    EXPONENT        reduce using rule 34 (var -> GLOBAL_VAR .)
    $end            reduce using rule 34 (var -> GLOBAL_VAR .)
    COMMA           reduce using rule 34 (var -> GLOBAL_VAR .)
    END_LOWER       reduce using rule 34 (var -> GLOBAL_VAR .)
    NEWLINE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHT_COR       reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER         reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS            reduce using rule 34 (var -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 34 (var -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 34 (var -> GLOBAL_VAR .)
    EQUAL           reduce using rule 34 (var -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 34 (var -> GLOBAL_VAR .)
    COMPARE         reduce using rule 34 (var -> GLOBAL_VAR .)
    RBRACE          reduce using rule 34 (var -> GLOBAL_VAR .)
    END             reduce using rule 34 (var -> GLOBAL_VAR .)
    RIGHTPAR        reduce using rule 34 (var -> GLOBAL_VAR .)
    ELSE            reduce using rule 34 (var -> GLOBAL_VAR .)
    SPACE           reduce using rule 34 (var -> GLOBAL_VAR .)
    AND             reduce using rule 34 (var -> GLOBAL_VAR .)
    OR              reduce using rule 34 (var -> GLOBAL_VAR .)
    AND_RESERVED    reduce using rule 34 (var -> GLOBAL_VAR .)
    OR_RESERVED     reduce using rule 34 (var -> GLOBAL_VAR .)
    COLON           reduce using rule 34 (var -> GLOBAL_VAR .)


state 45

    (35) var -> CONSTANT .

    LEFTPAR         reduce using rule 35 (var -> CONSTANT .)
    ASSIGN          reduce using rule 35 (var -> CONSTANT .)
    LEFT_COR        reduce using rule 35 (var -> CONSTANT .)
    PLUS            reduce using rule 35 (var -> CONSTANT .)
    MINUS           reduce using rule 35 (var -> CONSTANT .)
    MULTIPLY        reduce using rule 35 (var -> CONSTANT .)
    DIVIDE          reduce using rule 35 (var -> CONSTANT .)
    MODULO          reduce using rule 35 (var -> CONSTANT .)
    EXPONENT        reduce using rule 35 (var -> CONSTANT .)
    $end            reduce using rule 35 (var -> CONSTANT .)
    COMMA           reduce using rule 35 (var -> CONSTANT .)
    END_LOWER       reduce using rule 35 (var -> CONSTANT .)
    NEWLINE         reduce using rule 35 (var -> CONSTANT .)
    RIGHT_COR       reduce using rule 35 (var -> CONSTANT .)
    GREATER         reduce using rule 35 (var -> CONSTANT .)
    LESS            reduce using rule 35 (var -> CONSTANT .)
    GREATER_EQUAL   reduce using rule 35 (var -> CONSTANT .)
    LESS_EQUAL      reduce using rule 35 (var -> CONSTANT .)
    EQUAL           reduce using rule 35 (var -> CONSTANT .)
    NOT_EQUAL       reduce using rule 35 (var -> CONSTANT .)
    COMPARE         reduce using rule 35 (var -> CONSTANT .)
    RBRACE          reduce using rule 35 (var -> CONSTANT .)
    END             reduce using rule 35 (var -> CONSTANT .)
    RIGHTPAR        reduce using rule 35 (var -> CONSTANT .)
    ELSE            reduce using rule 35 (var -> CONSTANT .)
    SPACE           reduce using rule 35 (var -> CONSTANT .)
    AND             reduce using rule 35 (var -> CONSTANT .)
    OR              reduce using rule 35 (var -> CONSTANT .)
    AND_RESERVED    reduce using rule 35 (var -> CONSTANT .)
    OR_RESERVED     reduce using rule 35 (var -> CONSTANT .)
    COLON           reduce using rule 35 (var -> CONSTANT .)


state 46

    (36) num -> FLOAT .

    PLUS            reduce using rule 36 (num -> FLOAT .)
    MINUS           reduce using rule 36 (num -> FLOAT .)
    MULTIPLY        reduce using rule 36 (num -> FLOAT .)
    DIVIDE          reduce using rule 36 (num -> FLOAT .)
    MODULO          reduce using rule 36 (num -> FLOAT .)
    EXPONENT        reduce using rule 36 (num -> FLOAT .)
    $end            reduce using rule 36 (num -> FLOAT .)
    COMMA           reduce using rule 36 (num -> FLOAT .)
    END_LOWER       reduce using rule 36 (num -> FLOAT .)
    NEWLINE         reduce using rule 36 (num -> FLOAT .)
    RIGHT_COR       reduce using rule 36 (num -> FLOAT .)
    GREATER         reduce using rule 36 (num -> FLOAT .)
    LESS            reduce using rule 36 (num -> FLOAT .)
    GREATER_EQUAL   reduce using rule 36 (num -> FLOAT .)
    LESS_EQUAL      reduce using rule 36 (num -> FLOAT .)
    EQUAL           reduce using rule 36 (num -> FLOAT .)
    NOT_EQUAL       reduce using rule 36 (num -> FLOAT .)
    COMPARE         reduce using rule 36 (num -> FLOAT .)
    RBRACE          reduce using rule 36 (num -> FLOAT .)
    END             reduce using rule 36 (num -> FLOAT .)
    RIGHTPAR        reduce using rule 36 (num -> FLOAT .)
    ELSE            reduce using rule 36 (num -> FLOAT .)
    SPACE           reduce using rule 36 (num -> FLOAT .)
    AND             reduce using rule 36 (num -> FLOAT .)
    OR              reduce using rule 36 (num -> FLOAT .)
    AND_RESERVED    reduce using rule 36 (num -> FLOAT .)
    OR_RESERVED     reduce using rule 36 (num -> FLOAT .)
    COLON           reduce using rule 36 (num -> FLOAT .)


state 47

    (48) array_implicito -> PERCENTW . LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> PERCENTW . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 107


state 48

    (50) array_creation -> ARRAY . LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> ARRAY . DOT NEW
    (52) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFTPAR         shift and go to state 108
    DOT             shift and go to state 109


state 49

    (141) block_assignment -> method_call block_expression .

    $end            reduce using rule 141 (block_assignment -> method_call block_expression .)
    END_LOWER       reduce using rule 141 (block_assignment -> method_call block_expression .)
    NEWLINE         reduce using rule 141 (block_assignment -> method_call block_expression .)


state 50

    (137) block_expression -> LBRACE . expresion RBRACE
    (139) block_expression -> LBRACE . PIPE LOCAL_VAR PIPE expresion RBRACE
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PIPE            shift and go to state 111
    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 110
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 51

    (138) block_expression -> DO . expresion END
    (140) block_expression -> DO . PIPE LOCAL_VAR PIPE expresion END
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PIPE            shift and go to state 122
    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 121
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 52

    (41) puts -> PUT values .

    $end            reduce using rule 41 (puts -> PUT values .)
    RBRACE          reduce using rule 41 (puts -> PUT values .)
    END             reduce using rule 41 (puts -> PUT values .)
    END_LOWER       reduce using rule 41 (puts -> PUT values .)
    NEWLINE         reduce using rule 41 (puts -> PUT values .)
    ELSE            reduce using rule 41 (puts -> PUT values .)


state 53

    (29) values -> value .
    (30) values -> value . COMMA values

    $end            reduce using rule 29 (values -> value .)
    END_LOWER       reduce using rule 29 (values -> value .)
    NEWLINE         reduce using rule 29 (values -> value .)
    RIGHT_COR       reduce using rule 29 (values -> value .)
    RIGHTPAR        reduce using rule 29 (values -> value .)
    RBRACE          reduce using rule 29 (values -> value .)
    END             reduce using rule 29 (values -> value .)
    ELSE            reduce using rule 29 (values -> value .)
    COMMA           shift and go to state 123


state 54

    (22) value -> var .

    COMMA           reduce using rule 22 (value -> var .)
    $end            reduce using rule 22 (value -> var .)
    END_LOWER       reduce using rule 22 (value -> var .)
    NEWLINE         reduce using rule 22 (value -> var .)
    RIGHT_COR       reduce using rule 22 (value -> var .)
    RIGHTPAR        reduce using rule 22 (value -> var .)
    SPACE           reduce using rule 22 (value -> var .)
    RBRACE          reduce using rule 22 (value -> var .)
    END             reduce using rule 22 (value -> var .)
    ELSE            reduce using rule 22 (value -> var .)


state 55

    (23) value -> num .

    COMMA           reduce using rule 23 (value -> num .)
    $end            reduce using rule 23 (value -> num .)
    END_LOWER       reduce using rule 23 (value -> num .)
    NEWLINE         reduce using rule 23 (value -> num .)
    RIGHT_COR       reduce using rule 23 (value -> num .)
    RIGHTPAR        reduce using rule 23 (value -> num .)
    SPACE           reduce using rule 23 (value -> num .)
    RBRACE          reduce using rule 23 (value -> num .)
    END             reduce using rule 23 (value -> num .)
    ELSE            reduce using rule 23 (value -> num .)


state 56

    (24) value -> STRING .

    COMMA           reduce using rule 24 (value -> STRING .)
    $end            reduce using rule 24 (value -> STRING .)
    END_LOWER       reduce using rule 24 (value -> STRING .)
    NEWLINE         reduce using rule 24 (value -> STRING .)
    RIGHT_COR       reduce using rule 24 (value -> STRING .)
    RIGHTPAR        reduce using rule 24 (value -> STRING .)
    SPACE           reduce using rule 24 (value -> STRING .)
    RBRACE          reduce using rule 24 (value -> STRING .)
    END             reduce using rule 24 (value -> STRING .)
    ELSE            reduce using rule 24 (value -> STRING .)


state 57

    (25) value -> NIL .

    COMMA           reduce using rule 25 (value -> NIL .)
    $end            reduce using rule 25 (value -> NIL .)
    END_LOWER       reduce using rule 25 (value -> NIL .)
    NEWLINE         reduce using rule 25 (value -> NIL .)
    RIGHT_COR       reduce using rule 25 (value -> NIL .)
    RIGHTPAR        reduce using rule 25 (value -> NIL .)
    SPACE           reduce using rule 25 (value -> NIL .)
    RBRACE          reduce using rule 25 (value -> NIL .)
    END             reduce using rule 25 (value -> NIL .)
    ELSE            reduce using rule 25 (value -> NIL .)


state 58

    (26) value -> SYMBOL .

    COMMA           reduce using rule 26 (value -> SYMBOL .)
    $end            reduce using rule 26 (value -> SYMBOL .)
    END_LOWER       reduce using rule 26 (value -> SYMBOL .)
    NEWLINE         reduce using rule 26 (value -> SYMBOL .)
    RIGHT_COR       reduce using rule 26 (value -> SYMBOL .)
    RIGHTPAR        reduce using rule 26 (value -> SYMBOL .)
    SPACE           reduce using rule 26 (value -> SYMBOL .)
    RBRACE          reduce using rule 26 (value -> SYMBOL .)
    END             reduce using rule 26 (value -> SYMBOL .)
    ELSE            reduce using rule 26 (value -> SYMBOL .)


state 59

    (31) var -> LOCAL_VAR .

    COMMA           reduce using rule 31 (var -> LOCAL_VAR .)
    $end            reduce using rule 31 (var -> LOCAL_VAR .)
    END_LOWER       reduce using rule 31 (var -> LOCAL_VAR .)
    NEWLINE         reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHT_COR       reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER         reduce using rule 31 (var -> LOCAL_VAR .)
    LESS            reduce using rule 31 (var -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 31 (var -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 31 (var -> LOCAL_VAR .)
    EQUAL           reduce using rule 31 (var -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 31 (var -> LOCAL_VAR .)
    COMPARE         reduce using rule 31 (var -> LOCAL_VAR .)
    PLUS            reduce using rule 31 (var -> LOCAL_VAR .)
    MINUS           reduce using rule 31 (var -> LOCAL_VAR .)
    MULTIPLY        reduce using rule 31 (var -> LOCAL_VAR .)
    DIVIDE          reduce using rule 31 (var -> LOCAL_VAR .)
    MODULO          reduce using rule 31 (var -> LOCAL_VAR .)
    EXPONENT        reduce using rule 31 (var -> LOCAL_VAR .)
    RBRACE          reduce using rule 31 (var -> LOCAL_VAR .)
    END             reduce using rule 31 (var -> LOCAL_VAR .)
    RIGHTPAR        reduce using rule 31 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 31 (var -> LOCAL_VAR .)
    SPACE           reduce using rule 31 (var -> LOCAL_VAR .)
    AND             reduce using rule 31 (var -> LOCAL_VAR .)
    OR              reduce using rule 31 (var -> LOCAL_VAR .)
    AND_RESERVED    reduce using rule 31 (var -> LOCAL_VAR .)
    OR_RESERVED     reduce using rule 31 (var -> LOCAL_VAR .)
    COLON           reduce using rule 31 (var -> LOCAL_VAR .)


state 60

    (38) gets -> GETS DOT . CHOMP DOT TO_F
    (39) gets -> GETS DOT . CHOMP DOT TO_I
    (40) gets -> GETS DOT . CHOMP

    CHOMP           shift and go to state 124


state 61

    (56) acceder_arreglo -> var_arreglo LEFT_COR . INTEGER RIGHT_COR

    INTEGER         shift and go to state 125


state 62

    (79) hash_operations -> hash_access ASSIGN . value
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    value                          shift and go to state 126
    var                            shift and go to state 54
    num                            shift and go to state 55

state 63

    (117) set_operations -> set_operations set_binary_operators . set_expression
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR

    SET             shift and go to state 38

    set_expression                 shift and go to state 127

state 64

    (119) set_binary_operators -> PLUS .

    SET             reduce using rule 119 (set_binary_operators -> PLUS .)


state 65

    (120) set_binary_operators -> MINUS .

    SET             reduce using rule 120 (set_binary_operators -> MINUS .)


state 66

    (121) set_binary_operators -> AMPERSAND .

    SET             reduce using rule 121 (set_binary_operators -> AMPERSAND .)


state 67

    (122) set_binary_operators -> PIPE .

    SET             reduce using rule 122 (set_binary_operators -> PIPE .)


state 68

    (123) set_binary_operators -> CARET .

    SET             reduce using rule 123 (set_binary_operators -> CARET .)


state 69

    (87) method_call -> var LEFTPAR . values RIGHTPAR
    (88) method_call -> var LEFTPAR . RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    RIGHTPAR        shift and go to state 129
    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    var                            shift and go to state 54
    values                         shift and go to state 128
    value                          shift and go to state 53
    num                            shift and go to state 55

state 70

    (130) arithmetic_production -> var arithmetic_operators . arithmetic_production
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    var                            shift and go to state 130
    arithmetic_production          shift and go to state 131
    num                            shift and go to state 31

state 71

    (55) var_arreglo -> var ASSIGN . array
    (80) variable_declaration -> var ASSIGN . value
    (81) store_conditional_result -> var ASSIGN . condiciones
    (42) array -> . array_explicito
    (43) array -> . array_implicito
    (44) array -> . array_creation
    (45) array -> . newArray
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 47
    ARRAY           shift and go to state 48
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    var                            shift and go to state 132
    array                          shift and go to state 133
    value                          shift and go to state 134
    condiciones                    shift and go to state 135
    array_explicito                shift and go to state 32
    array_implicito                shift and go to state 33
    array_creation                 shift and go to state 34
    newArray                       shift and go to state 35
    num                            shift and go to state 136
    condicion                      shift and go to state 89

state 72

    (78) hash_access -> var LEFT_COR . value RIGHT_COR
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    var                            shift and go to state 54
    value                          shift and go to state 137
    num                            shift and go to state 55

state 73

    (131) arithmetic_operators -> PLUS .

    FLOAT           reduce using rule 131 (arithmetic_operators -> PLUS .)
    INTEGER         reduce using rule 131 (arithmetic_operators -> PLUS .)
    LOCAL_VAR       reduce using rule 131 (arithmetic_operators -> PLUS .)
    INSTANCE_VAR    reduce using rule 131 (arithmetic_operators -> PLUS .)
    CLASS_VAR       reduce using rule 131 (arithmetic_operators -> PLUS .)
    GLOBAL_VAR      reduce using rule 131 (arithmetic_operators -> PLUS .)
    CONSTANT        reduce using rule 131 (arithmetic_operators -> PLUS .)


state 74

    (132) arithmetic_operators -> MINUS .

    FLOAT           reduce using rule 132 (arithmetic_operators -> MINUS .)
    INTEGER         reduce using rule 132 (arithmetic_operators -> MINUS .)
    LOCAL_VAR       reduce using rule 132 (arithmetic_operators -> MINUS .)
    INSTANCE_VAR    reduce using rule 132 (arithmetic_operators -> MINUS .)
    CLASS_VAR       reduce using rule 132 (arithmetic_operators -> MINUS .)
    GLOBAL_VAR      reduce using rule 132 (arithmetic_operators -> MINUS .)
    CONSTANT        reduce using rule 132 (arithmetic_operators -> MINUS .)


state 75

    (133) arithmetic_operators -> MULTIPLY .

    FLOAT           reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    INTEGER         reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    LOCAL_VAR       reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    INSTANCE_VAR    reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    CLASS_VAR       reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    GLOBAL_VAR      reduce using rule 133 (arithmetic_operators -> MULTIPLY .)
    CONSTANT        reduce using rule 133 (arithmetic_operators -> MULTIPLY .)


state 76

    (134) arithmetic_operators -> DIVIDE .

    FLOAT           reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    INTEGER         reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    LOCAL_VAR       reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    INSTANCE_VAR    reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    CLASS_VAR       reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 134 (arithmetic_operators -> DIVIDE .)
    CONSTANT        reduce using rule 134 (arithmetic_operators -> DIVIDE .)


state 77

    (135) arithmetic_operators -> MODULO .

    FLOAT           reduce using rule 135 (arithmetic_operators -> MODULO .)
    INTEGER         reduce using rule 135 (arithmetic_operators -> MODULO .)
    LOCAL_VAR       reduce using rule 135 (arithmetic_operators -> MODULO .)
    INSTANCE_VAR    reduce using rule 135 (arithmetic_operators -> MODULO .)
    CLASS_VAR       reduce using rule 135 (arithmetic_operators -> MODULO .)
    GLOBAL_VAR      reduce using rule 135 (arithmetic_operators -> MODULO .)
    CONSTANT        reduce using rule 135 (arithmetic_operators -> MODULO .)


state 78

    (136) arithmetic_operators -> EXPONENT .

    FLOAT           reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    INTEGER         reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    LOCAL_VAR       reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    INSTANCE_VAR    reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    CLASS_VAR       reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    GLOBAL_VAR      reduce using rule 136 (arithmetic_operators -> EXPONENT .)
    CONSTANT        reduce using rule 136 (arithmetic_operators -> EXPONENT .)


state 79

    (143) proc_assignment -> LOCAL_VAR ASSIGN . proc_expression
    (118) declare_data_structures -> LOCAL_VAR ASSIGN . set_expression
    (142) proc_expression -> . PROC DOT NEW block_expression
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR

    PROC            shift and go to state 140
    SET             shift and go to state 38

    proc_expression                shift and go to state 138
    set_expression                 shift and go to state 139

state 80

    (144) proc_call -> LOCAL_VAR DOT . CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> LOCAL_VAR DOT . LEFTPAR values RIGHTPAR

    CALL            shift and go to state 141
    LEFTPAR         shift and go to state 142


state 81

    (146) proc_call -> LOCAL_VAR LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 143
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 82

    (46) array_explicito -> LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 144


state 83

    (47) array_explicito -> LEFT_COR RIGHT_COR .

    $end            reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)
    RIGHTPAR        reduce using rule 47 (array_explicito -> LEFT_COR RIGHT_COR .)


state 84

    (129) arithmetic_production -> num arithmetic_operators . arithmetic_production
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    num                            shift and go to state 31
    arithmetic_production          shift and go to state 145
    var                            shift and go to state 130

state 85

    (76) hash_declaration -> HASH LEFT_COR . values RIGHT_COR
    (77) hash_declaration -> HASH LEFT_COR . RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    RIGHT_COR       shift and go to state 147
    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 146
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 86

    (114) set_expression -> SET DOT . NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    NEW             shift and go to state 148


state 87

    (115) set_expression -> SET LEFT_COR . values RIGHT_COR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 149
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 88

    (57) ifStatement -> IF condiciones . NEWLINE codigo END_LOWER
    (58) ifStatement -> IF condiciones . NEWLINE codigo NEWLINE else_statement END_LOWER
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

    NEWLINE         shift and go to state 150
    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

    conectores                     shift and go to state 151

state 89

    (59) condiciones -> condicion .

    NEWLINE         reduce using rule 59 (condiciones -> condicion .)
    AND             reduce using rule 59 (condiciones -> condicion .)
    OR              reduce using rule 59 (condiciones -> condicion .)
    AND_RESERVED    reduce using rule 59 (condiciones -> condicion .)
    OR_RESERVED     reduce using rule 59 (condiciones -> condicion .)
    COLON           reduce using rule 59 (condiciones -> condicion .)
    $end            reduce using rule 59 (condiciones -> condicion .)
    END_LOWER       reduce using rule 59 (condiciones -> condicion .)
    RBRACE          reduce using rule 59 (condiciones -> condicion .)
    END             reduce using rule 59 (condiciones -> condicion .)
    ELSE            reduce using rule 59 (condiciones -> condicion .)


state 90

    (65) condicion -> num . operComp num
    (67) condicion -> num . operComp var
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 156

state 91

    (66) condicion -> var . operComp num
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 164

state 92

    (85) while_statement -> WHILE condiciones . COLON codigo
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

    COLON           shift and go to state 165
    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

    conectores                     shift and go to state 151

state 93

    (124) unless_expression -> UNLESS boolean_expression . THEN expresion END
    (125) unless_expression -> UNLESS boolean_expression . THEN expresion ELSE expresion END

    THEN            shift and go to state 166


state 94

    (90) boolean_expression -> expression . GREATER expression
    (91) boolean_expression -> expression . LESS expression
    (92) boolean_expression -> expression . GREATER_EQUAL expression
    (93) boolean_expression -> expression . LESS_EQUAL expression
    (94) boolean_expression -> expression . EQUAL expression
    (95) boolean_expression -> expression . NOT_EQUAL expression

    GREATER         shift and go to state 167
    LESS            shift and go to state 168
    GREATER_EQUAL   shift and go to state 169
    LESS_EQUAL      shift and go to state 170
    EQUAL           shift and go to state 171
    NOT_EQUAL       shift and go to state 172


state 95

    (96) boolean_expression -> boolean_value .

    THEN            reduce using rule 96 (boolean_expression -> boolean_value .)


state 96

    (99) expression -> INTEGER .

    GREATER         reduce using rule 99 (expression -> INTEGER .)
    LESS            reduce using rule 99 (expression -> INTEGER .)
    GREATER_EQUAL   reduce using rule 99 (expression -> INTEGER .)
    LESS_EQUAL      reduce using rule 99 (expression -> INTEGER .)
    EQUAL           reduce using rule 99 (expression -> INTEGER .)
    NOT_EQUAL       reduce using rule 99 (expression -> INTEGER .)
    THEN            reduce using rule 99 (expression -> INTEGER .)


state 97

    (100) expression -> FLOAT .

    GREATER         reduce using rule 100 (expression -> FLOAT .)
    LESS            reduce using rule 100 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 100 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 100 (expression -> FLOAT .)
    EQUAL           reduce using rule 100 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 100 (expression -> FLOAT .)
    THEN            reduce using rule 100 (expression -> FLOAT .)


state 98

    (101) expression -> variable .

    GREATER         reduce using rule 101 (expression -> variable .)
    LESS            reduce using rule 101 (expression -> variable .)
    GREATER_EQUAL   reduce using rule 101 (expression -> variable .)
    LESS_EQUAL      reduce using rule 101 (expression -> variable .)
    EQUAL           reduce using rule 101 (expression -> variable .)
    NOT_EQUAL       reduce using rule 101 (expression -> variable .)
    THEN            reduce using rule 101 (expression -> variable .)


state 99

    (102) expression -> STRING .

    GREATER         reduce using rule 102 (expression -> STRING .)
    LESS            reduce using rule 102 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 102 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 102 (expression -> STRING .)
    EQUAL           reduce using rule 102 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 102 (expression -> STRING .)
    THEN            reduce using rule 102 (expression -> STRING .)


state 100

    (97) boolean_value -> TRUE .

    THEN            reduce using rule 97 (boolean_value -> TRUE .)


state 101

    (98) boolean_value -> FALSE .

    THEN            reduce using rule 98 (boolean_value -> FALSE .)


state 102

    (103) variable -> LOCAL_VAR .

    GREATER         reduce using rule 103 (variable -> LOCAL_VAR .)
    LESS            reduce using rule 103 (variable -> LOCAL_VAR .)
    GREATER_EQUAL   reduce using rule 103 (variable -> LOCAL_VAR .)
    LESS_EQUAL      reduce using rule 103 (variable -> LOCAL_VAR .)
    EQUAL           reduce using rule 103 (variable -> LOCAL_VAR .)
    NOT_EQUAL       reduce using rule 103 (variable -> LOCAL_VAR .)
    THEN            reduce using rule 103 (variable -> LOCAL_VAR .)


state 103

    (104) variable -> INSTANCE_VAR .

    GREATER         reduce using rule 104 (variable -> INSTANCE_VAR .)
    LESS            reduce using rule 104 (variable -> INSTANCE_VAR .)
    GREATER_EQUAL   reduce using rule 104 (variable -> INSTANCE_VAR .)
    LESS_EQUAL      reduce using rule 104 (variable -> INSTANCE_VAR .)
    EQUAL           reduce using rule 104 (variable -> INSTANCE_VAR .)
    NOT_EQUAL       reduce using rule 104 (variable -> INSTANCE_VAR .)
    THEN            reduce using rule 104 (variable -> INSTANCE_VAR .)


state 104

    (105) variable -> CLASS_VAR .

    GREATER         reduce using rule 105 (variable -> CLASS_VAR .)
    LESS            reduce using rule 105 (variable -> CLASS_VAR .)
    GREATER_EQUAL   reduce using rule 105 (variable -> CLASS_VAR .)
    LESS_EQUAL      reduce using rule 105 (variable -> CLASS_VAR .)
    EQUAL           reduce using rule 105 (variable -> CLASS_VAR .)
    NOT_EQUAL       reduce using rule 105 (variable -> CLASS_VAR .)
    THEN            reduce using rule 105 (variable -> CLASS_VAR .)


state 105

    (106) variable -> GLOBAL_VAR .

    GREATER         reduce using rule 106 (variable -> GLOBAL_VAR .)
    LESS            reduce using rule 106 (variable -> GLOBAL_VAR .)
    GREATER_EQUAL   reduce using rule 106 (variable -> GLOBAL_VAR .)
    LESS_EQUAL      reduce using rule 106 (variable -> GLOBAL_VAR .)
    EQUAL           reduce using rule 106 (variable -> GLOBAL_VAR .)
    NOT_EQUAL       reduce using rule 106 (variable -> GLOBAL_VAR .)
    THEN            reduce using rule 106 (variable -> GLOBAL_VAR .)


state 106

    (107) variable -> CONSTANT .

    GREATER         reduce using rule 107 (variable -> CONSTANT .)
    LESS            reduce using rule 107 (variable -> CONSTANT .)
    GREATER_EQUAL   reduce using rule 107 (variable -> CONSTANT .)
    LESS_EQUAL      reduce using rule 107 (variable -> CONSTANT .)
    EQUAL           reduce using rule 107 (variable -> CONSTANT .)
    NOT_EQUAL       reduce using rule 107 (variable -> CONSTANT .)
    THEN            reduce using rule 107 (variable -> CONSTANT .)


state 107

    (48) array_implicito -> PERCENTW LEFT_COR . values_space RIGHT_COR
    (49) array_implicito -> PERCENTW LEFT_COR . RIGHT_COR
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    RIGHT_COR       shift and go to state 174
    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values_space                   shift and go to state 173
    value                          shift and go to state 175
    var                            shift and go to state 54
    num                            shift and go to state 55

state 108

    (50) array_creation -> ARRAY LEFTPAR . array_explicito RIGHTPAR
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 27

    array_explicito                shift and go to state 176

state 109

    (51) newArray -> ARRAY DOT . NEW
    (52) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    NEW             shift and go to state 177


state 110

    (137) block_expression -> LBRACE expresion . RBRACE

    RBRACE          shift and go to state 178


state 111

    (139) block_expression -> LBRACE PIPE . LOCAL_VAR PIPE expresion RBRACE

    LOCAL_VAR       shift and go to state 179


state 112

    (111) expresion -> puts .

    RBRACE          reduce using rule 111 (expresion -> puts .)
    END             reduce using rule 111 (expresion -> puts .)
    ELSE            reduce using rule 111 (expresion -> puts .)


state 113

    (112) expresion -> gets .

    RBRACE          reduce using rule 112 (expresion -> gets .)
    END             reduce using rule 112 (expresion -> gets .)
    ELSE            reduce using rule 112 (expresion -> gets .)


state 114

    (113) expresion -> print_statement .

    RBRACE          reduce using rule 113 (expresion -> print_statement .)
    END             reduce using rule 113 (expresion -> print_statement .)
    ELSE            reduce using rule 113 (expresion -> print_statement .)


state 115

    (126) expresion -> arithmetic_production .

    RBRACE          reduce using rule 126 (expresion -> arithmetic_production .)
    END             reduce using rule 126 (expresion -> arithmetic_production .)
    ELSE            reduce using rule 126 (expresion -> arithmetic_production .)


state 116

    (147) expresion -> condition_with_connectors .

    RBRACE          reduce using rule 147 (expresion -> condition_with_connectors .)
    END             reduce using rule 147 (expresion -> condition_with_connectors .)
    ELSE            reduce using rule 147 (expresion -> condition_with_connectors .)


state 117

    (41) puts -> PUT . values
    (89) print_statement -> PUT . LEFTPAR values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    LEFTPAR         shift and go to state 180
    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 52
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 118

    (127) arithmetic_production -> num .
    (129) arithmetic_production -> num . arithmetic_operators arithmetic_production
    (65) condicion -> num . operComp num
    (67) condicion -> num . operComp var
    (131) arithmetic_operators -> . PLUS
    (132) arithmetic_operators -> . MINUS
    (133) arithmetic_operators -> . MULTIPLY
    (134) arithmetic_operators -> . DIVIDE
    (135) arithmetic_operators -> . MODULO
    (136) arithmetic_operators -> . EXPONENT
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    RBRACE          reduce using rule 127 (arithmetic_production -> num .)
    END             reduce using rule 127 (arithmetic_production -> num .)
    ELSE            reduce using rule 127 (arithmetic_production -> num .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EXPONENT        shift and go to state 78
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    arithmetic_operators           shift and go to state 84
    operComp                       shift and go to state 156

state 119

    (128) arithmetic_production -> var .
    (130) arithmetic_production -> var . arithmetic_operators arithmetic_production
    (66) condicion -> var . operComp num
    (131) arithmetic_operators -> . PLUS
    (132) arithmetic_operators -> . MINUS
    (133) arithmetic_operators -> . MULTIPLY
    (134) arithmetic_operators -> . DIVIDE
    (135) arithmetic_operators -> . MODULO
    (136) arithmetic_operators -> . EXPONENT
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    RBRACE          reduce using rule 128 (arithmetic_production -> var .)
    END             reduce using rule 128 (arithmetic_production -> var .)
    ELSE            reduce using rule 128 (arithmetic_production -> var .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EXPONENT        shift and go to state 78
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    arithmetic_operators           shift and go to state 70
    operComp                       shift and go to state 164

state 120

    (86) condition_with_connectors -> condiciones . conectores condiciones
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

    conectores                     shift and go to state 181

state 121

    (138) block_expression -> DO expresion . END

    END             shift and go to state 182


state 122

    (140) block_expression -> DO PIPE . LOCAL_VAR PIPE expresion END

    LOCAL_VAR       shift and go to state 183


state 123

    (30) values -> value COMMA . values
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    value                          shift and go to state 53
    values                         shift and go to state 184
    var                            shift and go to state 54
    num                            shift and go to state 55

state 124

    (38) gets -> GETS DOT CHOMP . DOT TO_F
    (39) gets -> GETS DOT CHOMP . DOT TO_I
    (40) gets -> GETS DOT CHOMP .

    DOT             shift and go to state 185
    $end            reduce using rule 40 (gets -> GETS DOT CHOMP .)
    RBRACE          reduce using rule 40 (gets -> GETS DOT CHOMP .)
    END             reduce using rule 40 (gets -> GETS DOT CHOMP .)
    END_LOWER       reduce using rule 40 (gets -> GETS DOT CHOMP .)
    NEWLINE         reduce using rule 40 (gets -> GETS DOT CHOMP .)
    ELSE            reduce using rule 40 (gets -> GETS DOT CHOMP .)


state 125

    (56) acceder_arreglo -> var_arreglo LEFT_COR INTEGER . RIGHT_COR

    RIGHT_COR       shift and go to state 186


state 126

    (79) hash_operations -> hash_access ASSIGN value .

    $end            reduce using rule 79 (hash_operations -> hash_access ASSIGN value .)
    END_LOWER       reduce using rule 79 (hash_operations -> hash_access ASSIGN value .)
    NEWLINE         reduce using rule 79 (hash_operations -> hash_access ASSIGN value .)


state 127

    (117) set_operations -> set_operations set_binary_operators set_expression .

    PLUS            reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    MINUS           reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    AMPERSAND       reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    PIPE            reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    CARET           reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    $end            reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    END_LOWER       reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)
    NEWLINE         reduce using rule 117 (set_operations -> set_operations set_binary_operators set_expression .)


state 128

    (87) method_call -> var LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 187


state 129

    (88) method_call -> var LEFTPAR RIGHTPAR .

    LBRACE          reduce using rule 88 (method_call -> var LEFTPAR RIGHTPAR .)
    DO              reduce using rule 88 (method_call -> var LEFTPAR RIGHTPAR .)
    $end            reduce using rule 88 (method_call -> var LEFTPAR RIGHTPAR .)
    END_LOWER       reduce using rule 88 (method_call -> var LEFTPAR RIGHTPAR .)
    NEWLINE         reduce using rule 88 (method_call -> var LEFTPAR RIGHTPAR .)


state 130

    (128) arithmetic_production -> var .
    (130) arithmetic_production -> var . arithmetic_operators arithmetic_production
    (131) arithmetic_operators -> . PLUS
    (132) arithmetic_operators -> . MINUS
    (133) arithmetic_operators -> . MULTIPLY
    (134) arithmetic_operators -> . DIVIDE
    (135) arithmetic_operators -> . MODULO
    (136) arithmetic_operators -> . EXPONENT

    $end            reduce using rule 128 (arithmetic_production -> var .)
    RBRACE          reduce using rule 128 (arithmetic_production -> var .)
    END             reduce using rule 128 (arithmetic_production -> var .)
    END_LOWER       reduce using rule 128 (arithmetic_production -> var .)
    NEWLINE         reduce using rule 128 (arithmetic_production -> var .)
    ELSE            reduce using rule 128 (arithmetic_production -> var .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULO          shift and go to state 77
    EXPONENT        shift and go to state 78

    arithmetic_operators           shift and go to state 70

state 131

    (130) arithmetic_production -> var arithmetic_operators arithmetic_production .

    $end            reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)
    RBRACE          reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)
    END             reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)
    ELSE            reduce using rule 130 (arithmetic_production -> var arithmetic_operators arithmetic_production .)


state 132

    (22) value -> var .
    (66) condicion -> var . operComp num
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    $end            reduce using rule 22 (value -> var .)
    END_LOWER       reduce using rule 22 (value -> var .)
    NEWLINE         reduce using rule 22 (value -> var .)
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 164

state 133

    (55) var_arreglo -> var ASSIGN array .

    LEFT_COR        reduce using rule 55 (var_arreglo -> var ASSIGN array .)
    $end            reduce using rule 55 (var_arreglo -> var ASSIGN array .)
    END_LOWER       reduce using rule 55 (var_arreglo -> var ASSIGN array .)
    NEWLINE         reduce using rule 55 (var_arreglo -> var ASSIGN array .)


state 134

    (80) variable_declaration -> var ASSIGN value .

    $end            reduce using rule 80 (variable_declaration -> var ASSIGN value .)
    END_LOWER       reduce using rule 80 (variable_declaration -> var ASSIGN value .)
    NEWLINE         reduce using rule 80 (variable_declaration -> var ASSIGN value .)


state 135

    (81) store_conditional_result -> var ASSIGN condiciones .
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

    $end            reduce using rule 81 (store_conditional_result -> var ASSIGN condiciones .)
    END_LOWER       reduce using rule 81 (store_conditional_result -> var ASSIGN condiciones .)
    NEWLINE         reduce using rule 81 (store_conditional_result -> var ASSIGN condiciones .)
    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

    conectores                     shift and go to state 151

state 136

    (23) value -> num .
    (65) condicion -> num . operComp num
    (67) condicion -> num . operComp var
    (68) operComp -> . GREATER
    (69) operComp -> . LESS
    (70) operComp -> . GREATER_EQUAL
    (71) operComp -> . LESS_EQUAL
    (72) operComp -> . EQUAL
    (73) operComp -> . NOT_EQUAL
    (74) operComp -> . COMPARE

    $end            reduce using rule 23 (value -> num .)
    END_LOWER       reduce using rule 23 (value -> num .)
    NEWLINE         reduce using rule 23 (value -> num .)
    GREATER         shift and go to state 157
    LESS            shift and go to state 158
    GREATER_EQUAL   shift and go to state 159
    LESS_EQUAL      shift and go to state 160
    EQUAL           shift and go to state 161
    NOT_EQUAL       shift and go to state 162
    COMPARE         shift and go to state 163

    operComp                       shift and go to state 156

state 137

    (78) hash_access -> var LEFT_COR value . RIGHT_COR

    RIGHT_COR       shift and go to state 188


state 138

    (143) proc_assignment -> LOCAL_VAR ASSIGN proc_expression .

    $end            reduce using rule 143 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    END_LOWER       reduce using rule 143 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)
    NEWLINE         reduce using rule 143 (proc_assignment -> LOCAL_VAR ASSIGN proc_expression .)


state 139

    (118) declare_data_structures -> LOCAL_VAR ASSIGN set_expression .

    $end            reduce using rule 118 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    END_LOWER       reduce using rule 118 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)
    NEWLINE         reduce using rule 118 (declare_data_structures -> LOCAL_VAR ASSIGN set_expression .)


state 140

    (142) proc_expression -> PROC . DOT NEW block_expression

    DOT             shift and go to state 189


state 141

    (144) proc_call -> LOCAL_VAR DOT CALL . LEFTPAR values RIGHTPAR

    LEFTPAR         shift and go to state 190


state 142

    (145) proc_call -> LOCAL_VAR DOT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 191
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 143

    (146) proc_call -> LOCAL_VAR LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 192


state 144

    (46) array_explicito -> LEFT_COR values RIGHT_COR .

    $end            reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    LEFT_COR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)
    RIGHTPAR        reduce using rule 46 (array_explicito -> LEFT_COR values RIGHT_COR .)


state 145

    (129) arithmetic_production -> num arithmetic_operators arithmetic_production .

    $end            reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    RBRACE          reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    END             reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    END_LOWER       reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    NEWLINE         reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)
    ELSE            reduce using rule 129 (arithmetic_production -> num arithmetic_operators arithmetic_production .)


state 146

    (76) hash_declaration -> HASH LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 193


state 147

    (77) hash_declaration -> HASH LEFT_COR RIGHT_COR .

    $end            reduce using rule 77 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 77 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 77 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)


state 148

    (114) set_expression -> SET DOT NEW . LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR

    LEFTPAR         shift and go to state 194


state 149

    (115) set_expression -> SET LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 195


state 150

    (57) ifStatement -> IF condiciones NEWLINE . codigo END_LOWER
    (58) ifStatement -> IF condiciones NEWLINE . codigo NEWLINE else_statement END_LOWER
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . arithmetic_production
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (11) estructurasDatos -> . array
    (12) estructurasDatos -> . var_arreglo
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (87) method_call -> . var LEFTPAR values RIGHTPAR
    (88) method_call -> . var LEFTPAR RIGHTPAR
    (141) block_assignment -> . method_call block_expression
    (143) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (144) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (146) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (108) declaraciones -> . variable_declaration
    (109) declaraciones -> . store_conditional_result
    (110) declaraciones -> . declare_data_structures
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (42) array -> . array_explicito
    (43) array -> . array_implicito
    (44) array -> . array_creation
    (45) array -> . newArray
    (54) var_arreglo -> . var
    (55) var_arreglo -> . var ASSIGN array
    (56) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (76) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (77) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (78) hash_access -> . var LEFT_COR value RIGHT_COR
    (79) hash_operations -> . hash_access ASSIGN value
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR
    (116) set_operations -> . set_expression
    (117) set_operations -> . set_operations set_binary_operators set_expression
    (57) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (58) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (85) while_statement -> . WHILE condiciones COLON codigo
    (124) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (125) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (80) variable_declaration -> . var ASSIGN value
    (81) store_conditional_result -> . var ASSIGN condiciones
    (82) declare_data_structures -> . variable_declaration
    (83) declare_data_structures -> . array
    (84) declare_data_structures -> . hash_declaration
    (118) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 12
    GETS            shift and go to state 13
    LOCAL_VAR       shift and go to state 26
    HASH            shift and go to state 37
    SET             shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    UNLESS          shift and go to state 41
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 47
    ARRAY           shift and go to state 48

    codigo                         shift and go to state 196
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    arithmetic_production          shift and go to state 11
    array                          shift and go to state 14
    var_arreglo                    shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    num                            shift and go to state 31
    array_explicito                shift and go to state 32
    array_implicito                shift and go to state 33
    array_creation                 shift and go to state 34
    newArray                       shift and go to state 35

state 151

    (60) condiciones -> condiciones conectores . condiciones
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    condiciones                    shift and go to state 197
    condicion                      shift and go to state 89
    num                            shift and go to state 90
    var                            shift and go to state 91

state 152

    (61) conectores -> AND .

    FLOAT           reduce using rule 61 (conectores -> AND .)
    INTEGER         reduce using rule 61 (conectores -> AND .)
    LOCAL_VAR       reduce using rule 61 (conectores -> AND .)
    INSTANCE_VAR    reduce using rule 61 (conectores -> AND .)
    CLASS_VAR       reduce using rule 61 (conectores -> AND .)
    GLOBAL_VAR      reduce using rule 61 (conectores -> AND .)
    CONSTANT        reduce using rule 61 (conectores -> AND .)


state 153

    (62) conectores -> OR .

    FLOAT           reduce using rule 62 (conectores -> OR .)
    INTEGER         reduce using rule 62 (conectores -> OR .)
    LOCAL_VAR       reduce using rule 62 (conectores -> OR .)
    INSTANCE_VAR    reduce using rule 62 (conectores -> OR .)
    CLASS_VAR       reduce using rule 62 (conectores -> OR .)
    GLOBAL_VAR      reduce using rule 62 (conectores -> OR .)
    CONSTANT        reduce using rule 62 (conectores -> OR .)


state 154

    (63) conectores -> AND_RESERVED .

    FLOAT           reduce using rule 63 (conectores -> AND_RESERVED .)
    INTEGER         reduce using rule 63 (conectores -> AND_RESERVED .)
    LOCAL_VAR       reduce using rule 63 (conectores -> AND_RESERVED .)
    INSTANCE_VAR    reduce using rule 63 (conectores -> AND_RESERVED .)
    CLASS_VAR       reduce using rule 63 (conectores -> AND_RESERVED .)
    GLOBAL_VAR      reduce using rule 63 (conectores -> AND_RESERVED .)
    CONSTANT        reduce using rule 63 (conectores -> AND_RESERVED .)


state 155

    (64) conectores -> OR_RESERVED .

    FLOAT           reduce using rule 64 (conectores -> OR_RESERVED .)
    INTEGER         reduce using rule 64 (conectores -> OR_RESERVED .)
    LOCAL_VAR       reduce using rule 64 (conectores -> OR_RESERVED .)
    INSTANCE_VAR    reduce using rule 64 (conectores -> OR_RESERVED .)
    CLASS_VAR       reduce using rule 64 (conectores -> OR_RESERVED .)
    GLOBAL_VAR      reduce using rule 64 (conectores -> OR_RESERVED .)
    CONSTANT        reduce using rule 64 (conectores -> OR_RESERVED .)


state 156

    (65) condicion -> num operComp . num
    (67) condicion -> num operComp . var
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    num                            shift and go to state 198
    var                            shift and go to state 199

state 157

    (68) operComp -> GREATER .

    FLOAT           reduce using rule 68 (operComp -> GREATER .)
    INTEGER         reduce using rule 68 (operComp -> GREATER .)
    LOCAL_VAR       reduce using rule 68 (operComp -> GREATER .)
    INSTANCE_VAR    reduce using rule 68 (operComp -> GREATER .)
    CLASS_VAR       reduce using rule 68 (operComp -> GREATER .)
    GLOBAL_VAR      reduce using rule 68 (operComp -> GREATER .)
    CONSTANT        reduce using rule 68 (operComp -> GREATER .)


state 158

    (69) operComp -> LESS .

    FLOAT           reduce using rule 69 (operComp -> LESS .)
    INTEGER         reduce using rule 69 (operComp -> LESS .)
    LOCAL_VAR       reduce using rule 69 (operComp -> LESS .)
    INSTANCE_VAR    reduce using rule 69 (operComp -> LESS .)
    CLASS_VAR       reduce using rule 69 (operComp -> LESS .)
    GLOBAL_VAR      reduce using rule 69 (operComp -> LESS .)
    CONSTANT        reduce using rule 69 (operComp -> LESS .)


state 159

    (70) operComp -> GREATER_EQUAL .

    FLOAT           reduce using rule 70 (operComp -> GREATER_EQUAL .)
    INTEGER         reduce using rule 70 (operComp -> GREATER_EQUAL .)
    LOCAL_VAR       reduce using rule 70 (operComp -> GREATER_EQUAL .)
    INSTANCE_VAR    reduce using rule 70 (operComp -> GREATER_EQUAL .)
    CLASS_VAR       reduce using rule 70 (operComp -> GREATER_EQUAL .)
    GLOBAL_VAR      reduce using rule 70 (operComp -> GREATER_EQUAL .)
    CONSTANT        reduce using rule 70 (operComp -> GREATER_EQUAL .)


state 160

    (71) operComp -> LESS_EQUAL .

    FLOAT           reduce using rule 71 (operComp -> LESS_EQUAL .)
    INTEGER         reduce using rule 71 (operComp -> LESS_EQUAL .)
    LOCAL_VAR       reduce using rule 71 (operComp -> LESS_EQUAL .)
    INSTANCE_VAR    reduce using rule 71 (operComp -> LESS_EQUAL .)
    CLASS_VAR       reduce using rule 71 (operComp -> LESS_EQUAL .)
    GLOBAL_VAR      reduce using rule 71 (operComp -> LESS_EQUAL .)
    CONSTANT        reduce using rule 71 (operComp -> LESS_EQUAL .)


state 161

    (72) operComp -> EQUAL .

    FLOAT           reduce using rule 72 (operComp -> EQUAL .)
    INTEGER         reduce using rule 72 (operComp -> EQUAL .)
    LOCAL_VAR       reduce using rule 72 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 72 (operComp -> EQUAL .)
    CLASS_VAR       reduce using rule 72 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 72 (operComp -> EQUAL .)
    CONSTANT        reduce using rule 72 (operComp -> EQUAL .)


state 162

    (73) operComp -> NOT_EQUAL .

    FLOAT           reduce using rule 73 (operComp -> NOT_EQUAL .)
    INTEGER         reduce using rule 73 (operComp -> NOT_EQUAL .)
    LOCAL_VAR       reduce using rule 73 (operComp -> NOT_EQUAL .)
    INSTANCE_VAR    reduce using rule 73 (operComp -> NOT_EQUAL .)
    CLASS_VAR       reduce using rule 73 (operComp -> NOT_EQUAL .)
    GLOBAL_VAR      reduce using rule 73 (operComp -> NOT_EQUAL .)
    CONSTANT        reduce using rule 73 (operComp -> NOT_EQUAL .)


state 163

    (74) operComp -> COMPARE .

    FLOAT           reduce using rule 74 (operComp -> COMPARE .)
    INTEGER         reduce using rule 74 (operComp -> COMPARE .)
    LOCAL_VAR       reduce using rule 74 (operComp -> COMPARE .)
    INSTANCE_VAR    reduce using rule 74 (operComp -> COMPARE .)
    CLASS_VAR       reduce using rule 74 (operComp -> COMPARE .)
    GLOBAL_VAR      reduce using rule 74 (operComp -> COMPARE .)
    CONSTANT        reduce using rule 74 (operComp -> COMPARE .)


state 164

    (66) condicion -> var operComp . num
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    num                            shift and go to state 200

state 165

    (85) while_statement -> WHILE condiciones COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . arithmetic_production
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (11) estructurasDatos -> . array
    (12) estructurasDatos -> . var_arreglo
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (87) method_call -> . var LEFTPAR values RIGHTPAR
    (88) method_call -> . var LEFTPAR RIGHTPAR
    (141) block_assignment -> . method_call block_expression
    (143) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (144) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (146) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (108) declaraciones -> . variable_declaration
    (109) declaraciones -> . store_conditional_result
    (110) declaraciones -> . declare_data_structures
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (42) array -> . array_explicito
    (43) array -> . array_implicito
    (44) array -> . array_creation
    (45) array -> . newArray
    (54) var_arreglo -> . var
    (55) var_arreglo -> . var ASSIGN array
    (56) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (76) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (77) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (78) hash_access -> . var LEFT_COR value RIGHT_COR
    (79) hash_operations -> . hash_access ASSIGN value
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR
    (116) set_operations -> . set_expression
    (117) set_operations -> . set_operations set_binary_operators set_expression
    (57) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (58) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (85) while_statement -> . WHILE condiciones COLON codigo
    (124) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (125) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (80) variable_declaration -> . var ASSIGN value
    (81) store_conditional_result -> . var ASSIGN condiciones
    (82) declare_data_structures -> . variable_declaration
    (83) declare_data_structures -> . array
    (84) declare_data_structures -> . hash_declaration
    (118) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 12
    GETS            shift and go to state 13
    LOCAL_VAR       shift and go to state 26
    HASH            shift and go to state 37
    SET             shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    UNLESS          shift and go to state 41
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 47
    ARRAY           shift and go to state 48

    codigo                         shift and go to state 201
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    arithmetic_production          shift and go to state 11
    array                          shift and go to state 14
    var_arreglo                    shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    num                            shift and go to state 31
    array_explicito                shift and go to state 32
    array_implicito                shift and go to state 33
    array_creation                 shift and go to state 34
    newArray                       shift and go to state 35

state 166

    (124) unless_expression -> UNLESS boolean_expression THEN . expresion END
    (125) unless_expression -> UNLESS boolean_expression THEN . expresion ELSE expresion END
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 202
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 167

    (90) boolean_expression -> expression GREATER . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 203
    variable                       shift and go to state 98

state 168

    (91) boolean_expression -> expression LESS . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 204
    variable                       shift and go to state 98

state 169

    (92) boolean_expression -> expression GREATER_EQUAL . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 205
    variable                       shift and go to state 98

state 170

    (93) boolean_expression -> expression LESS_EQUAL . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 206
    variable                       shift and go to state 98

state 171

    (94) boolean_expression -> expression EQUAL . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 207
    variable                       shift and go to state 98

state 172

    (95) boolean_expression -> expression NOT_EQUAL . expression
    (99) expression -> . INTEGER
    (100) expression -> . FLOAT
    (101) expression -> . variable
    (102) expression -> . STRING
    (103) variable -> . LOCAL_VAR
    (104) variable -> . INSTANCE_VAR
    (105) variable -> . CLASS_VAR
    (106) variable -> . GLOBAL_VAR
    (107) variable -> . CONSTANT

    INTEGER         shift and go to state 96
    FLOAT           shift and go to state 97
    STRING          shift and go to state 99
    LOCAL_VAR       shift and go to state 102
    INSTANCE_VAR    shift and go to state 103
    CLASS_VAR       shift and go to state 104
    GLOBAL_VAR      shift and go to state 105
    CONSTANT        shift and go to state 106

    expression                     shift and go to state 208
    variable                       shift and go to state 98

state 173

    (48) array_implicito -> PERCENTW LEFT_COR values_space . RIGHT_COR

    RIGHT_COR       shift and go to state 209


state 174

    (49) array_implicito -> PERCENTW LEFT_COR RIGHT_COR .

    $end            reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    END_LOWER       reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    NEWLINE         reduce using rule 49 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)


state 175

    (27) values_space -> value . SPACE values_space
    (28) values_space -> value .

    SPACE           shift and go to state 210
    RIGHT_COR       reduce using rule 28 (values_space -> value .)


state 176

    (50) array_creation -> ARRAY LEFTPAR array_explicito . RIGHTPAR

    RIGHTPAR        shift and go to state 211


state 177

    (51) newArray -> ARRAY DOT NEW .
    (52) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER COMMA values RIGHTPAR

    $end            reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFT_COR        reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    END_LOWER       reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    NEWLINE         reduce using rule 51 (newArray -> ARRAY DOT NEW .)
    LEFTPAR         shift and go to state 212


state 178

    (137) block_expression -> LBRACE expresion RBRACE .

    $end            reduce using rule 137 (block_expression -> LBRACE expresion RBRACE .)
    END_LOWER       reduce using rule 137 (block_expression -> LBRACE expresion RBRACE .)
    NEWLINE         reduce using rule 137 (block_expression -> LBRACE expresion RBRACE .)


state 179

    (139) block_expression -> LBRACE PIPE LOCAL_VAR . PIPE expresion RBRACE

    PIPE            shift and go to state 213


state 180

    (89) print_statement -> PUT LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 214
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 181

    (86) condition_with_connectors -> condiciones conectores . condiciones
    (60) condiciones -> condiciones conectores . condiciones
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT

    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    condiciones                    shift and go to state 215
    condicion                      shift and go to state 89
    num                            shift and go to state 90
    var                            shift and go to state 91

state 182

    (138) block_expression -> DO expresion END .

    $end            reduce using rule 138 (block_expression -> DO expresion END .)
    END_LOWER       reduce using rule 138 (block_expression -> DO expresion END .)
    NEWLINE         reduce using rule 138 (block_expression -> DO expresion END .)


state 183

    (140) block_expression -> DO PIPE LOCAL_VAR . PIPE expresion END

    PIPE            shift and go to state 216


state 184

    (30) values -> value COMMA values .

    $end            reduce using rule 30 (values -> value COMMA values .)
    END_LOWER       reduce using rule 30 (values -> value COMMA values .)
    NEWLINE         reduce using rule 30 (values -> value COMMA values .)
    RIGHT_COR       reduce using rule 30 (values -> value COMMA values .)
    RIGHTPAR        reduce using rule 30 (values -> value COMMA values .)
    RBRACE          reduce using rule 30 (values -> value COMMA values .)
    END             reduce using rule 30 (values -> value COMMA values .)
    ELSE            reduce using rule 30 (values -> value COMMA values .)


state 185

    (38) gets -> GETS DOT CHOMP DOT . TO_F
    (39) gets -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 217
    TO_I            shift and go to state 218


state 186

    (56) acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .

    $end            reduce using rule 56 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    END_LOWER       reduce using rule 56 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    NEWLINE         reduce using rule 56 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)


state 187

    (87) method_call -> var LEFTPAR values RIGHTPAR .

    LBRACE          reduce using rule 87 (method_call -> var LEFTPAR values RIGHTPAR .)
    DO              reduce using rule 87 (method_call -> var LEFTPAR values RIGHTPAR .)
    $end            reduce using rule 87 (method_call -> var LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 87 (method_call -> var LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 87 (method_call -> var LEFTPAR values RIGHTPAR .)


state 188

    (78) hash_access -> var LEFT_COR value RIGHT_COR .

    ASSIGN          reduce using rule 78 (hash_access -> var LEFT_COR value RIGHT_COR .)
    $end            reduce using rule 78 (hash_access -> var LEFT_COR value RIGHT_COR .)
    END_LOWER       reduce using rule 78 (hash_access -> var LEFT_COR value RIGHT_COR .)
    NEWLINE         reduce using rule 78 (hash_access -> var LEFT_COR value RIGHT_COR .)


state 189

    (142) proc_expression -> PROC DOT . NEW block_expression

    NEW             shift and go to state 219


state 190

    (144) proc_call -> LOCAL_VAR DOT CALL LEFTPAR . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 220
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 191

    (145) proc_call -> LOCAL_VAR DOT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 221


state 192

    (146) proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .

    $end            reduce using rule 146 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 146 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 146 (proc_call -> LOCAL_VAR LEFT_COR values RIGHT_COR .)


state 193

    (76) hash_declaration -> HASH LEFT_COR values RIGHT_COR .

    $end            reduce using rule 76 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 76 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 76 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)


state 194

    (114) set_expression -> SET DOT NEW LEFTPAR . LEFT_COR values RIGHT_COR RIGHTPAR

    LEFT_COR        shift and go to state 222


state 195

    (115) set_expression -> SET LEFT_COR values RIGHT_COR .

    $end            reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PLUS            reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    MINUS           reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    AMPERSAND       reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    PIPE            reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    CARET           reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    END_LOWER       reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)
    NEWLINE         reduce using rule 115 (set_expression -> SET LEFT_COR values RIGHT_COR .)


state 196

    (57) ifStatement -> IF condiciones NEWLINE codigo . END_LOWER
    (58) ifStatement -> IF condiciones NEWLINE codigo . NEWLINE else_statement END_LOWER

    END_LOWER       shift and go to state 224
    NEWLINE         shift and go to state 223


state 197

    (60) condiciones -> condiciones conectores condiciones .
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
    NEWLINE         reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    COLON           reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    $end            reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    END_LOWER       reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    RBRACE          reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    END             reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    ELSE            reduce using rule 60 (condiciones -> condiciones conectores condiciones .)
    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

  ! AND             [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 151

state 198

    (65) condicion -> num operComp num .

    NEWLINE         reduce using rule 65 (condicion -> num operComp num .)
    AND             reduce using rule 65 (condicion -> num operComp num .)
    OR              reduce using rule 65 (condicion -> num operComp num .)
    AND_RESERVED    reduce using rule 65 (condicion -> num operComp num .)
    OR_RESERVED     reduce using rule 65 (condicion -> num operComp num .)
    COLON           reduce using rule 65 (condicion -> num operComp num .)
    $end            reduce using rule 65 (condicion -> num operComp num .)
    END_LOWER       reduce using rule 65 (condicion -> num operComp num .)
    RBRACE          reduce using rule 65 (condicion -> num operComp num .)
    END             reduce using rule 65 (condicion -> num operComp num .)
    ELSE            reduce using rule 65 (condicion -> num operComp num .)


state 199

    (67) condicion -> num operComp var .

    NEWLINE         reduce using rule 67 (condicion -> num operComp var .)
    AND             reduce using rule 67 (condicion -> num operComp var .)
    OR              reduce using rule 67 (condicion -> num operComp var .)
    AND_RESERVED    reduce using rule 67 (condicion -> num operComp var .)
    OR_RESERVED     reduce using rule 67 (condicion -> num operComp var .)
    COLON           reduce using rule 67 (condicion -> num operComp var .)
    $end            reduce using rule 67 (condicion -> num operComp var .)
    END_LOWER       reduce using rule 67 (condicion -> num operComp var .)
    RBRACE          reduce using rule 67 (condicion -> num operComp var .)
    END             reduce using rule 67 (condicion -> num operComp var .)
    ELSE            reduce using rule 67 (condicion -> num operComp var .)


state 200

    (66) condicion -> var operComp num .

    NEWLINE         reduce using rule 66 (condicion -> var operComp num .)
    AND             reduce using rule 66 (condicion -> var operComp num .)
    OR              reduce using rule 66 (condicion -> var operComp num .)
    AND_RESERVED    reduce using rule 66 (condicion -> var operComp num .)
    OR_RESERVED     reduce using rule 66 (condicion -> var operComp num .)
    COLON           reduce using rule 66 (condicion -> var operComp num .)
    $end            reduce using rule 66 (condicion -> var operComp num .)
    END_LOWER       reduce using rule 66 (condicion -> var operComp num .)
    RBRACE          reduce using rule 66 (condicion -> var operComp num .)
    END             reduce using rule 66 (condicion -> var operComp num .)
    ELSE            reduce using rule 66 (condicion -> var operComp num .)


state 201

    (85) while_statement -> WHILE condiciones COLON codigo .

    $end            reduce using rule 85 (while_statement -> WHILE condiciones COLON codigo .)
    END_LOWER       reduce using rule 85 (while_statement -> WHILE condiciones COLON codigo .)
    NEWLINE         reduce using rule 85 (while_statement -> WHILE condiciones COLON codigo .)


state 202

    (124) unless_expression -> UNLESS boolean_expression THEN expresion . END
    (125) unless_expression -> UNLESS boolean_expression THEN expresion . ELSE expresion END

    END             shift and go to state 225
    ELSE            shift and go to state 226


state 203

    (90) boolean_expression -> expression GREATER expression .

    THEN            reduce using rule 90 (boolean_expression -> expression GREATER expression .)


state 204

    (91) boolean_expression -> expression LESS expression .

    THEN            reduce using rule 91 (boolean_expression -> expression LESS expression .)


state 205

    (92) boolean_expression -> expression GREATER_EQUAL expression .

    THEN            reduce using rule 92 (boolean_expression -> expression GREATER_EQUAL expression .)


state 206

    (93) boolean_expression -> expression LESS_EQUAL expression .

    THEN            reduce using rule 93 (boolean_expression -> expression LESS_EQUAL expression .)


state 207

    (94) boolean_expression -> expression EQUAL expression .

    THEN            reduce using rule 94 (boolean_expression -> expression EQUAL expression .)


state 208

    (95) boolean_expression -> expression NOT_EQUAL expression .

    THEN            reduce using rule 95 (boolean_expression -> expression NOT_EQUAL expression .)


state 209

    (48) array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .

    $end            reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    LEFT_COR        reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    END_LOWER       reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    NEWLINE         reduce using rule 48 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)


state 210

    (27) values_space -> value SPACE . values_space
    (27) values_space -> . value SPACE values_space
    (28) values_space -> . value
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    value                          shift and go to state 175
    values_space                   shift and go to state 227
    var                            shift and go to state 54
    num                            shift and go to state 55

state 211

    (50) array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .

    $end            reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    LEFT_COR        reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    END_LOWER       reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    NEWLINE         reduce using rule 50 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)


state 212

    (52) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER COMMA values RIGHTPAR

    INTEGER         shift and go to state 228


state 213

    (139) block_expression -> LBRACE PIPE LOCAL_VAR PIPE . expresion RBRACE
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 229
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 214

    (89) print_statement -> PUT LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 230


state 215

    (86) condition_with_connectors -> condiciones conectores condiciones .
    (60) condiciones -> condiciones conectores condiciones .
    (60) condiciones -> condiciones . conectores condiciones
    (61) conectores -> . AND
    (62) conectores -> . OR
    (63) conectores -> . AND_RESERVED
    (64) conectores -> . OR_RESERVED

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for AND_RESERVED resolved as shift
  ! shift/reduce conflict for OR_RESERVED resolved as shift
    RBRACE          reduce using rule 86 (condition_with_connectors -> condiciones conectores condiciones .)
    END             reduce using rule 86 (condition_with_connectors -> condiciones conectores condiciones .)
    ELSE            reduce using rule 86 (condition_with_connectors -> condiciones conectores condiciones .)
    AND             shift and go to state 152
    OR              shift and go to state 153
    AND_RESERVED    shift and go to state 154
    OR_RESERVED     shift and go to state 155

  ! AND             [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! AND_RESERVED    [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]
  ! OR_RESERVED     [ reduce using rule 60 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 151

state 216

    (140) block_expression -> DO PIPE LOCAL_VAR PIPE . expresion END
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 231
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 217

    (38) gets -> GETS DOT CHOMP DOT TO_F .

    $end            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)
    RBRACE          reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)
    END             reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)
    END_LOWER       reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)
    NEWLINE         reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 38 (gets -> GETS DOT CHOMP DOT TO_F .)


state 218

    (39) gets -> GETS DOT CHOMP DOT TO_I .

    $end            reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)
    RBRACE          reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)
    END             reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)
    END_LOWER       reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)
    NEWLINE         reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 39 (gets -> GETS DOT CHOMP DOT TO_I .)


state 219

    (142) proc_expression -> PROC DOT NEW . block_expression
    (137) block_expression -> . LBRACE expresion RBRACE
    (138) block_expression -> . DO expresion END
    (139) block_expression -> . LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE
    (140) block_expression -> . DO PIPE LOCAL_VAR PIPE expresion END

    LBRACE          shift and go to state 50
    DO              shift and go to state 51

    block_expression               shift and go to state 232

state 220

    (144) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values . RIGHTPAR

    RIGHTPAR        shift and go to state 233


state 221

    (145) proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .

    $end            reduce using rule 145 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 145 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 145 (proc_call -> LOCAL_VAR DOT LEFTPAR values RIGHTPAR .)


state 222

    (114) set_expression -> SET DOT NEW LEFTPAR LEFT_COR . values RIGHT_COR RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 234
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 223

    (58) ifStatement -> IF condiciones NEWLINE codigo NEWLINE . else_statement END_LOWER
    (75) else_statement -> . ELSE NEWLINE codigo

    ELSE            shift and go to state 236

    else_statement                 shift and go to state 235

state 224

    (57) ifStatement -> IF condiciones NEWLINE codigo END_LOWER .

    $end            reduce using rule 57 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    END_LOWER       reduce using rule 57 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)
    NEWLINE         reduce using rule 57 (ifStatement -> IF condiciones NEWLINE codigo END_LOWER .)


state 225

    (124) unless_expression -> UNLESS boolean_expression THEN expresion END .

    $end            reduce using rule 124 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    END_LOWER       reduce using rule 124 (unless_expression -> UNLESS boolean_expression THEN expresion END .)
    NEWLINE         reduce using rule 124 (unless_expression -> UNLESS boolean_expression THEN expresion END .)


state 226

    (125) unless_expression -> UNLESS boolean_expression THEN expresion ELSE . expresion END
    (111) expresion -> . puts
    (112) expresion -> . gets
    (113) expresion -> . print_statement
    (126) expresion -> . arithmetic_production
    (147) expresion -> . condition_with_connectors
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (89) print_statement -> . PUT LEFTPAR values RIGHTPAR
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (86) condition_with_connectors -> . condiciones conectores condiciones
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (59) condiciones -> . condicion
    (60) condiciones -> . condiciones conectores condiciones
    (65) condicion -> . num operComp num
    (66) condicion -> . var operComp num
    (67) condicion -> . num operComp var

    PUT             shift and go to state 117
    GETS            shift and go to state 13
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45

    expresion                      shift and go to state 237
    puts                           shift and go to state 112
    gets                           shift and go to state 113
    print_statement                shift and go to state 114
    arithmetic_production          shift and go to state 115
    condition_with_connectors      shift and go to state 116
    num                            shift and go to state 118
    var                            shift and go to state 119
    condiciones                    shift and go to state 120
    condicion                      shift and go to state 89

state 227

    (27) values_space -> value SPACE values_space .

    RIGHT_COR       reduce using rule 27 (values_space -> value SPACE values_space .)


state 228

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . RIGHTPAR
    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . COMMA values RIGHTPAR

    RIGHTPAR        shift and go to state 238
    COMMA           shift and go to state 239


state 229

    (139) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion . RBRACE

    RBRACE          shift and go to state 240


state 230

    (89) print_statement -> PUT LEFTPAR values RIGHTPAR .

    RBRACE          reduce using rule 89 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    END             reduce using rule 89 (print_statement -> PUT LEFTPAR values RIGHTPAR .)
    ELSE            reduce using rule 89 (print_statement -> PUT LEFTPAR values RIGHTPAR .)


state 231

    (140) block_expression -> DO PIPE LOCAL_VAR PIPE expresion . END

    END             shift and go to state 241


state 232

    (142) proc_expression -> PROC DOT NEW block_expression .

    $end            reduce using rule 142 (proc_expression -> PROC DOT NEW block_expression .)
    END_LOWER       reduce using rule 142 (proc_expression -> PROC DOT NEW block_expression .)
    NEWLINE         reduce using rule 142 (proc_expression -> PROC DOT NEW block_expression .)


state 233

    (144) proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .

    $end            reduce using rule 144 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    END_LOWER       reduce using rule 144 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)
    NEWLINE         reduce using rule 144 (proc_call -> LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR .)


state 234

    (114) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values . RIGHT_COR RIGHTPAR

    RIGHT_COR       shift and go to state 242


state 235

    (58) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement . END_LOWER

    END_LOWER       shift and go to state 243


state 236

    (75) else_statement -> ELSE . NEWLINE codigo

    NEWLINE         shift and go to state 244


state 237

    (125) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion . END

    END             shift and go to state 245


state 238

    (52) newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .

    $end            reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    LEFT_COR        reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    END_LOWER       reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    NEWLINE         reduce using rule 52 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)


state 239

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA . values RIGHTPAR
    (29) values -> . value
    (30) values -> . value COMMA values
    (22) value -> . var
    (23) value -> . num
    (24) value -> . STRING
    (25) value -> . NIL
    (26) value -> . SYMBOL
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (36) num -> . FLOAT
    (37) num -> . INTEGER

    STRING          shift and go to state 56
    NIL             shift and go to state 57
    SYMBOL          shift and go to state 58
    LOCAL_VAR       shift and go to state 59
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36

    values                         shift and go to state 246
    value                          shift and go to state 53
    var                            shift and go to state 54
    num                            shift and go to state 55

state 240

    (139) block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .

    $end            reduce using rule 139 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    END_LOWER       reduce using rule 139 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)
    NEWLINE         reduce using rule 139 (block_expression -> LBRACE PIPE LOCAL_VAR PIPE expresion RBRACE .)


state 241

    (140) block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .

    $end            reduce using rule 140 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    END_LOWER       reduce using rule 140 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)
    NEWLINE         reduce using rule 140 (block_expression -> DO PIPE LOCAL_VAR PIPE expresion END .)


state 242

    (114) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR . RIGHTPAR

    RIGHTPAR        shift and go to state 247


state 243

    (58) ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .

    $end            reduce using rule 58 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    END_LOWER       reduce using rule 58 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)
    NEWLINE         reduce using rule 58 (ifStatement -> IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER .)


state 244

    (75) else_statement -> ELSE NEWLINE . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (5) codigo -> . method_call
    (6) codigo -> . block_assignment
    (7) codigo -> . proc_assignment
    (8) codigo -> . proc_call
    (9) codigo -> . declaraciones
    (10) codigo -> . arithmetic_production
    (41) puts -> . PUT values
    (38) gets -> . GETS DOT CHOMP DOT TO_F
    (39) gets -> . GETS DOT CHOMP DOT TO_I
    (40) gets -> . GETS DOT CHOMP
    (11) estructurasDatos -> . array
    (12) estructurasDatos -> . var_arreglo
    (13) estructurasDatos -> . acceder_arreglo
    (14) estructurasDatos -> . hash_declaration
    (15) estructurasDatos -> . hash_access
    (16) estructurasDatos -> . hash_operations
    (17) estructurasDatos -> . set_expression
    (18) estructurasDatos -> . set_operations
    (19) estructurasControl -> . ifStatement
    (20) estructurasControl -> . while_statement
    (21) estructurasControl -> . unless_expression
    (87) method_call -> . var LEFTPAR values RIGHTPAR
    (88) method_call -> . var LEFTPAR RIGHTPAR
    (141) block_assignment -> . method_call block_expression
    (143) proc_assignment -> . LOCAL_VAR ASSIGN proc_expression
    (144) proc_call -> . LOCAL_VAR DOT CALL LEFTPAR values RIGHTPAR
    (145) proc_call -> . LOCAL_VAR DOT LEFTPAR values RIGHTPAR
    (146) proc_call -> . LOCAL_VAR LEFT_COR values RIGHT_COR
    (108) declaraciones -> . variable_declaration
    (109) declaraciones -> . store_conditional_result
    (110) declaraciones -> . declare_data_structures
    (127) arithmetic_production -> . num
    (128) arithmetic_production -> . var
    (129) arithmetic_production -> . num arithmetic_operators arithmetic_production
    (130) arithmetic_production -> . var arithmetic_operators arithmetic_production
    (42) array -> . array_explicito
    (43) array -> . array_implicito
    (44) array -> . array_creation
    (45) array -> . newArray
    (54) var_arreglo -> . var
    (55) var_arreglo -> . var ASSIGN array
    (56) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (76) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (77) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (78) hash_access -> . var LEFT_COR value RIGHT_COR
    (79) hash_operations -> . hash_access ASSIGN value
    (114) set_expression -> . SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR
    (115) set_expression -> . SET LEFT_COR values RIGHT_COR
    (116) set_operations -> . set_expression
    (117) set_operations -> . set_operations set_binary_operators set_expression
    (57) ifStatement -> . IF condiciones NEWLINE codigo END_LOWER
    (58) ifStatement -> . IF condiciones NEWLINE codigo NEWLINE else_statement END_LOWER
    (85) while_statement -> . WHILE condiciones COLON codigo
    (124) unless_expression -> . UNLESS boolean_expression THEN expresion END
    (125) unless_expression -> . UNLESS boolean_expression THEN expresion ELSE expresion END
    (31) var -> . LOCAL_VAR
    (32) var -> . INSTANCE_VAR
    (33) var -> . CLASS_VAR
    (34) var -> . GLOBAL_VAR
    (35) var -> . CONSTANT
    (80) variable_declaration -> . var ASSIGN value
    (81) store_conditional_result -> . var ASSIGN condiciones
    (82) declare_data_structures -> . variable_declaration
    (83) declare_data_structures -> . array
    (84) declare_data_structures -> . hash_declaration
    (118) declare_data_structures -> . LOCAL_VAR ASSIGN set_expression
    (36) num -> . FLOAT
    (37) num -> . INTEGER
    (46) array_explicito -> . LEFT_COR values RIGHT_COR
    (47) array_explicito -> . LEFT_COR RIGHT_COR
    (48) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (49) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (50) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (51) newArray -> . ARRAY DOT NEW
    (52) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (53) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    PUT             shift and go to state 12
    GETS            shift and go to state 13
    LOCAL_VAR       shift and go to state 26
    HASH            shift and go to state 37
    SET             shift and go to state 38
    IF              shift and go to state 39
    WHILE           shift and go to state 40
    UNLESS          shift and go to state 41
    INSTANCE_VAR    shift and go to state 42
    CLASS_VAR       shift and go to state 43
    GLOBAL_VAR      shift and go to state 44
    CONSTANT        shift and go to state 45
    FLOAT           shift and go to state 46
    INTEGER         shift and go to state 36
    LEFT_COR        shift and go to state 27
    PERCENTW        shift and go to state 47
    ARRAY           shift and go to state 48

    codigo                         shift and go to state 248
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    method_call                    shift and go to state 6
    block_assignment               shift and go to state 7
    proc_assignment                shift and go to state 8
    proc_call                      shift and go to state 9
    declaraciones                  shift and go to state 10
    arithmetic_production          shift and go to state 11
    array                          shift and go to state 14
    var_arreglo                    shift and go to state 15
    acceder_arreglo                shift and go to state 16
    hash_declaration               shift and go to state 17
    hash_access                    shift and go to state 18
    hash_operations                shift and go to state 19
    set_expression                 shift and go to state 20
    set_operations                 shift and go to state 21
    ifStatement                    shift and go to state 22
    while_statement                shift and go to state 23
    unless_expression              shift and go to state 24
    var                            shift and go to state 25
    variable_declaration           shift and go to state 28
    store_conditional_result       shift and go to state 29
    declare_data_structures        shift and go to state 30
    num                            shift and go to state 31
    array_explicito                shift and go to state 32
    array_implicito                shift and go to state 33
    array_creation                 shift and go to state 34
    newArray                       shift and go to state 35

state 245

    (125) unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .

    $end            reduce using rule 125 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    END_LOWER       reduce using rule 125 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)
    NEWLINE         reduce using rule 125 (unless_expression -> UNLESS boolean_expression THEN expresion ELSE expresion END .)


state 246

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values . RIGHTPAR

    RIGHTPAR        shift and go to state 249


state 247

    (114) set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .

    $end            reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PLUS            reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    MINUS           reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    AMPERSAND       reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    PIPE            reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    CARET           reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    END_LOWER       reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)
    NEWLINE         reduce using rule 114 (set_expression -> SET DOT NEW LEFTPAR LEFT_COR values RIGHT_COR RIGHTPAR .)


state 248

    (75) else_statement -> ELSE NEWLINE codigo .

    END_LOWER       reduce using rule 75 (else_statement -> ELSE NEWLINE codigo .)


state 249

    (53) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .

    $end            reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    LEFT_COR        reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    END_LOWER       reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    NEWLINE         reduce using rule 53 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_COR in state 25 resolved as shift
WARNING: shift/reduce conflict for ASSIGN in state 26 resolved as shift
WARNING: shift/reduce conflict for LEFT_COR in state 26 resolved as shift
WARNING: shift/reduce conflict for AND in state 197 resolved as shift
WARNING: shift/reduce conflict for OR in state 197 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 197 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 197 resolved as shift
WARNING: shift/reduce conflict for AND in state 215 resolved as shift
WARNING: shift/reduce conflict for OR in state 215 resolved as shift
WARNING: shift/reduce conflict for AND_RESERVED in state 215 resolved as shift
WARNING: shift/reduce conflict for OR_RESERVED in state 215 resolved as shift
WARNING: reduce/reduce conflict in state 14 resolved using rule (estructurasDatos -> array)
WARNING: rejected rule (declare_data_structures -> array) in state 14
WARNING: reduce/reduce conflict in state 17 resolved using rule (estructurasDatos -> hash_declaration)
WARNING: rejected rule (declare_data_structures -> hash_declaration) in state 17
WARNING: reduce/reduce conflict in state 20 resolved using rule (estructurasDatos -> set_expression)
WARNING: rejected rule (set_operations -> set_expression) in state 20
WARNING: reduce/reduce conflict in state 25 resolved using rule (var_arreglo -> var)
WARNING: rejected rule (arithmetic_production -> var) in state 25
WARNING: reduce/reduce conflict in state 28 resolved using rule (declare_data_structures -> variable_declaration)
WARNING: rejected rule (declaraciones -> variable_declaration) in state 28
WARNING: Rule (declare_data_structures -> array) is never reduced
WARNING: Rule (declare_data_structures -> hash_declaration) is never reduced
WARNING: Rule (declaraciones -> variable_declaration) is never reduced
