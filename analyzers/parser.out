Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BACKSLASH
    BEGIN
    BIN_INTEGER
    BIT_AND
    BIT_OR
    BOOLEAN
    BREAK
    CASE
    CASE_EQUAL
    CLASS
    DEF
    DEFINED
    DIVIDE
    DIVIDE_ASSIGN
    DO
    DOUBLE_QUOTE
    ELSIF
    END
    EXPONENT
    EXPONENT_ASSIGN
    FOR
    HEX_INTEGER
    IN
    MINUS
    MINUS_ASSIGN
    MODULE
    MODULO
    MODULO_ASSIGN
    MULTIPLY
    MULTIPLY_ASSIGN
    NEWLINE
    NOT
    OCT_INTEGER
    PLUS
    PLUS_ASSIGN
    RANGEEX
    RANGEIN
    REDO
    RETURN
    SELF
    TAB
    UNLESS
    UNTIL
    WHEN

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> puts
Rule 2     codigo -> gets
Rule 3     codigo -> estructurasDatos
Rule 4     codigo -> estructurasControl
Rule 5     estructurasDatos -> array
Rule 6     estructurasDatos -> var_arreglo
Rule 7     estructurasDatos -> acceder_arreglo
Rule 8     estructurasDatos -> hash_declaration
Rule 9     estructurasDatos -> hash_access
Rule 10    estructurasDatos -> hash_operations
Rule 11    estructurasControl -> ifStatement
Rule 12    estructurasControl -> while_statement
Rule 13    value -> var
Rule 14    value -> num
Rule 15    value -> STRING
Rule 16    value -> NIL
Rule 17    value -> SYMBOL
Rule 18    values_space -> value SPACE values_space
Rule 19    values_space -> value
Rule 20    values -> value
Rule 21    values -> value COMMA values
Rule 22    var -> LOCAL_VAR
Rule 23    var -> INSTANCE_VAR
Rule 24    var -> CLASS_VAR
Rule 25    var -> GLOBAL_VAR
Rule 26    var -> CONSTANT
Rule 27    num -> FLOAT
Rule 28    num -> INTEGER
Rule 29    gets -> GETS DOT CHOMP DOT TO_F
Rule 30    gets -> GETS DOT CHOMP DOT TO_I
Rule 31    gets -> GETS DOT CHOMP
Rule 32    puts -> PUT values
Rule 33    array -> array_explicito
Rule 34    array -> array_implicito
Rule 35    array -> array_creation
Rule 36    array -> newArray
Rule 37    array_explicito -> LEFT_COR values RIGHT_COR
Rule 38    array_explicito -> LEFT_COR RIGHT_COR
Rule 39    array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR
Rule 40    array_implicito -> PERCENTW LEFT_COR RIGHT_COR
Rule 41    array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR
Rule 42    newArray -> ARRAY DOT NEW
Rule 43    newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
Rule 44    newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
Rule 45    var_arreglo -> var
Rule 46    var_arreglo -> var ASSIGN array
Rule 47    acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR
Rule 48    ifStatement -> IF condiciones COLON codigo
Rule 49    ifStatement -> IF condiciones COLON codigo else_statement
Rule 50    condiciones -> condicion
Rule 51    condiciones -> condiciones conectores condiciones
Rule 52    conectores -> AND
Rule 53    conectores -> OR
Rule 54    condicion -> num operComp num
Rule 55    operComp -> GREATER
Rule 56    operComp -> LESS
Rule 57    operComp -> GREATER_EQUAL
Rule 58    operComp -> LESS_EQUAL
Rule 59    operComp -> EQUAL
Rule 60    operComp -> NOT_EQUAL
Rule 61    operComp -> COMPARE
Rule 62    else_statement -> ELSE COLON codigo
Rule 63    hash_declaration -> HASH LEFT_COR values RIGHT_COR
Rule 64    hash_declaration -> HASH LEFT_COR RIGHT_COR
Rule 65    hash_access -> var LEFT_COR value RIGHT_COR
Rule 66    hash_operations -> hash_access ASSIGN value
Rule 67    variable_declaration -> var ASSIGN value
Rule 68    store_conditional_result -> var ASSIGN ifStatement
Rule 69    declare_data_structures -> variable_declaration
Rule 70    declare_data_structures -> array
Rule 71    declare_data_structures -> hash_declaration
Rule 72    while_statement -> WHILE condiciones COLON codigo
Rule 73    condition_with_connectors -> condiciones conectores condiciones
Rule 74    method_call -> var LEFTPAR values RIGHTPAR
Rule 75    method_call -> var LEFTPAR RIGHTPAR
Rule 76    print_statement -> PUT LEFTPAR values RIGHTPAR
Rule 77    boolean_expression -> expression GREATER expression
Rule 78    boolean_expression -> expression LESS expression
Rule 79    boolean_expression -> expression GREATER_EQUAL expression
Rule 80    boolean_expression -> expression LESS_EQUAL expression
Rule 81    boolean_expression -> expression EQUAL expression
Rule 82    boolean_expression -> expression NOT_EQUAL expression
Rule 83    boolean_expression -> boolean_value
Rule 84    boolean_value -> TRUE
Rule 85    boolean_value -> FALSE
Rule 86    expression -> INTEGER
Rule 87    expression -> FLOAT
Rule 88    expression -> variable
Rule 89    expression -> STRING
Rule 90    variable -> LOCAL_VAR
Rule 91    variable -> INSTANCE_VAR
Rule 92    variable -> CLASS_VAR
Rule 93    variable -> GLOBAL_VAR
Rule 94    variable -> CONSTANT
Rule 95    declaraciones -> variable_declaration
Rule 96    declaraciones -> store_conditional_result
Rule 97    declaraciones -> declare_data_structures
Rule 98    expresion -> puts
Rule 99    expresion -> gets
Rule 100   expresion -> print_statement

Terminals, with rules where they appear

AND                  : 52
ARRAY                : 41 42 43 44
ASSIGN               : 46 66 67 68
BACKSLASH            : 
BEGIN                : 
BIN_INTEGER          : 
BIT_AND              : 
BIT_OR               : 
BOOLEAN              : 
BREAK                : 
CASE                 : 
CASE_EQUAL           : 
CHOMP                : 29 30 31
CLASS                : 
CLASS_VAR            : 24 92
COLON                : 48 49 62 72
COMMA                : 21 44
COMPARE              : 61
CONSTANT             : 26 94
DEF                  : 
DEFINED              : 
DIVIDE               : 
DIVIDE_ASSIGN        : 
DO                   : 
DOT                  : 29 29 30 30 31 42 43 44
DOUBLE_QUOTE         : 
ELSE                 : 62
ELSIF                : 
END                  : 
EQUAL                : 59 81
EXPONENT             : 
EXPONENT_ASSIGN      : 
FALSE                : 85
FLOAT                : 27 87
FOR                  : 
GETS                 : 29 30 31
GLOBAL_VAR           : 25 93
GREATER              : 55 77
GREATER_EQUAL        : 57 79
HASH                 : 63 64
HEX_INTEGER          : 
IF                   : 48 49
IN                   : 
INSTANCE_VAR         : 23 91
INTEGER              : 28 43 44 47 86
LEFTPAR              : 41 43 44 74 75 76
LEFT_COR             : 37 38 39 40 47 63 64 65
LESS                 : 56 78
LESS_EQUAL           : 58 80
LOCAL_VAR            : 22 90
MINUS                : 
MINUS_ASSIGN         : 
MODULE               : 
MODULO               : 
MODULO_ASSIGN        : 
MULTIPLY             : 
MULTIPLY_ASSIGN      : 
NEW                  : 42 43 44
NEWLINE              : 
NIL                  : 16
NOT                  : 
NOT_EQUAL            : 60 82
OCT_INTEGER          : 
OR                   : 53
PERCENTW             : 39 40
PLUS                 : 
PLUS_ASSIGN          : 
PUT                  : 32 76
RANGEEX              : 
RANGEIN              : 
REDO                 : 
RETURN               : 
RIGHTPAR             : 41 43 44 74 75 76
RIGHT_COR            : 37 38 39 40 47 63 64 65
SELF                 : 
SPACE                : 18
STRING               : 15 89
SYMBOL               : 17
TAB                  : 
TO_F                 : 29
TO_I                 : 30
TRUE                 : 84
UNLESS               : 
UNTIL                : 
WHEN                 : 
WHILE                : 72
error                : 

Nonterminals, with rules where they appear

acceder_arreglo      : 7
array                : 5 46 70
array_creation       : 35
array_explicito      : 33 41
array_implicito      : 34
boolean_expression   : 
boolean_value        : 83
codigo               : 48 49 62 72 0
condicion            : 50
condiciones          : 48 49 51 51 72 73 73
condition_with_connectors : 
conectores           : 51 73
declaraciones        : 
declare_data_structures : 97
else_statement       : 49
estructurasControl   : 4
estructurasDatos     : 3
expresion            : 
expression           : 77 77 78 78 79 79 80 80 81 81 82 82
gets                 : 2 99
hash_access          : 9 66
hash_declaration     : 8 71
hash_operations      : 10
ifStatement          : 11 68
method_call          : 
newArray             : 36
num                  : 14 54 54
operComp             : 54
print_statement      : 100
puts                 : 1 98
store_conditional_result : 96
value                : 18 19 20 21 65 66 67
values               : 21 32 37 44 63 74 76
values_space         : 18 39
var                  : 13 45 46 65 67 68 74 75
var_arreglo          : 6 47
variable             : 88
variable_declaration : 69 95
while_statement      : 12

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (32) puts -> . PUT values
    (29) gets -> . GETS DOT CHOMP DOT TO_F
    (30) gets -> . GETS DOT CHOMP DOT TO_I
    (31) gets -> . GETS DOT CHOMP
    (5) estructurasDatos -> . array
    (6) estructurasDatos -> . var_arreglo
    (7) estructurasDatos -> . acceder_arreglo
    (8) estructurasDatos -> . hash_declaration
    (9) estructurasDatos -> . hash_access
    (10) estructurasDatos -> . hash_operations
    (11) estructurasControl -> . ifStatement
    (12) estructurasControl -> . while_statement
    (33) array -> . array_explicito
    (34) array -> . array_implicito
    (35) array -> . array_creation
    (36) array -> . newArray
    (45) var_arreglo -> . var
    (46) var_arreglo -> . var ASSIGN array
    (47) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (63) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (64) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (65) hash_access -> . var LEFT_COR value RIGHT_COR
    (66) hash_operations -> . hash_access ASSIGN value
    (48) ifStatement -> . IF condiciones COLON codigo
    (49) ifStatement -> . IF condiciones COLON codigo else_statement
    (72) while_statement -> . WHILE condiciones COLON codigo
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR
    (39) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (41) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> . ARRAY DOT NEW
    (43) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT

    PUT             shift and go to state 6
    GETS            shift and go to state 7
    HASH            shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    LEFT_COR        shift and go to state 21
    PERCENTW        shift and go to state 25
    ARRAY           shift and go to state 26
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31

    codigo                         shift and go to state 1
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    array                          shift and go to state 8
    var_arreglo                    shift and go to state 9
    acceder_arreglo                shift and go to state 10
    hash_declaration               shift and go to state 11
    hash_access                    shift and go to state 12
    hash_operations                shift and go to state 13
    ifStatement                    shift and go to state 14
    while_statement                shift and go to state 15
    array_explicito                shift and go to state 16
    array_implicito                shift and go to state 17
    array_creation                 shift and go to state 18
    newArray                       shift and go to state 19
    var                            shift and go to state 20

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> puts .

    $end            reduce using rule 1 (codigo -> puts .)
    ELSE            reduce using rule 1 (codigo -> puts .)


state 3

    (2) codigo -> gets .

    $end            reduce using rule 2 (codigo -> gets .)
    ELSE            reduce using rule 2 (codigo -> gets .)


state 4

    (3) codigo -> estructurasDatos .

    $end            reduce using rule 3 (codigo -> estructurasDatos .)
    ELSE            reduce using rule 3 (codigo -> estructurasDatos .)


state 5

    (4) codigo -> estructurasControl .

    $end            reduce using rule 4 (codigo -> estructurasControl .)
    ELSE            reduce using rule 4 (codigo -> estructurasControl .)


state 6

    (32) puts -> PUT . values
    (20) values -> . value
    (21) values -> . value COMMA values
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    values                         shift and go to state 32
    value                          shift and go to state 33
    var                            shift and go to state 34
    num                            shift and go to state 35

state 7

    (29) gets -> GETS . DOT CHOMP DOT TO_F
    (30) gets -> GETS . DOT CHOMP DOT TO_I
    (31) gets -> GETS . DOT CHOMP

    DOT             shift and go to state 41


state 8

    (5) estructurasDatos -> array .

    $end            reduce using rule 5 (estructurasDatos -> array .)
    ELSE            reduce using rule 5 (estructurasDatos -> array .)


state 9

    (6) estructurasDatos -> var_arreglo .
    (47) acceder_arreglo -> var_arreglo . LEFT_COR INTEGER RIGHT_COR

    $end            reduce using rule 6 (estructurasDatos -> var_arreglo .)
    ELSE            reduce using rule 6 (estructurasDatos -> var_arreglo .)
    LEFT_COR        shift and go to state 42


state 10

    (7) estructurasDatos -> acceder_arreglo .

    $end            reduce using rule 7 (estructurasDatos -> acceder_arreglo .)
    ELSE            reduce using rule 7 (estructurasDatos -> acceder_arreglo .)


state 11

    (8) estructurasDatos -> hash_declaration .

    $end            reduce using rule 8 (estructurasDatos -> hash_declaration .)
    ELSE            reduce using rule 8 (estructurasDatos -> hash_declaration .)


state 12

    (9) estructurasDatos -> hash_access .
    (66) hash_operations -> hash_access . ASSIGN value

    $end            reduce using rule 9 (estructurasDatos -> hash_access .)
    ELSE            reduce using rule 9 (estructurasDatos -> hash_access .)
    ASSIGN          shift and go to state 43


state 13

    (10) estructurasDatos -> hash_operations .

    $end            reduce using rule 10 (estructurasDatos -> hash_operations .)
    ELSE            reduce using rule 10 (estructurasDatos -> hash_operations .)


state 14

    (11) estructurasControl -> ifStatement .

    $end            reduce using rule 11 (estructurasControl -> ifStatement .)
    ELSE            reduce using rule 11 (estructurasControl -> ifStatement .)


state 15

    (12) estructurasControl -> while_statement .

    $end            reduce using rule 12 (estructurasControl -> while_statement .)
    ELSE            reduce using rule 12 (estructurasControl -> while_statement .)


state 16

    (33) array -> array_explicito .

    $end            reduce using rule 33 (array -> array_explicito .)
    LEFT_COR        reduce using rule 33 (array -> array_explicito .)
    ELSE            reduce using rule 33 (array -> array_explicito .)


state 17

    (34) array -> array_implicito .

    $end            reduce using rule 34 (array -> array_implicito .)
    LEFT_COR        reduce using rule 34 (array -> array_implicito .)
    ELSE            reduce using rule 34 (array -> array_implicito .)


state 18

    (35) array -> array_creation .

    $end            reduce using rule 35 (array -> array_creation .)
    LEFT_COR        reduce using rule 35 (array -> array_creation .)
    ELSE            reduce using rule 35 (array -> array_creation .)


state 19

    (36) array -> newArray .

    $end            reduce using rule 36 (array -> newArray .)
    LEFT_COR        reduce using rule 36 (array -> newArray .)
    ELSE            reduce using rule 36 (array -> newArray .)


state 20

    (45) var_arreglo -> var .
    (46) var_arreglo -> var . ASSIGN array
    (65) hash_access -> var . LEFT_COR value RIGHT_COR

  ! shift/reduce conflict for LEFT_COR resolved as shift
    $end            reduce using rule 45 (var_arreglo -> var .)
    ELSE            reduce using rule 45 (var_arreglo -> var .)
    ASSIGN          shift and go to state 44
    LEFT_COR        shift and go to state 45

  ! LEFT_COR        [ reduce using rule 45 (var_arreglo -> var .) ]


state 21

    (37) array_explicito -> LEFT_COR . values RIGHT_COR
    (38) array_explicito -> LEFT_COR . RIGHT_COR
    (20) values -> . value
    (21) values -> . value COMMA values
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    RIGHT_COR       shift and go to state 47
    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    values                         shift and go to state 46
    value                          shift and go to state 33
    var                            shift and go to state 34
    num                            shift and go to state 35

state 22

    (63) hash_declaration -> HASH . LEFT_COR values RIGHT_COR
    (64) hash_declaration -> HASH . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 48


state 23

    (48) ifStatement -> IF . condiciones COLON codigo
    (49) ifStatement -> IF . condiciones COLON codigo else_statement
    (50) condiciones -> . condicion
    (51) condiciones -> . condiciones conectores condiciones
    (54) condicion -> . num operComp num
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    condiciones                    shift and go to state 49
    condicion                      shift and go to state 50
    num                            shift and go to state 51

state 24

    (72) while_statement -> WHILE . condiciones COLON codigo
    (50) condiciones -> . condicion
    (51) condiciones -> . condiciones conectores condiciones
    (54) condicion -> . num operComp num
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    condiciones                    shift and go to state 52
    condicion                      shift and go to state 50
    num                            shift and go to state 51

state 25

    (39) array_implicito -> PERCENTW . LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> PERCENTW . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 53


state 26

    (41) array_creation -> ARRAY . LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> ARRAY . DOT NEW
    (43) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> ARRAY . DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFTPAR         shift and go to state 54
    DOT             shift and go to state 55


state 27

    (22) var -> LOCAL_VAR .

    ASSIGN          reduce using rule 22 (var -> LOCAL_VAR .)
    LEFT_COR        reduce using rule 22 (var -> LOCAL_VAR .)
    $end            reduce using rule 22 (var -> LOCAL_VAR .)
    COMMA           reduce using rule 22 (var -> LOCAL_VAR .)
    ELSE            reduce using rule 22 (var -> LOCAL_VAR .)
    RIGHT_COR       reduce using rule 22 (var -> LOCAL_VAR .)
    SPACE           reduce using rule 22 (var -> LOCAL_VAR .)
    RIGHTPAR        reduce using rule 22 (var -> LOCAL_VAR .)


state 28

    (23) var -> INSTANCE_VAR .

    ASSIGN          reduce using rule 23 (var -> INSTANCE_VAR .)
    LEFT_COR        reduce using rule 23 (var -> INSTANCE_VAR .)
    $end            reduce using rule 23 (var -> INSTANCE_VAR .)
    COMMA           reduce using rule 23 (var -> INSTANCE_VAR .)
    ELSE            reduce using rule 23 (var -> INSTANCE_VAR .)
    RIGHT_COR       reduce using rule 23 (var -> INSTANCE_VAR .)
    SPACE           reduce using rule 23 (var -> INSTANCE_VAR .)
    RIGHTPAR        reduce using rule 23 (var -> INSTANCE_VAR .)


state 29

    (24) var -> CLASS_VAR .

    ASSIGN          reduce using rule 24 (var -> CLASS_VAR .)
    LEFT_COR        reduce using rule 24 (var -> CLASS_VAR .)
    $end            reduce using rule 24 (var -> CLASS_VAR .)
    COMMA           reduce using rule 24 (var -> CLASS_VAR .)
    ELSE            reduce using rule 24 (var -> CLASS_VAR .)
    RIGHT_COR       reduce using rule 24 (var -> CLASS_VAR .)
    SPACE           reduce using rule 24 (var -> CLASS_VAR .)
    RIGHTPAR        reduce using rule 24 (var -> CLASS_VAR .)


state 30

    (25) var -> GLOBAL_VAR .

    ASSIGN          reduce using rule 25 (var -> GLOBAL_VAR .)
    LEFT_COR        reduce using rule 25 (var -> GLOBAL_VAR .)
    $end            reduce using rule 25 (var -> GLOBAL_VAR .)
    COMMA           reduce using rule 25 (var -> GLOBAL_VAR .)
    ELSE            reduce using rule 25 (var -> GLOBAL_VAR .)
    RIGHT_COR       reduce using rule 25 (var -> GLOBAL_VAR .)
    SPACE           reduce using rule 25 (var -> GLOBAL_VAR .)
    RIGHTPAR        reduce using rule 25 (var -> GLOBAL_VAR .)


state 31

    (26) var -> CONSTANT .

    ASSIGN          reduce using rule 26 (var -> CONSTANT .)
    LEFT_COR        reduce using rule 26 (var -> CONSTANT .)
    $end            reduce using rule 26 (var -> CONSTANT .)
    COMMA           reduce using rule 26 (var -> CONSTANT .)
    ELSE            reduce using rule 26 (var -> CONSTANT .)
    RIGHT_COR       reduce using rule 26 (var -> CONSTANT .)
    SPACE           reduce using rule 26 (var -> CONSTANT .)
    RIGHTPAR        reduce using rule 26 (var -> CONSTANT .)


state 32

    (32) puts -> PUT values .

    $end            reduce using rule 32 (puts -> PUT values .)
    ELSE            reduce using rule 32 (puts -> PUT values .)


state 33

    (20) values -> value .
    (21) values -> value . COMMA values

    $end            reduce using rule 20 (values -> value .)
    ELSE            reduce using rule 20 (values -> value .)
    RIGHT_COR       reduce using rule 20 (values -> value .)
    RIGHTPAR        reduce using rule 20 (values -> value .)
    COMMA           shift and go to state 56


state 34

    (13) value -> var .

    COMMA           reduce using rule 13 (value -> var .)
    $end            reduce using rule 13 (value -> var .)
    ELSE            reduce using rule 13 (value -> var .)
    RIGHT_COR       reduce using rule 13 (value -> var .)
    SPACE           reduce using rule 13 (value -> var .)
    RIGHTPAR        reduce using rule 13 (value -> var .)


state 35

    (14) value -> num .

    COMMA           reduce using rule 14 (value -> num .)
    $end            reduce using rule 14 (value -> num .)
    ELSE            reduce using rule 14 (value -> num .)
    RIGHT_COR       reduce using rule 14 (value -> num .)
    SPACE           reduce using rule 14 (value -> num .)
    RIGHTPAR        reduce using rule 14 (value -> num .)


state 36

    (15) value -> STRING .

    COMMA           reduce using rule 15 (value -> STRING .)
    $end            reduce using rule 15 (value -> STRING .)
    ELSE            reduce using rule 15 (value -> STRING .)
    RIGHT_COR       reduce using rule 15 (value -> STRING .)
    SPACE           reduce using rule 15 (value -> STRING .)
    RIGHTPAR        reduce using rule 15 (value -> STRING .)


state 37

    (16) value -> NIL .

    COMMA           reduce using rule 16 (value -> NIL .)
    $end            reduce using rule 16 (value -> NIL .)
    ELSE            reduce using rule 16 (value -> NIL .)
    RIGHT_COR       reduce using rule 16 (value -> NIL .)
    SPACE           reduce using rule 16 (value -> NIL .)
    RIGHTPAR        reduce using rule 16 (value -> NIL .)


state 38

    (17) value -> SYMBOL .

    COMMA           reduce using rule 17 (value -> SYMBOL .)
    $end            reduce using rule 17 (value -> SYMBOL .)
    ELSE            reduce using rule 17 (value -> SYMBOL .)
    RIGHT_COR       reduce using rule 17 (value -> SYMBOL .)
    SPACE           reduce using rule 17 (value -> SYMBOL .)
    RIGHTPAR        reduce using rule 17 (value -> SYMBOL .)


state 39

    (27) num -> FLOAT .

    COMMA           reduce using rule 27 (num -> FLOAT .)
    $end            reduce using rule 27 (num -> FLOAT .)
    ELSE            reduce using rule 27 (num -> FLOAT .)
    RIGHT_COR       reduce using rule 27 (num -> FLOAT .)
    GREATER         reduce using rule 27 (num -> FLOAT .)
    LESS            reduce using rule 27 (num -> FLOAT .)
    GREATER_EQUAL   reduce using rule 27 (num -> FLOAT .)
    LESS_EQUAL      reduce using rule 27 (num -> FLOAT .)
    EQUAL           reduce using rule 27 (num -> FLOAT .)
    NOT_EQUAL       reduce using rule 27 (num -> FLOAT .)
    COMPARE         reduce using rule 27 (num -> FLOAT .)
    SPACE           reduce using rule 27 (num -> FLOAT .)
    RIGHTPAR        reduce using rule 27 (num -> FLOAT .)
    COLON           reduce using rule 27 (num -> FLOAT .)
    AND             reduce using rule 27 (num -> FLOAT .)
    OR              reduce using rule 27 (num -> FLOAT .)


state 40

    (28) num -> INTEGER .

    COMMA           reduce using rule 28 (num -> INTEGER .)
    $end            reduce using rule 28 (num -> INTEGER .)
    ELSE            reduce using rule 28 (num -> INTEGER .)
    RIGHT_COR       reduce using rule 28 (num -> INTEGER .)
    GREATER         reduce using rule 28 (num -> INTEGER .)
    LESS            reduce using rule 28 (num -> INTEGER .)
    GREATER_EQUAL   reduce using rule 28 (num -> INTEGER .)
    LESS_EQUAL      reduce using rule 28 (num -> INTEGER .)
    EQUAL           reduce using rule 28 (num -> INTEGER .)
    NOT_EQUAL       reduce using rule 28 (num -> INTEGER .)
    COMPARE         reduce using rule 28 (num -> INTEGER .)
    SPACE           reduce using rule 28 (num -> INTEGER .)
    RIGHTPAR        reduce using rule 28 (num -> INTEGER .)
    COLON           reduce using rule 28 (num -> INTEGER .)
    AND             reduce using rule 28 (num -> INTEGER .)
    OR              reduce using rule 28 (num -> INTEGER .)


state 41

    (29) gets -> GETS DOT . CHOMP DOT TO_F
    (30) gets -> GETS DOT . CHOMP DOT TO_I
    (31) gets -> GETS DOT . CHOMP

    CHOMP           shift and go to state 57


state 42

    (47) acceder_arreglo -> var_arreglo LEFT_COR . INTEGER RIGHT_COR

    INTEGER         shift and go to state 58


state 43

    (66) hash_operations -> hash_access ASSIGN . value
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    value                          shift and go to state 59
    var                            shift and go to state 34
    num                            shift and go to state 35

state 44

    (46) var_arreglo -> var ASSIGN . array
    (33) array -> . array_explicito
    (34) array -> . array_implicito
    (35) array -> . array_creation
    (36) array -> . newArray
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR
    (39) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (41) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> . ARRAY DOT NEW
    (43) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    LEFT_COR        shift and go to state 21
    PERCENTW        shift and go to state 25
    ARRAY           shift and go to state 26

    array                          shift and go to state 60
    array_explicito                shift and go to state 16
    array_implicito                shift and go to state 17
    array_creation                 shift and go to state 18
    newArray                       shift and go to state 19

state 45

    (65) hash_access -> var LEFT_COR . value RIGHT_COR
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    var                            shift and go to state 34
    value                          shift and go to state 61
    num                            shift and go to state 35

state 46

    (37) array_explicito -> LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 62


state 47

    (38) array_explicito -> LEFT_COR RIGHT_COR .

    $end            reduce using rule 38 (array_explicito -> LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 38 (array_explicito -> LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 38 (array_explicito -> LEFT_COR RIGHT_COR .)
    RIGHTPAR        reduce using rule 38 (array_explicito -> LEFT_COR RIGHT_COR .)


state 48

    (63) hash_declaration -> HASH LEFT_COR . values RIGHT_COR
    (64) hash_declaration -> HASH LEFT_COR . RIGHT_COR
    (20) values -> . value
    (21) values -> . value COMMA values
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    RIGHT_COR       shift and go to state 64
    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    values                         shift and go to state 63
    value                          shift and go to state 33
    var                            shift and go to state 34
    num                            shift and go to state 35

state 49

    (48) ifStatement -> IF condiciones . COLON codigo
    (49) ifStatement -> IF condiciones . COLON codigo else_statement
    (51) condiciones -> condiciones . conectores condiciones
    (52) conectores -> . AND
    (53) conectores -> . OR

    COLON           shift and go to state 65
    AND             shift and go to state 67
    OR              shift and go to state 68

    conectores                     shift and go to state 66

state 50

    (50) condiciones -> condicion .

    COLON           reduce using rule 50 (condiciones -> condicion .)
    AND             reduce using rule 50 (condiciones -> condicion .)
    OR              reduce using rule 50 (condiciones -> condicion .)


state 51

    (54) condicion -> num . operComp num
    (55) operComp -> . GREATER
    (56) operComp -> . LESS
    (57) operComp -> . GREATER_EQUAL
    (58) operComp -> . LESS_EQUAL
    (59) operComp -> . EQUAL
    (60) operComp -> . NOT_EQUAL
    (61) operComp -> . COMPARE

    GREATER         shift and go to state 70
    LESS            shift and go to state 71
    GREATER_EQUAL   shift and go to state 72
    LESS_EQUAL      shift and go to state 73
    EQUAL           shift and go to state 74
    NOT_EQUAL       shift and go to state 75
    COMPARE         shift and go to state 76

    operComp                       shift and go to state 69

state 52

    (72) while_statement -> WHILE condiciones . COLON codigo
    (51) condiciones -> condiciones . conectores condiciones
    (52) conectores -> . AND
    (53) conectores -> . OR

    COLON           shift and go to state 77
    AND             shift and go to state 67
    OR              shift and go to state 68

    conectores                     shift and go to state 66

state 53

    (39) array_implicito -> PERCENTW LEFT_COR . values_space RIGHT_COR
    (40) array_implicito -> PERCENTW LEFT_COR . RIGHT_COR
    (18) values_space -> . value SPACE values_space
    (19) values_space -> . value
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    RIGHT_COR       shift and go to state 79
    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    values_space                   shift and go to state 78
    value                          shift and go to state 80
    var                            shift and go to state 34
    num                            shift and go to state 35

state 54

    (41) array_creation -> ARRAY LEFTPAR . array_explicito RIGHTPAR
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR

    LEFT_COR        shift and go to state 21

    array_explicito                shift and go to state 81

state 55

    (42) newArray -> ARRAY DOT . NEW
    (43) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> ARRAY DOT . NEW LEFTPAR INTEGER COMMA values RIGHTPAR

    NEW             shift and go to state 82


state 56

    (21) values -> value COMMA . values
    (20) values -> . value
    (21) values -> . value COMMA values
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    value                          shift and go to state 33
    values                         shift and go to state 83
    var                            shift and go to state 34
    num                            shift and go to state 35

state 57

    (29) gets -> GETS DOT CHOMP . DOT TO_F
    (30) gets -> GETS DOT CHOMP . DOT TO_I
    (31) gets -> GETS DOT CHOMP .

    DOT             shift and go to state 84
    $end            reduce using rule 31 (gets -> GETS DOT CHOMP .)
    ELSE            reduce using rule 31 (gets -> GETS DOT CHOMP .)


state 58

    (47) acceder_arreglo -> var_arreglo LEFT_COR INTEGER . RIGHT_COR

    RIGHT_COR       shift and go to state 85


state 59

    (66) hash_operations -> hash_access ASSIGN value .

    $end            reduce using rule 66 (hash_operations -> hash_access ASSIGN value .)
    ELSE            reduce using rule 66 (hash_operations -> hash_access ASSIGN value .)


state 60

    (46) var_arreglo -> var ASSIGN array .

    LEFT_COR        reduce using rule 46 (var_arreglo -> var ASSIGN array .)
    $end            reduce using rule 46 (var_arreglo -> var ASSIGN array .)
    ELSE            reduce using rule 46 (var_arreglo -> var ASSIGN array .)


state 61

    (65) hash_access -> var LEFT_COR value . RIGHT_COR

    RIGHT_COR       shift and go to state 86


state 62

    (37) array_explicito -> LEFT_COR values RIGHT_COR .

    $end            reduce using rule 37 (array_explicito -> LEFT_COR values RIGHT_COR .)
    LEFT_COR        reduce using rule 37 (array_explicito -> LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 37 (array_explicito -> LEFT_COR values RIGHT_COR .)
    RIGHTPAR        reduce using rule 37 (array_explicito -> LEFT_COR values RIGHT_COR .)


state 63

    (63) hash_declaration -> HASH LEFT_COR values . RIGHT_COR

    RIGHT_COR       shift and go to state 87


state 64

    (64) hash_declaration -> HASH LEFT_COR RIGHT_COR .

    $end            reduce using rule 64 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 64 (hash_declaration -> HASH LEFT_COR RIGHT_COR .)


state 65

    (48) ifStatement -> IF condiciones COLON . codigo
    (49) ifStatement -> IF condiciones COLON . codigo else_statement
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (32) puts -> . PUT values
    (29) gets -> . GETS DOT CHOMP DOT TO_F
    (30) gets -> . GETS DOT CHOMP DOT TO_I
    (31) gets -> . GETS DOT CHOMP
    (5) estructurasDatos -> . array
    (6) estructurasDatos -> . var_arreglo
    (7) estructurasDatos -> . acceder_arreglo
    (8) estructurasDatos -> . hash_declaration
    (9) estructurasDatos -> . hash_access
    (10) estructurasDatos -> . hash_operations
    (11) estructurasControl -> . ifStatement
    (12) estructurasControl -> . while_statement
    (33) array -> . array_explicito
    (34) array -> . array_implicito
    (35) array -> . array_creation
    (36) array -> . newArray
    (45) var_arreglo -> . var
    (46) var_arreglo -> . var ASSIGN array
    (47) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (63) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (64) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (65) hash_access -> . var LEFT_COR value RIGHT_COR
    (66) hash_operations -> . hash_access ASSIGN value
    (48) ifStatement -> . IF condiciones COLON codigo
    (49) ifStatement -> . IF condiciones COLON codigo else_statement
    (72) while_statement -> . WHILE condiciones COLON codigo
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR
    (39) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (41) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> . ARRAY DOT NEW
    (43) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT

    PUT             shift and go to state 6
    GETS            shift and go to state 7
    HASH            shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    LEFT_COR        shift and go to state 21
    PERCENTW        shift and go to state 25
    ARRAY           shift and go to state 26
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31

    codigo                         shift and go to state 88
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    array                          shift and go to state 8
    var_arreglo                    shift and go to state 9
    acceder_arreglo                shift and go to state 10
    hash_declaration               shift and go to state 11
    hash_access                    shift and go to state 12
    hash_operations                shift and go to state 13
    ifStatement                    shift and go to state 14
    while_statement                shift and go to state 15
    array_explicito                shift and go to state 16
    array_implicito                shift and go to state 17
    array_creation                 shift and go to state 18
    newArray                       shift and go to state 19
    var                            shift and go to state 20

state 66

    (51) condiciones -> condiciones conectores . condiciones
    (50) condiciones -> . condicion
    (51) condiciones -> . condiciones conectores condiciones
    (54) condicion -> . num operComp num
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    condiciones                    shift and go to state 89
    condicion                      shift and go to state 50
    num                            shift and go to state 51

state 67

    (52) conectores -> AND .

    FLOAT           reduce using rule 52 (conectores -> AND .)
    INTEGER         reduce using rule 52 (conectores -> AND .)


state 68

    (53) conectores -> OR .

    FLOAT           reduce using rule 53 (conectores -> OR .)
    INTEGER         reduce using rule 53 (conectores -> OR .)


state 69

    (54) condicion -> num operComp . num
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    num                            shift and go to state 90

state 70

    (55) operComp -> GREATER .

    FLOAT           reduce using rule 55 (operComp -> GREATER .)
    INTEGER         reduce using rule 55 (operComp -> GREATER .)


state 71

    (56) operComp -> LESS .

    FLOAT           reduce using rule 56 (operComp -> LESS .)
    INTEGER         reduce using rule 56 (operComp -> LESS .)


state 72

    (57) operComp -> GREATER_EQUAL .

    FLOAT           reduce using rule 57 (operComp -> GREATER_EQUAL .)
    INTEGER         reduce using rule 57 (operComp -> GREATER_EQUAL .)


state 73

    (58) operComp -> LESS_EQUAL .

    FLOAT           reduce using rule 58 (operComp -> LESS_EQUAL .)
    INTEGER         reduce using rule 58 (operComp -> LESS_EQUAL .)


state 74

    (59) operComp -> EQUAL .

    FLOAT           reduce using rule 59 (operComp -> EQUAL .)
    INTEGER         reduce using rule 59 (operComp -> EQUAL .)


state 75

    (60) operComp -> NOT_EQUAL .

    FLOAT           reduce using rule 60 (operComp -> NOT_EQUAL .)
    INTEGER         reduce using rule 60 (operComp -> NOT_EQUAL .)


state 76

    (61) operComp -> COMPARE .

    FLOAT           reduce using rule 61 (operComp -> COMPARE .)
    INTEGER         reduce using rule 61 (operComp -> COMPARE .)


state 77

    (72) while_statement -> WHILE condiciones COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (32) puts -> . PUT values
    (29) gets -> . GETS DOT CHOMP DOT TO_F
    (30) gets -> . GETS DOT CHOMP DOT TO_I
    (31) gets -> . GETS DOT CHOMP
    (5) estructurasDatos -> . array
    (6) estructurasDatos -> . var_arreglo
    (7) estructurasDatos -> . acceder_arreglo
    (8) estructurasDatos -> . hash_declaration
    (9) estructurasDatos -> . hash_access
    (10) estructurasDatos -> . hash_operations
    (11) estructurasControl -> . ifStatement
    (12) estructurasControl -> . while_statement
    (33) array -> . array_explicito
    (34) array -> . array_implicito
    (35) array -> . array_creation
    (36) array -> . newArray
    (45) var_arreglo -> . var
    (46) var_arreglo -> . var ASSIGN array
    (47) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (63) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (64) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (65) hash_access -> . var LEFT_COR value RIGHT_COR
    (66) hash_operations -> . hash_access ASSIGN value
    (48) ifStatement -> . IF condiciones COLON codigo
    (49) ifStatement -> . IF condiciones COLON codigo else_statement
    (72) while_statement -> . WHILE condiciones COLON codigo
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR
    (39) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (41) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> . ARRAY DOT NEW
    (43) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT

    PUT             shift and go to state 6
    GETS            shift and go to state 7
    HASH            shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    LEFT_COR        shift and go to state 21
    PERCENTW        shift and go to state 25
    ARRAY           shift and go to state 26
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31

    codigo                         shift and go to state 91
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    array                          shift and go to state 8
    var_arreglo                    shift and go to state 9
    acceder_arreglo                shift and go to state 10
    hash_declaration               shift and go to state 11
    hash_access                    shift and go to state 12
    hash_operations                shift and go to state 13
    ifStatement                    shift and go to state 14
    while_statement                shift and go to state 15
    array_explicito                shift and go to state 16
    array_implicito                shift and go to state 17
    array_creation                 shift and go to state 18
    newArray                       shift and go to state 19
    var                            shift and go to state 20

state 78

    (39) array_implicito -> PERCENTW LEFT_COR values_space . RIGHT_COR

    RIGHT_COR       shift and go to state 92


state 79

    (40) array_implicito -> PERCENTW LEFT_COR RIGHT_COR .

    $end            reduce using rule 40 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    LEFT_COR        reduce using rule 40 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)
    ELSE            reduce using rule 40 (array_implicito -> PERCENTW LEFT_COR RIGHT_COR .)


state 80

    (18) values_space -> value . SPACE values_space
    (19) values_space -> value .

    SPACE           shift and go to state 93
    RIGHT_COR       reduce using rule 19 (values_space -> value .)


state 81

    (41) array_creation -> ARRAY LEFTPAR array_explicito . RIGHTPAR

    RIGHTPAR        shift and go to state 94


state 82

    (42) newArray -> ARRAY DOT NEW .
    (43) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> ARRAY DOT NEW . LEFTPAR INTEGER COMMA values RIGHTPAR

    $end            reduce using rule 42 (newArray -> ARRAY DOT NEW .)
    LEFT_COR        reduce using rule 42 (newArray -> ARRAY DOT NEW .)
    ELSE            reduce using rule 42 (newArray -> ARRAY DOT NEW .)
    LEFTPAR         shift and go to state 95


state 83

    (21) values -> value COMMA values .

    $end            reduce using rule 21 (values -> value COMMA values .)
    ELSE            reduce using rule 21 (values -> value COMMA values .)
    RIGHT_COR       reduce using rule 21 (values -> value COMMA values .)
    RIGHTPAR        reduce using rule 21 (values -> value COMMA values .)


state 84

    (29) gets -> GETS DOT CHOMP DOT . TO_F
    (30) gets -> GETS DOT CHOMP DOT . TO_I

    TO_F            shift and go to state 96
    TO_I            shift and go to state 97


state 85

    (47) acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .

    $end            reduce using rule 47 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)
    ELSE            reduce using rule 47 (acceder_arreglo -> var_arreglo LEFT_COR INTEGER RIGHT_COR .)


state 86

    (65) hash_access -> var LEFT_COR value RIGHT_COR .

    ASSIGN          reduce using rule 65 (hash_access -> var LEFT_COR value RIGHT_COR .)
    $end            reduce using rule 65 (hash_access -> var LEFT_COR value RIGHT_COR .)
    ELSE            reduce using rule 65 (hash_access -> var LEFT_COR value RIGHT_COR .)


state 87

    (63) hash_declaration -> HASH LEFT_COR values RIGHT_COR .

    $end            reduce using rule 63 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)
    ELSE            reduce using rule 63 (hash_declaration -> HASH LEFT_COR values RIGHT_COR .)


state 88

    (48) ifStatement -> IF condiciones COLON codigo .
    (49) ifStatement -> IF condiciones COLON codigo . else_statement
    (62) else_statement -> . ELSE COLON codigo

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 48 (ifStatement -> IF condiciones COLON codigo .)
    ELSE            shift and go to state 99

  ! ELSE            [ reduce using rule 48 (ifStatement -> IF condiciones COLON codigo .) ]

    else_statement                 shift and go to state 98

state 89

    (51) condiciones -> condiciones conectores condiciones .
    (51) condiciones -> condiciones . conectores condiciones
    (52) conectores -> . AND
    (53) conectores -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    COLON           reduce using rule 51 (condiciones -> condiciones conectores condiciones .)
    AND             shift and go to state 67
    OR              shift and go to state 68

  ! AND             [ reduce using rule 51 (condiciones -> condiciones conectores condiciones .) ]
  ! OR              [ reduce using rule 51 (condiciones -> condiciones conectores condiciones .) ]

    conectores                     shift and go to state 66

state 90

    (54) condicion -> num operComp num .

    COLON           reduce using rule 54 (condicion -> num operComp num .)
    AND             reduce using rule 54 (condicion -> num operComp num .)
    OR              reduce using rule 54 (condicion -> num operComp num .)


state 91

    (72) while_statement -> WHILE condiciones COLON codigo .

    $end            reduce using rule 72 (while_statement -> WHILE condiciones COLON codigo .)
    ELSE            reduce using rule 72 (while_statement -> WHILE condiciones COLON codigo .)


state 92

    (39) array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .

    $end            reduce using rule 39 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    LEFT_COR        reduce using rule 39 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)
    ELSE            reduce using rule 39 (array_implicito -> PERCENTW LEFT_COR values_space RIGHT_COR .)


state 93

    (18) values_space -> value SPACE . values_space
    (18) values_space -> . value SPACE values_space
    (19) values_space -> . value
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    value                          shift and go to state 80
    values_space                   shift and go to state 100
    var                            shift and go to state 34
    num                            shift and go to state 35

state 94

    (41) array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .

    $end            reduce using rule 41 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    LEFT_COR        reduce using rule 41 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)
    ELSE            reduce using rule 41 (array_creation -> ARRAY LEFTPAR array_explicito RIGHTPAR .)


state 95

    (43) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER RIGHTPAR
    (44) newArray -> ARRAY DOT NEW LEFTPAR . INTEGER COMMA values RIGHTPAR

    INTEGER         shift and go to state 101


state 96

    (29) gets -> GETS DOT CHOMP DOT TO_F .

    $end            reduce using rule 29 (gets -> GETS DOT CHOMP DOT TO_F .)
    ELSE            reduce using rule 29 (gets -> GETS DOT CHOMP DOT TO_F .)


state 97

    (30) gets -> GETS DOT CHOMP DOT TO_I .

    $end            reduce using rule 30 (gets -> GETS DOT CHOMP DOT TO_I .)
    ELSE            reduce using rule 30 (gets -> GETS DOT CHOMP DOT TO_I .)


state 98

    (49) ifStatement -> IF condiciones COLON codigo else_statement .

    $end            reduce using rule 49 (ifStatement -> IF condiciones COLON codigo else_statement .)
    ELSE            reduce using rule 49 (ifStatement -> IF condiciones COLON codigo else_statement .)


state 99

    (62) else_statement -> ELSE . COLON codigo

    COLON           shift and go to state 102


state 100

    (18) values_space -> value SPACE values_space .

    RIGHT_COR       reduce using rule 18 (values_space -> value SPACE values_space .)


state 101

    (43) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . RIGHTPAR
    (44) newArray -> ARRAY DOT NEW LEFTPAR INTEGER . COMMA values RIGHTPAR

    RIGHTPAR        shift and go to state 103
    COMMA           shift and go to state 104


state 102

    (62) else_statement -> ELSE COLON . codigo
    (1) codigo -> . puts
    (2) codigo -> . gets
    (3) codigo -> . estructurasDatos
    (4) codigo -> . estructurasControl
    (32) puts -> . PUT values
    (29) gets -> . GETS DOT CHOMP DOT TO_F
    (30) gets -> . GETS DOT CHOMP DOT TO_I
    (31) gets -> . GETS DOT CHOMP
    (5) estructurasDatos -> . array
    (6) estructurasDatos -> . var_arreglo
    (7) estructurasDatos -> . acceder_arreglo
    (8) estructurasDatos -> . hash_declaration
    (9) estructurasDatos -> . hash_access
    (10) estructurasDatos -> . hash_operations
    (11) estructurasControl -> . ifStatement
    (12) estructurasControl -> . while_statement
    (33) array -> . array_explicito
    (34) array -> . array_implicito
    (35) array -> . array_creation
    (36) array -> . newArray
    (45) var_arreglo -> . var
    (46) var_arreglo -> . var ASSIGN array
    (47) acceder_arreglo -> . var_arreglo LEFT_COR INTEGER RIGHT_COR
    (63) hash_declaration -> . HASH LEFT_COR values RIGHT_COR
    (64) hash_declaration -> . HASH LEFT_COR RIGHT_COR
    (65) hash_access -> . var LEFT_COR value RIGHT_COR
    (66) hash_operations -> . hash_access ASSIGN value
    (48) ifStatement -> . IF condiciones COLON codigo
    (49) ifStatement -> . IF condiciones COLON codigo else_statement
    (72) while_statement -> . WHILE condiciones COLON codigo
    (37) array_explicito -> . LEFT_COR values RIGHT_COR
    (38) array_explicito -> . LEFT_COR RIGHT_COR
    (39) array_implicito -> . PERCENTW LEFT_COR values_space RIGHT_COR
    (40) array_implicito -> . PERCENTW LEFT_COR RIGHT_COR
    (41) array_creation -> . ARRAY LEFTPAR array_explicito RIGHTPAR
    (42) newArray -> . ARRAY DOT NEW
    (43) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR
    (44) newArray -> . ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT

    PUT             shift and go to state 6
    GETS            shift and go to state 7
    HASH            shift and go to state 22
    IF              shift and go to state 23
    WHILE           shift and go to state 24
    LEFT_COR        shift and go to state 21
    PERCENTW        shift and go to state 25
    ARRAY           shift and go to state 26
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31

    codigo                         shift and go to state 105
    puts                           shift and go to state 2
    gets                           shift and go to state 3
    estructurasDatos               shift and go to state 4
    estructurasControl             shift and go to state 5
    array                          shift and go to state 8
    var_arreglo                    shift and go to state 9
    acceder_arreglo                shift and go to state 10
    hash_declaration               shift and go to state 11
    hash_access                    shift and go to state 12
    hash_operations                shift and go to state 13
    ifStatement                    shift and go to state 14
    while_statement                shift and go to state 15
    array_explicito                shift and go to state 16
    array_implicito                shift and go to state 17
    array_creation                 shift and go to state 18
    newArray                       shift and go to state 19
    var                            shift and go to state 20

state 103

    (43) newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .

    $end            reduce using rule 43 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    LEFT_COR        reduce using rule 43 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)
    ELSE            reduce using rule 43 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER RIGHTPAR .)


state 104

    (44) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA . values RIGHTPAR
    (20) values -> . value
    (21) values -> . value COMMA values
    (13) value -> . var
    (14) value -> . num
    (15) value -> . STRING
    (16) value -> . NIL
    (17) value -> . SYMBOL
    (22) var -> . LOCAL_VAR
    (23) var -> . INSTANCE_VAR
    (24) var -> . CLASS_VAR
    (25) var -> . GLOBAL_VAR
    (26) var -> . CONSTANT
    (27) num -> . FLOAT
    (28) num -> . INTEGER

    STRING          shift and go to state 36
    NIL             shift and go to state 37
    SYMBOL          shift and go to state 38
    LOCAL_VAR       shift and go to state 27
    INSTANCE_VAR    shift and go to state 28
    CLASS_VAR       shift and go to state 29
    GLOBAL_VAR      shift and go to state 30
    CONSTANT        shift and go to state 31
    FLOAT           shift and go to state 39
    INTEGER         shift and go to state 40

    values                         shift and go to state 106
    value                          shift and go to state 33
    var                            shift and go to state 34
    num                            shift and go to state 35

state 105

    (62) else_statement -> ELSE COLON codigo .

    ELSE            reduce using rule 62 (else_statement -> ELSE COLON codigo .)
    $end            reduce using rule 62 (else_statement -> ELSE COLON codigo .)


state 106

    (44) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values . RIGHTPAR

    RIGHTPAR        shift and go to state 107


state 107

    (44) newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .

    $end            reduce using rule 44 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    LEFT_COR        reduce using rule 44 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)
    ELSE            reduce using rule 44 (newArray -> ARRAY DOT NEW LEFTPAR INTEGER COMMA values RIGHTPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LEFT_COR in state 20 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 88 resolved as shift
WARNING: shift/reduce conflict for AND in state 89 resolved as shift
WARNING: shift/reduce conflict for OR in state 89 resolved as shift
